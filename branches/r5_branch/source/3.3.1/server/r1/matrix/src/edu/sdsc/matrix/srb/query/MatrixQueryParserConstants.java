/*
	* 	SDSC Matrix. A Gridflow Management System for data grids and digtal libraries
	*  Copyright (C) 2004 SDSC Matrix Project
	*
	* This library is free software; you can redistribute it and/or
	* modify it under the terms of the GNU Lesser General Public
	* License as published by the Free Software Foundation; either
	* version 2.1 of the License, or (at your option) any later version.
	*
	* This library is distributed in the hope that it will be useful,
	*	but WITHOUT ANY WARRANTY; without even the implied warranty of
	*	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	*	Lesser General Public License for more details.
	*
	*	You should have received a copy of the GNU Lesser General Public
	*	License along with this library; if not, write to the Free Software
	*	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
	*
	* ====================================================================
	*
	* This software consists of voluntary contributions from the developers of the SDSC
	* Matrix Project. We request that all redistribution and software made using this code
	* acknowledge their use of the “SDSC Matrix project” in their end-user documentation or
	* in their website.
	*
	* SDSC Matrix Project (list of developers as of Dec 2005)
	*	Designer & Architect: Arun swaran Jagatheesan (arun@sdsc.edu)
	* 9500 Gilman Drive, MC0505
	* San Diego Supercomputer Center
	* University of California
	* La Jolla CA 92093
	*
	* Allen Ding (alding@sdsc.edu)
	* Lucas Gilbert (iktome@sdsc.edu)
	* Arun Jagatheesan (arun@sdsc.edu)
	* Reena Mathew	(rmathew@sdsc.edu)
	* Daniel Moore (mixx@umail.ucsb.edu)
	* Erik Vandekieft (evk@sdsc.edu)
	* Jonathan Weinberg (jonw@sdsc.edu)
	*
	*/

/* Generated By:JJTree&JavaCC: Do not edit this line. MatrixQueryParserConstants.java */
package edu.sdsc.matrix.srb.query;

public interface MatrixQueryParserConstants {
	int EOF = 0;
	int ANDHASH = 5;
	int x = 6;
	int e = 7;
	int E = 8;
	int LPAR = 9;
	int RPAR = 10;
	int SEMICOLON = 11;
	int COLON = 12;
	int COLONCOLON = 13;
	int PRAGMA = 14;
	int EXTENSION = 15;
	int DOT = 16;
	int LAX = 17;
	int STRICT = 18;
	int SKIPTOKEN = 19;
	int TYPE = 20;
	int ANDSYMBOL = 21;
	int AMP = 22;
	int QUOT = 23;
	int APOS = 24;
	int HASH = 25;
	int XQUERY = 26;
	int VERSION = 27;
	int IMPORT = 28;
	int MODULE = 29;
	int NAMESPACE = 30;
	int EQUAL = 31;
	int AT = 32;
	int DEFINE = 33;
	int VARIABLE = 34;
	int DOLLAR = 35;
	int LCURLYBRACE = 36;
	int RCURLYBRACE = 37;
	int EXTERNAL = 38;
	int COMMA = 39;
	int RETURN = 40;
	int FOR = 41;
	int IN = 42;
	int LET = 43;
	int WHERE = 44;
	int ORDER = 45;
	int BY = 46;
	int STABLE = 47;
	int ASCENDING = 48;
	int DESCENDING = 49;
	int EMPTY = 50;
	int GREATEST = 51;
	int LEAST = 52;
	int COLLATION = 53;
	int SOME = 54;
	int EVERY = 55;
	int SATISFIES = 56;
	int TYPESWITCH = 57;
	int DEFAULTTOKEN = 58;
	int CASE = 59;
	int AS = 60;
	int IF = 61;
	int THEN = 62;
	int ELSE = 63;
	int OR = 64;
	int AND = 65;
	int INSTANCE = 66;
	int OF = 67;
	int TREAT = 68;
	int CASTABLE = 69;
	int CAST = 70;
	int TO = 71;
	int PLUS = 72;
	int MINUS = 73;
	int MULT = 74;
	int DIV = 75;
	int IDIV = 76;
	int MOD = 77;
	int UNION = 78;
	int ORSYMBOL = 79;
	int INTERSECT = 80;
	int EXCEPT = 81;
	int FSLASH = 82;
	int BSLASH = 83;
	int LBRACKET = 84;
	int RBRACKET = 85;
	int VALIDATE = 86;
	int GLOBAL = 87;
	int CONTEXT = 88;
	int NOTEQUAL = 89;
	int LESSTHAN = 90;
	int LESSTHANEQUAL = 91;
	int GREATERTHAN = 92;
	int GREATERTHANEQUAL = 93;
	int EQ = 94;
	int NE = 95;
	int LT = 96;
	int LE = 97;
	int GT = 98;
	int GE = 99;
	int IS = 100;
	int ISNOT = 101;
	int LESSTHANLESSTHAN = 102;
	int GREATERTHANGREATERTHAN = 103;
	int ATSYMBOL = 104;
	int DOTDOT = 105;
	int CHILD = 106;
	int DESCENDANT = 107;
	int ATTRIBUTE = 108;
	int SELF = 109;
	int DESCENDANT_OR_SELF = 110;
	int PARENT = 111;
	int DOCUMENT = 112;
	int ELEMENT = 113;
	int TEXT = 114;
	int CDATASTART = 115;
	int CDATAEND = 116;
	int PROCESSINGINSTRSTART = 117;
	int PROCESSINGINSTREND = 118;
	int COMMENTSTART = 119;
	int COMMENTEND = 120;
	int OPENQUOTE = 121;
	int OPENAPOS = 122;
	int DECLARE = 123;
	int XMLSPACE = 124;
	int PRESERVE = 125;
	int STRIP = 126;
	int FUNCTION = 127;
	int ITEM = 128;
	int NILLABLE = 129;
	int PROCESSINGINSTRUCTION = 130;
	int DOCUMENTNODE = 131;
	int COMMENT = 132;
	int NODE = 133;
	int QUESTION = 134;
	int SCHEMA = 135;
	int VALIDATION = 136;
	int LIKE_OPERATOR = 137;
	int NOT_LIKE_OPERATOR = 138;
	int SOUNDS_LIKE_OPERATOR = 139;
	int SOUNDS_NOT_LIKE_OPERATOR = 140;
	int IN_OPERATOR = 141;
	int NOT_IN_OPERATOR = 142;
	int BETWEEN_OPERATOR = 143;
	int NOT_BETWEEN_OPERATOR = 144;
	int NCNAME = 145;
	int NCNameChar = 146;
	int Letter = 147;
	int BaseChar = 148;
	int Ideographic = 149;
	int CombiningChar = 150;
	int Digit = 151;
	int Extender = 152;
	int S = 153;
	int Literal = 154;
	int StringLiteral = 155;
	int NumericLiteral = 156;
	int IntegerLiteral = 157;
	int DecimalLiteral = 158;
	int DoubleLiteral = 159;
	int Digits = 160;
	int CHAR = 161;
	int INTEGER_LITERAL = 162;
	int DECIMAL_LITERAL = 163;
	int HEX_LITERAL = 164;
	int OCTAL_LITERAL = 165;
	int DIGIT = 166;
	int IDENTIFIER_LETTER = 167;
	int IDENTIFIER = 168;
	int HEXDIGIT = 169;
	int STRING_LITERAL1 = 170;
	int STRING_LITERAL = 171;
	int DEFAULT = 0;
	String[] tokenImage = {
				"<EOF>",
				"\" \"",
				"\"\\t\"",
				"\"\\n\"",
				"\"\\r\"",
				"\"&#\"",
				"\"x\"",
				"\"e\"",
				"\"E\"",
				"\"(\"",
				"\")\"",
				"\";\"",
				"\":\"",
				"\"::\"",
				"\"pragma\"",
				"\"extension\"",
				"\".\"",
				"\"lax\"",
				"\"strict\"",
				"\"skip\"",
				"\"type\"",
				"\"&\"",
				"\"amp\"",
				"\"quot\"",
				"\"apos\"",
				"\"#\"",
				"\"xquery\"",
				"\"version\"",
				"\"import\"",
				"\"module\"",
				"\"namespace\"",
				"\"=\"",
				"\"at\"",
				"\"define\"",
				"\"variable\"",
				"\"$\"",
				"\"{\"",
				"\"}\"",
				"\"external\"",
				"\",\"",
				"\"return\"",
				"\"for\"",
				"\"in\"",
				"\"let\"",
				"\"where\"",
				"\"order\"",
				"\"by\"",
				"\"stable\"",
				"\"ascending\"",
				"\"descending\"",
				"\"empty\"",
				"\"greatest\"",
				"\"least\"",
				"\"collation\"",
				"\"some\"",
				"\"every\"",
				"\"satisfies\"",
				"\"typeswitich\"",
				"\"default\"",
				"\"case\"",
				"\"as\"",
				"\"if\"",
				"\"then\"",
				"\"else\"",
				"\"or\"",
				"\"and\"",
				"\"instance\"",
				"\"of\"",
				"\"treat\"",
				"\"castable\"",
				"\"cast\"",
				"\"to\"",
				"\"+\"",
				"\"-\"",
				"\"*\"",
				"\"div\"",
				"\"idiv\"",
				"\"mod\"",
				"\"union\"",
				"\"|\"",
				"\"intersect\"",
				"\"except\"",
				"\"/\"",
				"\"\\\\\"",
				"\"[\"",
				"\"]\"",
				"\"validate\"",
				"\"global\"",
				"\"context\"",
				"\"!=\"",
				"\"<\"",
				"\"<=\"",
				"\">\"",
				"\">=\"",
				"\"eq\"",
				"\"ne\"",
				"\"lt\"",
				"\"le\"",
				"\"gt\"",
				"\"ge\"",
				"\"is\"",
				"\"isnot\"",
				"\"<<\"",
				"\">>\"",
				"\"@\"",
				"\"..\"",
				"\"child\"",
				"\"descendant\"",
				"\"attribute\"",
				"\"self\"",
				"\"descendant-or-self\"",
				"\"parent\"",
				"\"document\"",
				"\"element\"",
				"\"text\"",
				"\"<![CDATA[\"",
				"\"]]>\"",
				"\"<?\"",
				"\"?>\"",
				"\"<!--\"",
				"\"-->\"",
				"\"\\\"\"",
				"\"\\\'\"",
				"\"declare\"",
				"\"xmlspace\"",
				"\"preserve\"",
				"\"strip\"",
				"\"function\"",
				"\"item\"",
				"\"nillable\"",
				"\"processing-instruction\"",
				"\"document-node\"",
				"\"comment\"",
				"\"node\"",
				"\"?\"",
				"\"schema\"",
				"\"validation\"",
				"\"LIKE\"",
				"\"NOT LIKE\"",
				"\"SOUNDS LIKE\"",
				"\"SOUNDS NOT LIKE\"",
				"\"IN\"",
				"\"NOT IN\"",
				"\"BETWEEN\"",
				"\"NOT BETWEEN\"",
				"<NCNAME>",
				"<NCNameChar>",
				"<Letter>",
				"<BaseChar>",
				"<Ideographic>",
				"<CombiningChar>",
				"<Digit>",
				"<Extender>",
				"<S>",
				"<Literal>",
				"<StringLiteral>",
				"<NumericLiteral>",
				"<IntegerLiteral>",
				"<DecimalLiteral>",
				"<DoubleLiteral>",
				"<Digits>",
				"<CHAR>",
				"<INTEGER_LITERAL>",
				"<DECIMAL_LITERAL>",
				"<HEX_LITERAL>",
				"<OCTAL_LITERAL>",
				"<DIGIT>",
				"<IDENTIFIER_LETTER>",
				"<IDENTIFIER>",
				"<HEXDIGIT>",
				"<STRING_LITERAL1>",
				"<STRING_LITERAL>",
				"\"\\\'\\\'\"",
	};
}
