If you are building an MCAT-enabled SRB, see the
MCAT/README.MCAT.INSTALL and/or install.pl script, for the
installation procedure.  After the SRB server is installed and
running, you can use the tools described below.

---------------------------------------------
 MCAT/SRB Administration Tool:  mcatAdmin.jar
---------------------------------------------

The MCAT/Srb Admin Tool (also commonly called the Java Admin Tool) can
be used for most of the SRB/MCAT administration operations once you
have an SRB system initialized (either hosted by SDSC or your own
MCAT-enabled SRB).

The Java Admin Tool provides a Graphical User Interface to assist in
the process.  In most cases, where you need to select from currently
defined values, it will query your MCAT database and present you with
the options to pick from.

Since the Java Admin Tool is written in Java, common Java features are
available.  Cut&Paste can come in handy for many operations and is
available as long as you are using a recent Java JDK (1.4.1).  If you
wish to build the tool, the JDK is specified as part of the general
build, via configure, and is defined in the mk/mk.config file.

Each function (except exit) in the main window brings up another
window to perform that operation.  Being an free-standing window, you
can move and resize the window to anywhere on the screen.  You can
close the window, and bring it back, and it will retain the settings
and results from previous operations during the current session of the
tool (the object remains when closed).  The Clear/Refresh button can
be used to again query the MCAT for current values (if you've changed
something).

There is a Help function that will bring up various descriptions.
Look thru the various options, windows, and help pages to get familiar
with its features.

If you just installed your own MCAT-enabled SRB, you should change the
password for the pre-defined admin userid used to boot-strap your
system.  Use the pull-down menu for Users, select Modify User Info,
and it bring up another window to do so.  Click on the 'sdsc' domain,
and it will show you the existing users under that domain, click on
the 'srb' user, click the change user password button, enter a new
password, and then Execute.  A message indicating success should
appear in the text window at the bottom.

If you didn't create your own domain while installing an MCAT-enabled
SRB, you can do so via the Java Admin Tool.  It is under Tokens, Add
New Domain.

-----------------------------------------------------------
How to run the MCAT/SRB Administration Tool:  mcatAdmin.jar
-----------------------------------------------------------

All Java Admin Tool operations go thru the normal SRB client/server
interface, so you can run it on various Unix or Windows SRB client
hosts (you do NOT need to run it on a host with direct access to the
MCAT database, any network host will do).

The Java Admin Tool is now pure Java, as it uses Jargon to communicate
with the SRB servers.  This means that it no longer needs to be
compiled, as the Java binary, the jar file, is the same on all hosts.
The Java Admin Tool is known to work fine on Linux, Solaris, Mac Os X,
and Windows.

The jar file is .../MCAT/java/mcatAdmin.jar.  To run it, run 'java
-jar mcatAdmin.jar' (if you cd to MCAT/java).  You can also specify
the full path of the mcatAdmin.jar file and run it from any directory.

If you have no ~/.srb/.MdasEnv or ~/.srb/.MdasAuth files set up, it
will prompt for the needed connection information (host, port, login
id, domain, password); so it is easy to run it from any Java-capable
host.  

You will need to connect as an sysadmin user to be allowed to perform
any significant updates to the MCAT database. 


----------------------------------
 Scommands
----------------------------------

Admin-only commands are now built in utilities/admin-bin.  These
include: SdelValue, Singestgroup, Singesttoken, Singestuser,
SmodifyUser, SmodR, Sregisterlocation, Sregisterresource, and
Szonesync.pl.  While you may prefer to use the Java Admin Tool to get
familiar with various admin functions, these utilities are useful for
simple command-line operations and for use via scripts for multiple
operations.

See the man pages or top of the script for more information on these.

To access the man pages, define an alias for Sman to be 'man -M
.../utilities/man' where ... is the beginning of the full path to the
directory.  In csh, for example: alias Sman 'man -M
/scratch/slocal/srb1130/SRB2_0_0rel/utilities/man'.

Some of the Scommands are both user and administrator commands (built
in utilities/bin).  As an example of administrator operations, you can
list complete information about the currently defined resources, by
running 'Sinit' followed by 'SgetR'.

The Scommands are:
 Sauth      - Create an SRB password file with scrambled contents
 Sannotate  - Annotate SRB Objects and display annotations
 Sappend    - Appends a local file, standard in, or a SRB object to a
              target SRB object
 Sattrs     - Display meta attributes used in conditions
 Sbkupsrb   - Backup/synchronize srb data/collection  to  a target resource
 Sbload     - Imports in bulk one or more local files and/or directories into
              SRB space
 Sbregister - Registers in  bulk  one  or  more  local  files into SRB space
 Sbunload   - Exports in bulk a collection or a  SRB  container to local file
              system
 Scat       - Streams SRB Objects to standard output
 Scd        - Changes working SRB collection
 Schdefres  - Changes default resource for the current session.
 Schhost    - Changes connection host for the current session.
 Schksum    - Performs checksum on existing SRB objects and stores them in
              the MCAT
 Schmod     - Modify access permissions for SRB objects and collections
 Scp        - Copies an object to a new collection in SRB space
 SdelValue  - Admin command to delete SRB tokens such as users, location, etc
 Senv       - Displays environmental file content
 Serror     - Display Error Information from Error Number
 Sexit      - Clears environmental files created during SRB operation
 Sget       - Exports SRB objects into local file system
 SgetColl   - Displays information about SRB collections
 SgetD      - Displays information about SRB files (objects)
 SgetR      - Displays information about SRB resources
 SgetT      - Displays information about SRB tickets
 SgetU      - Displays information about SRB users
 Shelp      - Displays one-line help messages for all Scommands
 Singestgroup - Adds a  group user  account
 Singesttoken - Adds SRB native metadata types (reserved keywords)
 Singestuser- Register a new user into SRB space
 Sinit      - Initializes environmental files for SRB operation
 Sln        - Soft link SRB files in other collections
 Sls        - Lists SRB objects and collections
 Slscont    - Lists SRB containers
 Smeta      - Displays and ingests meta data values
 Smkcont    - Creates a new SRB container
 Smkdir     - Creates a new SRB collection
 SmodColl   - Modifies some system metadata information on SRB collections
 SmodD      - Modifies some system metadata information on SRB objects
 SmodR      - Modifies some system metadata information on SRB resorces
 SmodifyUser- Modifies some system metadata information on SRB users
 Smv        - Changes the collection for objects in SRB space
 Spasswd    - Change SRB (Text) Password
 Spcommand  - Execute proxy command in SRB
 Sphymove   - Moves a SRB object to a new SRB resource
 Spullmeta  - Accesses metadata in bulk from MCAT
 Spushmeta  - Ingests metadata in bulk into MCAT
 Sput       - Imports local files into SRB space
 Spwd       - Displays current working SRB collection
 Sregister  - Registers an object as a SRB object in MCAT
 Sregisterlocation - Register a Resource location in MCAT
 Sregisterresource - Register a Physical Resource in MCAT
 Sreplcont  - Replicates an existing SRB Container
 Sreplicate - Replicates an existing SRB object in a (possibly) new resource
 Srm        - Removes SRB objects
 Srmcont    - Removes SRB container
 Srmdir     - Removes an existing SRB collection
 Srmticket  - Remove a ticket
 Srmtrash   - Purge SRB objects and sub-collections in the "trash" collection
 Srsync     - Synchronize files in the local file system and the copy stored 
              in SRB
 Ssyncd     - Synchronizes copies of an SRB object
 Ssh        - executes  Scommands in a shell type environment
 Ssyncont   - Synchronize SRB containers
 Stcat      - Streams ticketed SRB Objects to standard output
 Sticket    - Issue tickets for SRB objects and collections
 Stls       - Lists ticketed SRB objects and collections
 Stoken     - Displays information about SRB-aware types.
 Sufmeta    - Query,insert,delete user-defined metadata for SRB 
              data/collection/user,resources
 Szone      - Insert, delete and modify Zone and Zone information
 srbpget    - Exports SRB objects into local file system with client driven
              threads
 srbpput    - Imports local files into SRB space with client driven threads


----------------------------------------
DO NOT REMOVE CERTAIN BUILT-IN USER IDS
----------------------------------------

There are a few built-in user id's that you should not remove as they
are used internally for various functions.  These include:
public@npaci, srb@sdsc, testuser@sdsc, and ticketuser@sdsc.  If you
wish, you can change the passwords on these (although ticketuser is
only used for ticket-based access and so passwords are not used).  

For example, ticketuser@sdsc is used as part of the inter-zone
authentication so removing it will cause failures in various zone
operations.

----------------------------------
SYSTEM MANAGER'S OPERATIONS
----------------------------------

Common Admin functions include creating resources, adding new users,
and creating tokens (descriptive items).  See the Java Admin Tool for
additional information.

A simple SRB system can be created as follows (via the Java Admin Tool):
  Create a new domain, if you haven't already.
  Create a new location (a name for your system).
  Create a new physical resource, associated with your location; the 
    simplist being a Unix file system on the SRB server host.
  Add a new user in your domain, non-privileged.
  The user should now be able to Sinit (after setting their
     ~/.srb/.MdasEnv and ~/.srb/.MdasAuth), and Sput, and Sget files.

The above is all done for you if you use the install.pl script, in
which case you can run the Java Admin Tool to explore the system.
  
The Java Admin Tool can also be used to create more sophistocated
resource systems, including Compound and Logical Resources.  See the
release notes, FAQ, and other documents for more information.
