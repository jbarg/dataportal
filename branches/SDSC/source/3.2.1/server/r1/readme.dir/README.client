NOTE: Check http://www.npaci.edu/Research/DI/srb/docs.html for an updated 
version of this document.

This is a short note on how to use the SRB client library. For full
documentation and related articles, read the web page at 
http://www.npaci.edu/Research/DI/srb. In addition, comments and prototyping 
of the client API given in the clStubExtern.h and clConnectExtern.h files 
may be useful.


1) Setting up the client user environment - Before a user can connect to
the SRB server, the following user environment setup must be carried out:

    a) The ~/.srb/.MdasEnv file - A template of the file can be found in
    utilities/envFiles/.MdasEnv of this package. This file contains four
    parameters :

        i) mdasCollectionHome - This is equivalent to the user's home
        directory (collect) and is created by the MCAT administrator
        at the time of the user registration.

        ii) mdasDomainHome - This is the domain name associated with the
        user. This domain name is assigned to the user at the time of
        the user registration.

        iii) srbUser - This is the user name of the user. This name is assigned
        to the user at the time of the user registration.

        iv) srbHost - This is the default host address of the SRB server 
	when a SRB client initiates a SRB connection.

        v) AUTH_SCHEME - This parameter defines the authentication scheme to
           be used. Vaild input values are:

           'PASSWD_AUTH' - Use the plain text password Mdas Authentication. 
	   If this option is chosen, an additional file containing the 
	   password described in b) is required.

           'ENCRYPT1' - Same as PASSWD_AUTH except the passwords are encrypted
	   going from clients to servers.

	   'GSI_AUTH' - Use the GSI authentication scheme. If this option
	   is chosen, an additional  parameter SERVER_DN given below is
	   required.

	   'GSI_SECURE_COMM' - Use the GSI authentication scheme and use
	   the GSI I/O library for all socket communication between client
	   and server. If this option is choosen, an additional  parameter 
	   SERVER_DN given below is required.

           If this parameter is not defined, the password Authentication scheme
           will be used.

	vi) SERVER_DN - This is the "Distinguish Name" of the user running
	the SRB server. Value for this parameter can be obtained from
	the SRB administrator. This input is meaningful only if the 
	authentication scheme 'GSI_AUTH' or 'GSI_SECURE_COMM' is chosen. 
 
    b) Setting up user authentication - The SRB software can be built to 
    handle either network-securit plain-text passwords (ENCRYPT1) and/or
    GSI.

    At runtime, a client may choose an authentication scheme to use by 
    defining the AUTH_SCHEME parameter in the .MdasEnv file. Each 
    authentication scheme requires a different setup by the user.

    Each authentication scheme requires a different setup by the client.

        i)PASSWD_AUTH/ENCRYPT1 setup - This is a plain text password setup
        where the password is generated at the time of user registration with
        the MCAT catalog. Upon receiving this password from the MCAT
        administrator, a user should place it in a file named ~/.srb/.MdasAuth
        which will be used by the SRB library to authenticate the user.

        ii) GSI_AUTH setup -  Please read README.gsi and follow the HTTP links 
	for GSI client environment setup suggested by in the document. Once 
	the certification/key has been obtained and converted to PEM format 
	for GSI use, look into the cert pem file with a text editor and 
	locate the user "Distinguish Name" string. The string representing 
	the "Distinguish Name" should look like the following:

           subject=/C=US/O=NPACI/OU=SDSC/UID=srb/CN=Storage Resource Broker/
           Email=srb@sdsc.edu

        Copy this string and send it to the SRB administrator for registration.

2) An alternate way of setting up the client user environment is through the
use of UNIX environment variables and the environment variables recognized by 
SRB are given in 2b) of README.utilities.

3) The SRB client library is installed in $(installDir)/bin/libSrbClient.a.
A client program should include the header file "srbClient.h" and the
compilation header file search directive should include the following 
directories:

	$(buildDir)/src/include
	$(buildDir)/src/catalog/include

An example of the Makefile can be found in test/examples/Makefile.in.

3) The client uses the srbConnect(char *srbHost, char* srbPort, 
char* srbAuth, char *userName, char *domainName, char *authScheme,  
char *serverDn) call to connect to the SRB server. The definition
of the input parameters are given in 1). NULL inputs are acceptable
in which case they will default to the values given in the .MdasEnv
and .MdasAuth files or through the use of UNIX environment varibles.

4) After a connection to the SRB server has been opened, the connection
can be used by the client to issue requests to the SRB server using the
client APIs.

5) Upon completion, the client should issue a clFinish(conn) call to 
close the connection to the SRB server.

6) The SRB uses two methods to return error conditions to the client.
The first is the commonly used method of returning a value with the
client API. In general, for integer type return values, a negative
returned value implies error. For pointer type return values, A NULL
returned value implies error. The error code for integer type returns
are given in include/srbErrno.h and catalog/include/mdas_errno.h. 
Typically, these are error codes that are internally generated by the
SRB and MDAS. 

The SRB can also return error conditions in the form of a text string,
but the client must use the clErrorMessage(conn) call to retrieve the 
the message. Typically, it contains a short message describing the
the error condition and often times, the error codes from the underlying
storage system (e.g., HPSS, UniTree, etc) is also included.

An example of using clErrorMessage():

        dirDesc = srbOpendir (conn, acc_method, HOST_ADDR, ".");

        if (dirDesc < 0) {
            fprintf(stderr,"Unable to srbOpendir . \n");
            fprintf(stderr,"%s",clErrorMessage(conn));
            exit (1);
        }

7) Some client examples:

Examples of SRB client can be found in the test/examples directory.


	sconnect.c - Connect to the default srbSrever.

	sget.c - Export a file from srb to local fs.

	sput.c - Import a local file into srb

	sgetcopy.c - Export a replica from srb to local fs.

	squery.c - replicate a srb file.

	sreplicate.c - replicate a srb file. 

	sstat.c - get the stat a srb file.

	
In addition to these client examples, if may be helpful to examine client
codes in the test/testsuite and utilities/src directories.
