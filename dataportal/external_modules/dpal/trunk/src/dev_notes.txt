calling test function
-------------------------------
-------------------------------

java uk.ac.cclrc.dpal.TestDPAccessLayer

javac uk/ac/cclrc/dpal/DPAccessLayer.java
javac uk/ac/cclrc/dpal/TestDPAccessLayer.java

-------------------------------
importing ca cert into keystore

keytool -import -trustcacerts -file cacert.pem

need to import public key of portal aswell
----------------------------------
Things that need setting in pl/sql
----------------------------------
----------------------------------

--to see output from dbms_output package
SET SERVEROUTPUT ON

-- for debugging
SET ARRAYSIZE 1
SET MAXDATA 60000

for debug output
----------------
SHOW ERRORS PROCEDURE <proc name>




actual procedure creation
--------------------------
--------------------------

test one
---------

CREATE OR REPLACE PROCEDURE skeleton
IS
BEGIN
  NULL;
  DBMS_OUTPUT.PUT_LINE('Hello World!');
END;
/

one that works
--------------

CREATE OR REPLACE PROCEDURE get_study (studyid in study.id%type)
IS
   TYPE t_studyrec IS RECORD
   (
      name study.name%type,
      id study.id%type,
      start_date study.start_date%type,
      end_date study.end_date%type

   );
     
     v_studyrec t_studyrec;
     v_studyid  study.id%type := studyid;
BEGIN
     select name,id,start_date,end_date into v_studyrec
     from study
     where id=v_studyid;
     dbms_output.put_line('ID: '||v_studyid);
     dbms_output.put_line('Name: '||v_studyrec.name);
     dbms_output.put_line('Start: '||v_studyrec.start_date);
     dbms_output.put_line('End: '||v_studyrec.start_date);
END;
/

execute get_study(2) ;


a function that returns a number of studies
--------------------------------------------
CREATE OR REPLACE PROCEDURE get_x_studies (numberof in number)
IS
   TYPE t_studyrec IS RECORD
   (
      name study.name%type,
      id study.id%type,
      start_date study.start_date%type,
      end_date study.end_date%type

   );

    type t_studytbl is table of t_studyrec;

    v_studytbl t_studytbl;

BEGIN

    select name,id,start_date,end_date bulk collect into v_studytbl from study ;

    for i in v_studytbl.first .. v_studytbl.last

    loop

    dbms_output.put_line(v_studytbl(i).id || ':   ' || v_studytbl(i).name);

    end loop;

END;
/



general connection stuff
------------------------
------------------------
connect icat_v2@icat.nd.rl.ac.uk

10g test server
--------------
connect icat_v2copy2@minerva.dl.ac.uk/l1verp00lfc



package for dp interaction
--------------------------
--------------------------

following needed to allow arrays to be passed to stored procedures as pl/sql table won't do
-------------------------------------------------------------------------------------------

create or replace type NUM_ARRAY as table of number;
/
create or replace type VC_ARRAY as table of varchar2(4000);
/

-- needed for returning a resultset
CREATE OR REPLACE PACKAGE types
AS
    TYPE ref_cursor IS REF CURSOR;
END;
/


-- package spec:
create or replace package dpaccess as
    function getStudies (keyword_array in vc_array, dn in varchar2);
    function getInvestigations (study_id_array in num_array, dn in varchar2);
    function getDataSets (inv_id_array in num_array, dn in varchar2);
    function getDataFiles (ds_id_array in number, dn in varchar2);
end dpaccess;

--package body:
create or replace package body dpaccess as

    function getStudies (keyword_array in vc_array, dn in varchar2) 
       RETURN types.ref_cursor
    is
       c_study types.ref_cursor;
    begin
       OPEN c_study FOR 
          select name,id,start_date,end_date from study
             where study.id in (select study_id from keyword_list where keyword_id in
                (select keyword.id from keyword where keyword.name in (select * from TABLE(cast(keyword_array as VC_ARRAY))))) ;

       RETURN stock_cursor;
    end;

    function getInvestigations (study_id_array in num_array, dn in varchar2) 
       RETURN types.ref_cursor
    is

    begin
        NULL ;
    end;

    function  getDataSets (inv_id_array in num_array, dn in varchar2)
       RETURN types.ref_cursor
    is

    begin      
        NULL ;
    end;

    function getDataFiles (ds_id_array in number, dn in varchar2) 
       RETURN types.ref_cursor
    is

    begin
        NULL ;
    end;


end dpaccess;
/

testing the functions in sqlplus
---------------------------------
var results refcursor
var inputs vc_array
inputs := select * from table(vc_array('hrpd','raw')) ;
exec :results := dpaccess.getStudies(inputs, 'DN') ;
print results


General learning notes
--------------------------
--------------------------
select * from table(vc_array('hrpd','raw')) ; -- it works !! - still can't pass to a function however


java testing resorted to
-------------------------
-------------------------

create or replace and compile java source named "ArrayDemo"
as
 import java.io.*;
 import java.sql.*;
 import oracle.sql.*;
 import oracle.jdbc.driver.*;
 
 public class ArrayDemo
 {
    public static void passArray() throws SQLException
    {
       Connection conn =
         new OracleDriver().defaultConnection();
 
       String strArray[] = { "hrpd","raw" };
 
       ArrayDescriptor descriptor =
          ArrayDescriptor.createDescriptor( "VC_ARRAY", conn );
 
       ARRAY array_to_pass =
           new ARRAY( descriptor, conn, strArray );

       String query = "begin ? := getStudies(?,'DN'); end;";

       OracleCallableStatement cs =
          (OracleCallableStatement)conn.prepareCall(query);
           
 
       cs.registerOutParameter(1, OracleTypes.CURSOR);

       cs.setARRAY( 2, array_to_pass );
 
       cs.execute();

       ResultSet rs=(ResultSet)cs.getObject(1) ;


        while(rs.next())
        {
           System.out.println("name:" + rs.getString("NAME")+
                              " id:" + rs.getString("ID")+
                              " start_date:" + rs.getString("START_DATE")+
                              " end_date:" + rs.getString("END_DATE")) ;
        }
 
    }
 
 }
 /

actually calling the java from sqlplus
--------------------------------------
create or replace procedure show_java_calling_plsql
as language java
name 'ArrayDemo.passArray()';
/

execute show_java_calling_plsql ;

----------------------------------
what actually worked with the test program (need to get test program to call
package qualified function):

--test
select name,id,start_date,end_date from study
             where study.id in (select study_id from keyword_list where
keyword_id in
                (select keyword.id from keyword where keyword.name in
('hrpd','raw'))) ;



--function
create or replace function getStudies (keyword_array in vc_array, dn in
varchar2) 
       RETURN types.ref_cursor
    is
       c_study types.ref_cursor;
    begin
       OPEN c_study FOR 
          select name,id,start_date,end_date from study
             where study.id in (select study_id from keyword_list where
keyword_id in
                (select keyword.id from keyword where keyword.name in (select
* from TABLE(cast(keyword_array as VC_ARRAY))))) ;

       RETURN c_study;
    end;
/


