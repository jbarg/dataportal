
/*
 * MyProxy.java
 *
 * Created on 27 March 2003, 15:56
 */




package uk.ac.dl.myproxy;

import javax.swing.*;
import javax.swing.JProgressBar;
import javax.swing.Timer;
import org.globus.gsi.OpenSSLKey;
import org.globus.gsi.CertUtil;
import org.globus.gsi.bc.BouncyCastleOpenSSLKey;
import org.globus.util.Util;
import org.globus.common.CoGProperties;
import org.globus.common.Version;
import java.io.*;
import java.awt.event.*;

/**
 *
 * @author  gjd37
 */
public class MyProxyChangePassword extends javax.swing.JDialog {
    
    
    private String reenter_gridpassphrase = "";
    private String new_gridpassphrase = "";
    private String gridpassphrase = "";
    private boolean closeOnSuccess = false;
    
    /** Creates new form MyProxy */
    public MyProxyChangePassword(javax.swing.JFrame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jPasswordField2 = new javax.swing.JPasswordField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jPasswordField3 = new javax.swing.JPasswordField();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setTitle("Change Userkey Password");
        setFocusCycleRoot(false);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jLabel2.setText("Grid PassPhrase");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 4);
        getContentPane().add(jLabel2, gridBagConstraints);

        jLabel3.setText("New Grid PassPhrase");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        getContentPane().add(jLabel3, gridBagConstraints);

        jButton1.setMnemonic('c');
        jButton1.setText("Cancel");
        jButton1.setToolTipText("");
        jButton1.setNextFocusableComponent(jButton2);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton1KeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        getContentPane().add(jButton1, gridBagConstraints);

        jButton2.setMnemonic('o');
        jButton2.setText("Ok");
        jButton2.setToolTipText("");
        jButton2.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.gray, java.awt.Color.white, java.awt.Color.black, java.awt.Color.darkGray));
        jButton2.setMaximumSize(new java.awt.Dimension(67, 25));
        jButton2.setMinimumSize(new java.awt.Dimension(67, 25));
        jButton2.setPreferredSize(new java.awt.Dimension(67, 25));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jButton2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton2KeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        getContentPane().add(jButton2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        getContentPane().add(jLabel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        getContentPane().add(jLabel5, gridBagConstraints);

        jPasswordField1.setNextFocusableComponent(jPasswordField3);
        jPasswordField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPasswordField1KeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 30;
        getContentPane().add(jPasswordField1, gridBagConstraints);

        jPasswordField2.setFocusCycleRoot(true);
        jPasswordField2.setNextFocusableComponent(jPasswordField1);
        jPasswordField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPasswordField2KeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(jPasswordField2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 17, 0, 17);
        getContentPane().add(jLabel6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 7);
        getContentPane().add(jLabel7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 60, 0, 60);
        getContentPane().add(jLabel8, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 7);
        getContentPane().add(jLabel9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        getContentPane().add(jLabel10, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 13, 0, 13);
        getContentPane().add(jLabel11, gridBagConstraints);

        jLabel12.setText("Re-enter new Grid PassPhrase  ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        getContentPane().add(jLabel12, gridBagConstraints);

        jPasswordField3.setNextFocusableComponent(jButton2);
        jPasswordField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPasswordField3KeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 30;
        getContentPane().add(jPasswordField3, gridBagConstraints);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-320)/2, (screenSize.height-170)/2, 320, 170);
    }//GEN-END:initComponents

    private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyPressed
        // TODO add your handling code here:
         if(evt.getKeyText(evt.getKeyCode()).equals("Enter")) jButton1.doClick();
    }//GEN-LAST:event_jButton1KeyPressed

    private void jPasswordField3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPasswordField3KeyPressed
        // TODO add your handling code here:
         if(evt.getKeyText(evt.getKeyCode()).equals("Enter")) jButton2.doClick();
    }//GEN-LAST:event_jPasswordField3KeyPressed

    private void jPasswordField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPasswordField1KeyPressed
        // TODO add your handling code here:
        if(evt.getKeyText(evt.getKeyCode()).equals("Enter")) jButton2.doClick();
        
    }//GEN-LAST:event_jPasswordField1KeyPressed

    private void jButton2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton2KeyPressed
        // TODO add your handling code here:
        if(evt.getKeyText(evt.getKeyCode()).equals("Enter")) jButton2.doClick();
    }//GEN-LAST:event_jButton2KeyPressed

    private void jPasswordField2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPasswordField2KeyPressed
        // TODO add your handling code here:
         if(evt.getKeyText(evt.getKeyCode()).equals("Enter")) jButton2.doClick();
    }//GEN-LAST:event_jPasswordField2KeyPressed
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Add your handling code here:
        gridpassphrase = jPasswordField2.getText();
        new_gridpassphrase = jPasswordField1.getText();
        reenter_gridpassphrase = jPasswordField3.getText();
        
        if(new_gridpassphrase.equals("") || reenter_gridpassphrase.equals("")){
            JOptionPane.showMessageDialog(this,"Please enter a value for each password fields","Need More Information" ,  JOptionPane.WARNING_MESSAGE);
            return;
            
        }
       /* if(gridpassphrase.equals("")){
             JOptionPane.showMessageDialog(this,"Please enter a value for the Grid PassPhrase","Error" ,  JOptionPane.ERROR_MESSAGE);
             return;
        
        }*/
        
        if(!new_gridpassphrase.equals(reenter_gridpassphrase)){
            JOptionPane.showMessageDialog(this,"New Grid PassPhrases do not match","Need More Information" ,  JOptionPane.WARNING_MESSAGE);
            jPasswordField1.setText("");
            jPasswordField3.setText("");
            
        }
        else{
            //change the password
            changePassword();
            dispose();
            //dispose();
        }
        
        
    }//GEN-LAST:event_jButton2ActionPerformed
    
    private void changePassword(){
        
        final JLabel msgLabel = new JLabel("Changing priavte key password...");
        final JProgressBar progressBar = new JProgressBar(0, 10);
        
        progressBar.setValue(0);
        
        Object [] comp = {msgLabel, progressBar};
        Object [] options = { "Cancel" };
        
        JOptionPane pane = new JOptionPane(comp,
        JOptionPane.DEFAULT_OPTION,
        JOptionPane.INFORMATION_MESSAGE,
        null,
        options,
        options[0]);
        
        final JDialog dialog = pane.createDialog(this, "Processing credentials ..");
        
        final Task task = new Task();
        
        Timer timer = new Timer(250, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (task.isDone()) {
                    dialog.dispose();
                } else {
                    progressBar.setValue( (progressBar.getValue()+1) % 10 );
                }
            }
        });
        
        timer.start();
        task.start();
        
        try { Thread.sleep(500); } catch(Exception e) {}
        
        Object selectedValue = null;
        
        if (task.getException() == null) {
            
            dialog.show();
            selectedValue = pane.getValue();
        } else {
            selectedValue = JOptionPane.UNINITIALIZED_VALUE;
        }
        
        timer.stop();
        
        if (selectedValue == null || selectedValue == options[0]) {
            // window closed by user or cancel pressed
            task.cancel(); // <-- this does not work!!!!
            //proxy = null;
        } else if (selectedValue == JOptionPane.UNINITIALIZED_VALUE) {
            // task finished
            Throwable e = task.getException();
            //System.out.println(e.getMessage());
            if (e == null) {
                
                //proxy = task.getProxy();
                JOptionPane.showMessageDialog(this,
                "Password successfully changed.",
                "Changing password",
                JOptionPane.INFORMATION_MESSAGE);
                
                if (closeOnSuccess){
                    
                    
                    
                    dispose();
                    
                }
                
                dispose();
            }
            
            
            //anything else show error.
            else {
                JOptionPane.showMessageDialog(this,e.getMessage(),"Error",  JOptionPane.ERROR_MESSAGE);
                
                
                setVisible(true);
            }
        } else {
            //proxy = null;
        }
        
        
    }
    
    class Task extends Thread {
        private boolean done = false;
        private Throwable exception = null;
        private boolean cancel = false;
        //private GlobusCredential proxy = null;
        
        public boolean isDone() {
            return done;
        }
        
        public void cancel() {
            cancel = true;
        }
        
        public boolean isCancelled() {
            return cancel;
        }
        public Throwable getException() {
            return exception;
        }
        
        
        public void run() {
            try{
                //put in job here
                CertUtil.init();
                
                String file = CoGProperties.getDefault().getUserKeyFile();
               
                
                OpenSSLKey key = null;
                String pwd1, pwd2 = null;
                
                try {
                    key = new BouncyCastleOpenSSLKey(file);
                    
                    if (key.isEncrypted()) {
                       
                          
                            key.decrypt(gridpassphrase);
                       
                    }
                                                   
                    key.encrypt(new_gridpassphrase);
                    
                    File newFile = new File(file + ".new");
                    File oldFile = new File(file + ".old");
                    File crFile  = new File(file);
                    
                    copy(crFile, oldFile);
                    
                    key.writeTo(newFile.getAbsolutePath());
                    
                    if (!crFile.delete()) {
                        System.err.println("Error: failed to remove " + file + " file.");
                        throw new Exception("Unable to change password. Could not replace "+file+".");
                    }
                    
                    if (newFile.renameTo(crFile)) {
                        System.out.println("Pass phrase successfully changed.");
                    } else {
                        System.err.println("Error: failed to rename the files.");
                        throw new Exception("Unable to rename new userkey to original userkey file.\nThe old userkey file has been renamed to "+oldFile+", and the new userkey with the new passphrase is "+newFile);
                  
                    }
                    
                
                } catch(Exception e) {
                    System.err.println("Unable to load the private key : " + e.getMessage());
                    throw new Exception("Unable to load the private key : " + e.getMessage()+"\nIs your Grid PassPhrase correct?");
                  
                }
                done= true;
                //end of job section section
            }
            catch(NoClassDefFoundError b){
                b.printStackTrace();
                done= true;
                
                exception =  b;
            }
            catch(Throwable e){
                System.out.println(e);
                done= true;
                exception =  e;
                
            }
        }
    }
    
     private static void copy(File srcFile, File dstFile) 
	throws IOException {
	
	InputStream in   = null;
	OutputStream out = null;
	byte [] buffer   = new byte[1024];
	int bytes        = 0;
	
	try {
	    in  = new FileInputStream(srcFile);
	    out = new FileOutputStream(dstFile);
	    
	    Util.setFilePermissions(dstFile.getAbsolutePath(), 600);
	    
	    while( (bytes = in.read(buffer)) != -1) {
		out.write(buffer, 0, bytes);
		out.flush();
	    }
	    
	} finally {
	    try {
		if (in != null) in.close();
		if (out != null) out.close();
	    } catch(Exception e) {}
	}
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Add your handling code here:
        // dispose();
        //dispose();
        //  jTextField1
        //    jPasswordField1.setText("");
        //     jPasswordField2.setText("");
        
        reenter_gridpassphrase ="";
        new_gridpassphrase = "";
        gridpassphrase  = "";
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        dispose();
        //dispose();
    }//GEN-LAST:event_closeDialog
    
    /**
     * @param args the command line arguments
     */
   /* public static void main(String args[]) {
        new MyProxy(new javax.swing.JFrame(), true).show();
    }*/
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JPasswordField jPasswordField2;
    private javax.swing.JPasswordField jPasswordField3;
    // End of variables declaration//GEN-END:variables
    
}
