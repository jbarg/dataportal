Only in SRB-3.3.1-SDSC/: admin
Only in SRB-3.3.1-SDSC/: bin
Only in SRB-3.3.1-SDSC/: config.guess
Only in SRB-3.3.1-SDSC/: config.rescue
Only in SRB-3.3.1-SDSC/: config.sub
Only in SRB-3.3.1-SDSC/: configure
Only in SRB-3.3.1-SDSC/: configure.in
Only in SRB-3.3.1-SDSC/: configure.readme.srbteam
Only in SRB-3.3.1-SDSC/: COPYRIGHT
Only in SRB-3.3.1-SDSC/: CVS
Only in SRB-3.3.1-SDSC/: data
Only in SRB-3.3.1-SDSC/: errMsg
Only in SRB-3.3.1-SDSC/: installServer.pl
Only in SRB-3.3.1-SDSC/: install.sh
Only in SRB-3.3.1-SDSC/: jargon
Only in SRB-3.3.1-SDSC/: java
Only in SRB-3.3.1-SDSC/: Makefile.in
Only in SRB-3.3.1-SDSC/: matrix
Only in SRB-3.3.1-SDSC/: MCAT
Only in SRB-3.3.1-SDSC/: mk
Only in SRB-3.3.1-SDSC/: mySRB
Only in SRB-3.3.1-SDSC/: NT
Only in SRB-3.3.1-SDSC/: preload
Only in SRB-3.3.1-SDSC/: .project
Only in SRB-3.3.1-SDSC/: proxy
Only in SRB-3.3.1-SDSC/: python
Only in SRB-3.3.1-SDSC/: readme.dir
Only in SRB-3.3.1-SDSC/src: auth.txt
Only in SRB-3.3.1-SDSC/src/back: adsFileDvr.c
Only in SRB-3.3.1-SDSC/src/back: antelopeOrbDvr.c
Only in SRB-3.3.1-SDSC/src/back: compoundObj.c
Only in SRB-3.3.1-SDSC/src/back: CVS
Only in SRB-3.3.1-SDSC/src/back: datascopeDvr.c
Only in SRB-3.3.1-SDSC/src/back: db2DvrLib.c
Only in SRB-3.3.1-SDSC/src/back: db2TableDvr.c
Only in SRB-3.3.1-SDSC/src/back: dbLobj.c
Only in SRB-3.3.1-SDSC/src/back: dbTable.c
Only in SRB-3.3.1-SDSC/src/back: distrib.c
Only in SRB-3.3.1-SDSC/src/back: dpssFileDvr.c
Only in SRB-3.3.1-SDSC/src/back: exfFunct.c
Only in SRB-3.3.1-SDSC/src/back: exfSw.c
Only in SRB-3.3.1-SDSC/src/back: ftpFileDvr.c
Only in SRB-3.3.1-SDSC/src/back: functionHandler.c
Only in SRB-3.3.1-SDSC/src/back: gridftpDvr.c
Only in SRB-3.3.1-SDSC/src/back: hpssFileDvr.c
Only in SRB-3.3.1-SDSC/src/back: hpssParaOpr.c
Only in SRB-3.3.1-SDSC/src/back: ifmxDvrLib.c
Only in SRB-3.3.1-SDSC/src/back: ifmxTableDvr.c
Only in SRB-3.3.1-SDSC/src/back: illusTableDvr.c
Only in SRB-3.3.1-SDSC/src/back: illustraDB.c
Only in SRB-3.3.1-SDSC/src/back: MDriver.c
Only in SRB-3.3.1-SDSC/src/back: mysDvrLib.c
Only in SRB-3.3.1-SDSC/src/back: mysTableDvr.c
Only in SRB-3.3.1-SDSC/src/back: ntFileDvr.c
diff -ru SRB-3.3.1-SDSC/src/back/objBulkFunct.c srb-patches/SQL canned query update/src/back/objBulkFunct.c
--- SRB-3.3.1-SDSC/src/back/objBulkFunct.c	2005-06-29 13:31:28.000000000 +0100
+++ srb-patches/SQL canned query update/src/back/objBulkFunct.c	2005-07-23 00:05:21.000000000 +0100
@@ -6,6 +6,9 @@
 Please read these files before using,modifying or distributing SRB software.
 **************************************************************************/
 
+/* For bulk load timing if defined 
+#define BL_TIMING 1
+*/
 
 /* objBulkFunct.c - Routines to handle Bulk operation type SID.
  */
@@ -136,6 +139,10 @@
     struct resCache *myResCache;
     
     int numFilesDone = 0;
+#ifdef BL_TIMING
+    time_t blStartTm = time (0);
+    time_t regStartTm;
+#endif
 
 
     /* do it locally */
@@ -343,6 +350,13 @@
 	if (retVal < 0)
 	    break;
     }
+
+#ifdef BL_TIMING
+    regStartTm = time (0);
+    elog (NOTICE, "BL_TIMING: %d sec to unfold %d files in %s",
+      regStartTm - blStartTm, numFilesDone, infoOutHead->objID);
+#endif
+
 #ifdef DEBUG_BLOAD
     printf (" pid = %d, %s\n", getpid (), infoOutHead->dataPath);
     fflush (stdout);
@@ -429,6 +443,11 @@
     if (compPath != NULL)
         free (compPath);
 	
+#ifdef BL_TIMING
+    elog (NOTICE, "BL_TIMING: %d sec to Registger %d files in %s",
+      time (0) - regStartTm, numFilesDone, infoOutHead->objID);
+#endif
+
     return retVal;
 }
 
@@ -2434,11 +2453,14 @@
 	sprintf (qval[DOMAIN_DESC], " = '%s'", ClientUser->domainName);
     }
 	
+
     if (flag & BL_COPY_FLAG) {
+        selval[DATA_ID] = QUERY_BULK_UNLOAD_FOR_MOVE_1;
         selval[DATA_TYP_NAME] = 1;
         selval[REPL_TIMESTAMP] = 1;
         selval[DATA_CREATE_TIMESTAMP] = 1;
     } else {
+	selval[DATA_ID] = QUERY_BULK_UNLOAD_FOR_MOVE_2;
         if (srcResource != NULL && strlen (srcResource) > 0) {
 	    status = setMultiRescQuery (qval[PHY_RSRC_NAME], srcResource);
 	    if (status < 0) {
@@ -2450,14 +2472,20 @@
         } else {
 	    if (targResource != NULL && strlen (targResource) > 0) { 
 	        sprintf (qval[PHY_RSRC_NAME], " not in ('%s')", targResource);
+	    } else {
+                sprintf (qval[PHY_RSRC_NAME], " not in (' ')");
 	    }
 	}
     }
 
     sprintf(qval[CONTAINER_NAME]," is NULL || ='' ");
+#ifdef foo
+    /* not needed for QUERY_BULK_UNLOAD_FOR_MOVE */ 
     sprintf(qval[DATA_GRP_NAME],
       " like '%s' ESCAPE '\\' || like '%s/%%' ESCAPE '\\'",
       collection, collection);
+#endif
+    sprintf(qval[DATA_GRP_NAME],"%s", collection);
 
     selval[DATA_NAME] = 1;
     selval[DATA_GRP_NAME] = 1;
@@ -4260,7 +4288,7 @@
 {
     srb_long_t retVal = 0;
     int srcExfInx;
-    int toread, space;
+    srb_long_t toread;
     srb_long_t bytesCopied;
     char *bufptr;
     int readLen, nbytes;
@@ -4595,13 +4623,18 @@
     memset (qval, 0, sizeof (qval));
     memset (selval, 0, sizeof (selval));
 
+    selval[DATA_ID] = QUERY_SVR_CONTAINER_BY_COLL;
+
     selval[CONTAINER_NAME] = 1;
     selval[REPL_TIMESTAMP] = 1;
     selval[DATA_CREATE_TIMESTAMP] = 1;
-
+/*  Not needed with QUERY_SVR_CONTAINER_BY_COLL
     sprintf (qval[DATA_GRP_NAME],
      " like '%s' ESCAPE '\\' || like '%s/%%' ESCAPE '\\'",
             collection, collection);
+*/
+    sprintf (qval[DATA_GRP_NAME],"%s", collection);
+
 
     status = queryDataInfo (collection, selval, (char (*) [MAX_TOKEN]) qval, 
       myresult, BULK_MOVE_NUM_ROWS);
@@ -4844,19 +4877,23 @@
     memset (qval, 0, sizeof (qval));
     memset (selval, 0, sizeof (selval));
 
+    selval[DATA_ID] = QUERY_INCONTAINER_LIST_BY_COLL;
     selval[DATA_NAME] = 1;
     selval[DATA_GRP_NAME] = 1;
     selval[DATA_TYP_NAME] = 1;
     selval[SIZE] = 1;
     selval[OFFSET] = 1;
     selval[DATA_CHECKSUM] = 1;
+#ifdef foo	/* XXXXX not needed for QUERY_INCONTAINER_LIST_BY_COLL */
     sprintf(qval[DATA_ID] ," <> %s%s",
      MDASSCHEMENAME,"MDAS_AD_REPL.container_id");
     sprintf (qval[CONTAINER_NAME], " = '%s'", container);
-
     sprintf (qval[DATA_GRP_NAME],
      " like '%s' ESCAPE '\\' || like '%s/%%' ESCAPE '\\'",
             collection, collection);
+#endif
+    sprintf (qval[CONTAINER_NAME], "%s", container);
+    sprintf (qval[DATA_GRP_NAME],"%s", collection);
 
     status = queryDataInfo (collection, selval, (char (*) [MAX_TOKEN]) qval,
       myresult, BULK_MOVE_NUM_ROWS);
Only in SRB-3.3.1-SDSC/src/back: objContainerFunct.c
Only in SRB-3.3.1-SDSC/src/back: objMcatAdminFunct.c
Only in SRB-3.3.1-SDSC/src/back: objMcatOprFunct.c
Only in SRB-3.3.1-SDSC/src/back: objMiscIoFunct.c
Only in SRB-3.3.1-SDSC/src/back: objParaIoFunct.c
Only in SRB-3.3.1-SDSC/src/back: objSeqIoFunct.c
Only in SRB-3.3.1-SDSC/src/back: oraDvrLib.c
Only in SRB-3.3.1-SDSC/src/back: oraTableDvr.c
Only in SRB-3.3.1-SDSC/src/back: orbUtil.c
Only in SRB-3.3.1-SDSC/src/back: psgDvrLib.c
Only in SRB-3.3.1-SDSC/src/back: psgTableDvr.c
Only in SRB-3.3.1-SDSC/src/back: srbC_db2_library.c
Only in SRB-3.3.1-SDSC/src/back: srbC_httpc_library.c
Only in SRB-3.3.1-SDSC/src/back: srbC_ora_library.c
Only in SRB-3.3.1-SDSC/src/back: srbProxyFunct.c
Only in SRB-3.3.1-SDSC/src/back: srbServer.c
Only in SRB-3.3.1-SDSC/src/back: srbServerMisc.c
Only in SRB-3.3.1-SDSC/src/back: srbServerSfo.c
Only in SRB-3.3.1-SDSC/src/back: sybDvrLib.c
Only in SRB-3.3.1-SDSC/src/back: sybTableDvr.c
Only in SRB-3.3.1-SDSC/src/back: unixFileDvr.c
Only in SRB-3.3.1-SDSC/src/back: utFileDvr.c
Only in SRB-3.3.1-SDSC/src/catalog: CVS
Only in SRB-3.3.1-SDSC/src/catalog/include: CVS
Only in SRB-3.3.1-SDSC/src/catalog/include: DB2HELP
Only in SRB-3.3.1-SDSC/src/catalog/include: mcatAttributes.h
diff -ru SRB-3.3.1-SDSC/src/catalog/include/mdasC_db2_externs.h srb-patches/SQL canned query update/src/catalog/include/mdasC_db2_externs.h
--- SRB-3.3.1-SDSC/src/catalog/include/mdasC_db2_externs.h	2005-06-29 13:31:28.000000000 +0100
+++ srb-patches/SQL canned query update/src/catalog/include/mdasC_db2_externs.h	2005-07-23 00:07:17.000000000 +0100
@@ -129,6 +129,13 @@
 #define ERRMESSFILE LOGMESSFILE
 #define TRANSCOMMIT 0
 
+#define QUERY_CONTAINER_BY_COLL                   -1001
+#define QUERY_INCONTAINER_LIST_BY_COLL            -1002
+#define QUERY_LIST_NON_CONTAINER_IN_COLL          -1003
+#define QUERY_BULK_UNLOAD_FOR_MOVE_1              -1004
+#define QUERY_BULK_UNLOAD_FOR_MOVE_2              -1005
+#define QUERY_SVR_CONTAINER_BY_COLL               -1006
+
 
 /* DCS-ATTRIBUTE-INDEX DEFINES  */
 #define  DATA_ID                    0   /* internal data id */
Only in SRB-3.3.1-SDSC/src/catalog/include: mdasC_db2.h
Only in SRB-3.3.1-SDSC/src/catalog/include: mdasC_ifmx_externs.h
Only in SRB-3.3.1-SDSC/src/catalog/include: mdasC_mys_externs.h
Only in SRB-3.3.1-SDSC/src/catalog/include: mdasC_ora_externs.h
Only in SRB-3.3.1-SDSC/src/catalog/include: mdasC_syb_externs.h
Only in SRB-3.3.1-SDSC/src/catalog/include: mdasGlobalsExtern.h
Only in SRB-3.3.1-SDSC/src/catalog/include: mdasGlobals.h
Only in SRB-3.3.1-SDSC/src/catalog/include: mdasPrototypes.h
Only in SRB-3.3.1-SDSC/src/catalog/include: ociapr.h
Only in SRB-3.3.1-SDSC/src/catalog/include: ocidfn.h
Only in SRB-3.3.1-SDSC/src/catalog/include: ocikpr.h
Only in SRB-3.3.1-SDSC/src/catalog/include: oratypes.h
Only in SRB-3.3.1-SDSC/src/catalog/include: psqtypes.h
Only in SRB-3.3.1-SDSC/src/catalog/include: srbC_db2_externs.h
Only in SRB-3.3.1-SDSC/src/catalog/include: srbC_httpc_extern.h
Only in SRB-3.3.1-SDSC/src/catalog/include: srbC_mdas_externs.h
Only in SRB-3.3.1-SDSC/src/catalog/include: table_names_to_sql_externs.h
Only in SRB-3.3.1-SDSC/src/catalog: mdas
Only in SRB-3.3.1-SDSC/src/catalog/mdas-srb: compund_segment_object_design.txt
Only in SRB-3.3.1-SDSC/src/catalog/mdas-srb: CVS
diff -ru SRB-3.3.1-SDSC/src/catalog/mdas-srb/srbC_mdas_library2.c srb-patches/SQL canned query update/src/catalog/mdas-srb/srbC_mdas_library2.c
--- SRB-3.3.1-SDSC/src/catalog/mdas-srb/srbC_mdas_library2.c	2005-06-29 13:31:28.000000000 +0100
+++ srb-patches/SQL canned query update/src/catalog/mdas-srb/srbC_mdas_library2.c	2005-07-23 00:12:57.000000000 +0100
@@ -1363,6 +1363,18 @@
     logmess_db2("get_data_dir_info: Before Calling set_info_srb_call");
 #endif /* LOGTIMINGMCAT */
 	reset_flag_for_distinct(qval,selval);
+
+        /****  ADDED FOR OPTIMIZATION May 31, 2005 ****/
+        if (selval[DATA_ID] < -1000) {
+          specialQueryString = spsqlq;
+          i = getOptimizedQuery(selval[DATA_ID], qval,specialQueryString);
+          selval[DATA_ID] =  0;
+          if (i == 0)
+            specialQueryFlag = 1;
+        }
+        /****  ADDED FOR OPTIMIZATION May 31, 2005 ****/
+
+
         i = set_info_srb_call(info1, result1, qval,selval, 
 			      tname, aname, numrows);
         if (i != 0) {
@@ -1377,6 +1389,13 @@
         mdasC_inquire(&serverhndl[0], (mdasC_infoh*) info1 ,
                (mdasC_infoh*)  result1,  status, numrows);
 
+        /****  ADDED FOR OPTIMIZATION May 31, 2005 ****/
+        if (specialQueryFlag == 1) {
+          specialQueryFlag = 0;
+          specialQueryString = NULL;
+        }
+        /****  ADDED FOR OPTIMIZATION May 31, 2005 ****/
+
         if (status[2] != MDAS_SUCCESS)
           { 
 
Only in SRB-3.3.1-SDSC/src/catalog/mdas-srb: srbC_mdas_library3.c
Only in SRB-3.3.1-SDSC/src/catalog/mdas-srb: srbC_mdas_library6.c
Only in SRB-3.3.1-SDSC/src/catalog/mdas-srb: srbC_mdas_library7.c
Only in SRB-3.3.1-SDSC/src/catalog/mdas-srb: srbC_mdas_library7masdummy.c
Only in SRB-3.3.1-SDSC/src/catalog/mdas-srb: srbC_mdas_library8.c
diff -ru SRB-3.3.1-SDSC/src/catalog/mdas-srb/srbC_mdas_library9.c srb-patches/SQL canned query update/src/catalog/mdas-srb/srbC_mdas_library9.c
--- SRB-3.3.1-SDSC/src/catalog/mdas-srb/srbC_mdas_library9.c	2005-06-29 13:31:28.000000000 +0100
+++ srb-patches/SQL canned query update/src/catalog/mdas-srb/srbC_mdas_library9.c	2005-07-23 00:13:08.000000000 +0100
@@ -346,3 +346,344 @@
    }
 }
 
+
+
+
+int
+getOptimizedQuery(int OpFlag, char qval[][MAX_TOKEN], char* qstr)
+{
+/* These routines are used to optimized to speed up queries in   MCAT DB */
+/* Q1:queryContainerByColl
+SELECT DISTINCT t1.container_name   
+FROM   srb.MDAS_TD_CONTAINER t1  , srb.MDAS_TD_DATA_GRP t2 , srb.MDAS_AD_REPL t3 , srb.MDAS_ADC_REPL t4 
+WHERE   ( t2.data_grp_name  = '/home/sekar.sdsc/mytest'   OR 
+          t2.data_grp_name  like '/home/sekar.sdsc/mytest/%' ESCAPE '\' )   AND  
+  t3.data_grp_id = t2.data_grp_id  AND  
+  t4.data_id = t1.container_id(+)  AND  
+  t3.container_id = t4.data_id AND 
+  ( t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and 
+   t3.version_num = t4.version_num));
+---
+Q1 SOLVED:
+SELECT DISTINCT t1.container_name   
+FROM   %sMDAS_TD_CONTAINER t1  , %sMDAS_ADC_REPL t4  , %sMDAS_AD_REPL t3, %sMDAS_TD_DATA_GRP t2 
+WHERE   t2.data_grp_name  = '/home/sekar.sdsc/mytest'    AND  
+  t3.data_grp_id = t2.data_grp_id  AND  
+  t4.container_td_id = t1.container_id  AND 
+  t3.container_id = t4.data_id AND 
+  ( t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and 
+   t3.version_num = t4.version_num))
+UNION 
+SELECT DISTINCT t1.container_name   
+FROM   %sMDAS_TD_CONTAINER t1  , %sMDAS_ADC_REPL t4  , %sMDAS_AD_REPL t3, %sMDAS_TD_DATA_GRP t2 
+WHERE    t2.data_grp_name  like '/home/sekar.sdsc/mytest/%' ESCAPE '\'    AND  
+  t3.data_grp_id = t2.data_grp_id  AND  
+  t4.container_td_id = t1.container_id  AND 
+  t3.container_id = t4.data_id AND 
+  ( t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and 
+   t3.version_num = t4.version_num));
+----------
+Q2:clGenIncontListInColl
+
+SELECT DISTINCT t3.data_name  , t5.data_typ_name  , t2.data_grp_name  , 
+  t3.data_size  , t3.offset  , t3.dchecksum   
+FROM   srb.MDAS_AD_REPL t3 , srb.MDAS_TD_DATA_TYP t5 , srb.MDAS_TD_DATA_GRP t2 , srb.MDAS_TD_CONTAINER t1 , srb.MDAS_ADC_REPL t4  
+WHERE  t3.data_id  <> t3.container_id AND  
+   ( t2.data_grp_name  like '/home/sekar.sdsc/mytest' ESCAPE '\'  OR 
+     t2.data_grp_name  like '/home/sekar.sdsc/mytest/%' ESCAPE '\' )  AND 
+ t1.container_name  = '/container/sekar.sdsc/vorbTestCont'  AND  
+ t3.data_typ_id = t5.data_typ_id  AND  
+ t3.data_grp_id = t2.data_grp_id  AND  
+ t4.data_id = t1.container_id(+)  AND  
+ t3.container_id = t4.data_id AND 
+ ( t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and t3.version_num = t4.version_num)) 
+ORDER BY t3.offset;
+--
+Q2 SOLVED:
+
+SELECT t3.data_name  , t5.data_typ_name  , t2.data_grp_name  , 
+  t3.data_size  , t3.offset  , t3.dchecksum   
+FROM   %sMDAS_AD_REPL t3 , %sMDAS_TD_DATA_TYP t5 , %sMDAS_TD_DATA_GRP t2 , %sMDAS_TD_CONTAINER t1 , %sMDAS_ADC_REPL t4  
+WHERE  t3.data_id  <> t3.container_id AND  
+    t2.data_grp_name = '/home/sekar.sdsc/mytest'  AND 
+ t1.container_name  = '/container/sekar.sdsc/vorbTestCont'  AND  
+ t3.data_typ_id = t5.data_typ_id  AND  
+ t3.data_grp_id = t2.data_grp_id  AND  
+ t4.container_td_id = t1.container_id  AND 
+ t3.container_id = t4.data_id AND 
+ ( t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and t3.version_num = t4.version_num)) 
+UNION
+SELECT t3.data_name  , t5.data_typ_name  , t2.data_grp_name  , 
+  t3.data_size  , t3.offset  , t3.dchecksum   
+FROM   %sMDAS_AD_REPL t3 , %sMDAS_TD_DATA_TYP t5 , %sMDAS_TD_DATA_GRP t2 , %sMDAS_TD_CONTAINER t1 , %sMDAS_ADC_REPL t4  
+WHERE  t3.data_id  <> t3.container_id AND  
+     t2.data_grp_name  like '/home/sekar.sdsc/mytest/%' ESCAPE '\'  AND 
+ t1.container_name  = '/container/sekar.sdsc/vorbTestCont'  AND  
+ t3.data_typ_id = t5.data_typ_id  AND  
+ t3.data_grp_id = t2.data_grp_id  AND  
+ t4.container_td_id = t1.container_id  AND 
+ t3.container_id = t4.data_id AND 
+ ( t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and t3.version_num = t4.version_num)) 
+ORDER BY 5;
+
+----------
+Q3:listNoncontIncoll
+SELECT DISTINCT t3.data_name  , t2.data_grp_name  , t3.data_size   
+FROM   srb.MDAS_AD_REPL t3 , srb.MDAS_TD_DATA_GRP t2 , srb.MDAS_TD_CONTAINER t1 , srb.MDAS_ADC_REPL t4  
+WHERE   ( t2.data_grp_name  like '/home/sekar.sdsc/mytest' ESCAPE '\'  OR 
+    t2.data_grp_name  like '/home/sekar.sdsc/mytest/%' ESCAPE '\' )  AND 
+ t1.container_name  not like  '/%' ESCAPE '\'  AND 
+ t3.data_grp_id = t2.data_grp_id  AND 
+ t4.data_id = t1.container_id(+)  AND 
+ t3.container_id = t4.data_id AND
+ ( t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and t3.version_num = t4.version_num))  
+ORDER BY t3.data_name;
+--
+Q3 SOLVED:
+SELECT DISTINCT t3.data_name  , t2.data_grp_name  , t3.data_size   
+FROM   %sMDAS_AD_REPL t3 , %sMDAS_TD_DATA_GRP t2 , %sMDAS_TD_CONTAINER t1 , %sMDAS_ADC_REPL t4  
+WHERE   t2.data_grp_name = '/home/sekar.sdsc/mytest'  AND 
+ (t1.container_name  is NULL OR  t1.container_name  = '')   AND 
+ t3.data_grp_id = t2.data_grp_id  AND 
+ t4.container_td_id = t1.container_id  AND 
+ t3.container_id = t4.data_id AND
+ ( t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and t3.version_num = t4.version_num))  
+UNION
+SELECT DISTINCT t3.data_name  , t2.data_grp_name  , t3.data_size   
+FROM   %sMDAS_AD_REPL t3 , %sMDAS_TD_DATA_GRP t2 , %sMDAS_TD_CONTAINER t1 , %sMDAS_ADC_REPL t4  
+WHERE   t2.data_grp_name  like '/home/sekar.sdsc/mytest/%' ESCAPE '\'   AND 
+ (t1.container_name  is NULL OR  t1.container_name  = '')   AND 
+ t3.data_grp_id = t2.data_grp_id  AND 
+ t4.container_td_id = t1.container_id  AND 
+ t3.container_id = t4.data_id AND
+ ( t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and t3.version_num = t4.version_num))  
+ORDER BY 1;
+----------
+Q4:queryBulkUnloadForMove_1
+SELECT DISTINCT t4.repl_enum  , t3.data_name  , t5.data_typ_name  , t4.path_name  , 
+ t6.netprefix  , t3.modify_timestamp  , t2.data_grp_name  , t3.data_size  , 
+ t7.phy_rsrc_name  , t8.rsrc_typ_name  , t9.rsrc_class_name  , 
+ t3.repl_timestamp  , t3.version_num  , t3.dchecksum   
+FROM   srb.MDAS_ADC_REPL t4 , srb.MDAS_AD_REPL t3 , srb.MDAS_TD_DATA_TYP t5 , srb.MDAS_TD_LOCN t6 , srb.MDAS_AR_PHYSICAL t7 , srb.MDAS_TD_DATA_GRP t2 , 
+ srb.MDAS_TD_RSRC_2TYP t8 , srb.MDAS_TD_RSRC_CLASS t9 , srb.MDAS_TD_CONTAINER t1 
+WHERE   ( t2.data_grp_name  like '/home/sekar.sdsc/mytest' ESCAPE '\'  OR 
+   t2.data_grp_name  like '/home/sekar.sdsc/mytest/%' ESCAPE '\' )  AND  
+ ( t1.container_name  is NULL  OR t1.container_name  =''  )   AND  
+ t3.data_typ_id = t5.data_typ_id  AND  
+ t4.rsrc_id = t7.phy_rsrc_id  AND  
+ t3.data_grp_id = t2.data_grp_id  AND  
+ t7.rsrc_class_id = t9.rsrc_class_id  AND  
+ t7.locn_id = t6.locn_id  AND  
+ t7.rsrc_typ_id = t8.rsrc_typ_id  AND  
+ t4.data_id = t1.container_id(+)  AND  
+ t3.container_id = t4.data_id AND 
+ ( t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and t3.version_num = t4.version_num));
+--
+Q4 SOLVED:
+SELECT DISTINCT t4.repl_enum  , t3.data_name  , t5.data_typ_name  , t4.path_name  , 
+ t6.netprefix  , t3.modify_timestamp  , t2.data_grp_name  , t3.data_size  , 
+ t7.phy_rsrc_name  , t8.rsrc_typ_name  , t9.rsrc_class_name  , 
+ t3.repl_timestamp  , t3.version_num  , t3.dchecksum   
+FROM   %sMDAS_ADC_REPL t4 , %sMDAS_AD_REPL t3 , %sMDAS_TD_DATA_TYP t5 , %sMDAS_TD_LOCN t6 , %sMDAS_AR_PHYSICAL t7 , %sMDAS_TD_DATA_GRP t2 , 
+ %sMDAS_TD_RSRC_2TYP t8 , %sMDAS_TD_RSRC_CLASS t9 , %sMDAS_TD_CONTAINER t1 
+WHERE   t2.data_grp_name  =  '/home/sekar.sdsc/mytest'  AND  
+ ( t1.container_name  is NULL  OR t1.container_name  =''  )   AND  
+ t3.data_typ_id = t5.data_typ_id  AND  
+ t4.rsrc_id = t7.phy_rsrc_id  AND  
+ t3.data_grp_id = t2.data_grp_id  AND  
+ t7.rsrc_class_id = t9.rsrc_class_id  AND  
+ t7.locn_id = t6.locn_id  AND  
+ t7.rsrc_typ_id = t8.rsrc_typ_id  AND  
+ t4.container_td_id = t1.container_id  AND 
+ t3.container_id = t4.data_id AND 
+ ( t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and t3.version_num = t4.version_num))
+UNION
+SELECT DISTINCT t4.repl_enum  , t3.data_name  , t5.data_typ_name  , t4.path_name  , 
+ t6.netprefix  , t3.modify_timestamp  , t2.data_grp_name  , t3.data_size  , 
+ t7.phy_rsrc_name  , t8.rsrc_typ_name  , t9.rsrc_class_name  , 
+ t3.repl_timestamp  , t3.version_num  , t3.dchecksum   
+FROM   %sMDAS_ADC_REPL t4 , %sMDAS_AD_REPL t3 , %sMDAS_TD_DATA_TYP t5 , %sMDAS_TD_LOCN t6 , %sMDAS_AR_PHYSICAL t7 , %sMDAS_TD_DATA_GRP t2 , 
+ %sMDAS_TD_RSRC_2TYP t8 , %sMDAS_TD_RSRC_CLASS t9 , %sMDAS_TD_CONTAINER t1 
+WHERE  t2.data_grp_name  like '/home/sekar.sdsc/mytest/%' ESCAPE '\'   AND  
+ ( t1.container_name  is NULL  OR t1.container_name  =''  )   AND  
+ t3.data_typ_id = t5.data_typ_id  AND  
+ t4.rsrc_id = t7.phy_rsrc_id  AND  
+ t3.data_grp_id = t2.data_grp_id  AND  
+ t7.rsrc_class_id = t9.rsrc_class_id  AND  
+ t7.locn_id = t6.locn_id  AND  
+ t7.rsrc_typ_id = t8.rsrc_typ_id  AND  
+ t4.container_td_id = t1.container_id  AND 
+ t3.container_id = t4.data_id AND 
+ ( t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and t3.version_num = t4.version_num));
+
+----------
+Q5:queryBulkUnloadForMove_2
+SELECT DISTINCT t4.repl_enum  , t3.data_name  , t4.path_name  , t6.netprefix  , 
+t2.data_grp_name  , t3.data_size  , t7.phy_rsrc_name  , t8.rsrc_typ_name  , 
+t9.rsrc_class_name  , t3.version_num  , t3.dchecksum   
+FROM   srb.MDAS_ADC_REPL t4 , srb.MDAS_AD_REPL t3 , srb.MDAS_TD_LOCN t6 , srb.MDAS_AR_PHYSICAL t7 , srb.MDAS_TD_DATA_GRP t2 , srb.MDAS_TD_RSRC_2TYP t8 , 
+srb.MDAS_TD_RSRC_CLASS t9 , srb.MDAS_TD_CONTAINER t1  
+WHERE   ( t2.data_grp_name  like '/home/sekar.sdsc/mytest' ESCAPE '\'  OR 
+    t2.data_grp_name  like '/home/sekar.sdsc/mytest/%' ESCAPE '\' )  AND 
+ t7.phy_rsrc_name  not in ('orion-sekar-ufs') AND  
+ ( t1.container_name  is NULL  OR t1.container_name  =''  )   AND  
+ t4.rsrc_id = t7.phy_rsrc_id  AND  
+ t3.data_grp_id = t2.data_grp_id  AND 
+ t7.rsrc_class_id = t9.rsrc_class_id  AND 
+ t7.locn_id = t6.locn_id  AND 
+ t7.rsrc_typ_id = t8.rsrc_typ_id  AND 
+ t4.data_id = t1.container_id(+)  AND 
+ t3.container_id = t4.data_id AND
+ ( t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and t3.version_num = t4.version_num))  
+ORDER BY t3.data_name;
+--
+Q5 SOLVED:
+SELECT t4.repl_enum  , t3.data_name  , t4.path_name  , t6.netprefix  , 
+t2.data_grp_name  , t3.data_size  , t7.phy_rsrc_name  , t8.rsrc_typ_name  , 
+t9.rsrc_class_name  , t3.version_num  , t3.dchecksum   
+FROM   %sMDAS_ADC_REPL t4 , %sMDAS_AD_REPL t3 , %sMDAS_TD_LOCN t6 , %sMDAS_AR_PHYSICAL t7 , %sMDAS_TD_DATA_GRP t2 , %sMDAS_TD_RSRC_2TYP t8 , 
+%sMDAS_TD_RSRC_CLASS t9 , %sMDAS_TD_CONTAINER t1  
+WHERE  t2.data_grp_name = '/home/sekar.sdsc/mytest'   AND 
+ t7.phy_rsrc_name  not in ('orion-sekar-ufs') AND  
+ ( t1.container_name  is NULL  OR t1.container_name  =''  )   AND  
+ t4.rsrc_id = t7.phy_rsrc_id  AND  
+ t3.data_grp_id = t2.data_grp_id  AND 
+ t7.rsrc_class_id = t9.rsrc_class_id  AND 
+ t7.locn_id = t6.locn_id  AND 
+ t7.rsrc_typ_id = t8.rsrc_typ_id  AND 
+ t4.container_td_id = t1.container_id  AND 
+ t3.container_id = t4.data_id AND
+ ( t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and t3.version_num = t4.version_num))  
+UNION
+SELECT DISTINCT t4.repl_enum  , t3.data_name  , t4.path_name  , t6.netprefix  , 
+t2.data_grp_name  , t3.data_size  , t7.phy_rsrc_name  , t8.rsrc_typ_name  , 
+t9.rsrc_class_name  , t3.version_num  , t3.dchecksum   
+FROM   %sMDAS_ADC_REPL t4 , %sMDAS_AD_REPL t3 , %sMDAS_TD_LOCN t6 , %sMDAS_AR_PHYSICAL t7 , %sMDAS_TD_DATA_GRP t2 , %sMDAS_TD_RSRC_2TYP t8 , 
+%sMDAS_TD_RSRC_CLASS t9 , %sMDAS_TD_CONTAINER t1  
+WHERE  t2.data_grp_name  like '/home/sekar.sdsc/mytest/%' ESCAPE '\'   AND 
+ t7.phy_rsrc_name  not in ('orion-sekar-ufs') AND  
+ ( t1.container_name  is NULL  OR t1.container_name  =''  )   AND  
+ t4.rsrc_id = t7.phy_rsrc_id  AND  
+ t3.data_grp_id = t2.data_grp_id  AND 
+ t7.rsrc_class_id = t9.rsrc_class_id  AND 
+ t7.locn_id = t6.locn_id  AND 
+ t7.rsrc_typ_id = t8.rsrc_typ_id  AND 
+ t4.container_td_id = t1.container_id  AND 
+ t3.container_id = t4.data_id AND
+ ( t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and t3.version_num = t4.version_num))  
+ORDER BY 2;
+----------
+Q6:svrQueryContainerByColl
+SELECT DISTINCT t3.modify_timestamp  , t1.container_name  , t3.repl_timestamp   
+FROM   srb.MDAS_AD_REPL t3 , srb.MDAS_TD_CONTAINER t1 , srb.MDAS_ADC_REPL t4 , srb.MDAS_TD_DATA_GRP t2  
+WHERE   ( t2.data_grp_name  like '/home/sekar.sdsc/mytest' ESCAPE '\'  OR 
+    t2.data_grp_name  like '/home/sekar.sdsc/mytest/%' ESCAPE '\' )   AND 
+ t3.data_grp_id = t2.data_grp_id  AND 
+ t4.data_id = t1.container_id(+)  AND 
+ t3.container_id = t4.data_id AND 
+ ( t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and t3.version_num = t4.version_num)) ;
+
+--
+Q6 SOLVED:
+SELECT t3.modify_timestamp  , t1.container_name  , t3.repl_timestamp   
+FROM   %sMDAS_AD_REPL t3 , %sMDAS_TD_CONTAINER t1 , %sMDAS_ADC_REPL t4 , %sMDAS_TD_DATA_GRP t2  
+WHERE   t2.data_grp_name  = '/home/sekar.sdsc/mytest'   AND 
+ t3.data_grp_id = t2.data_grp_id  AND 
+ t4.container_td_id = t1.container_id  AND 
+ t3.container_id = t4.data_id AND 
+ ( t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and t3.version_num = t4.version_num)) 
+UNION
+SELECT t3.modify_timestamp  , t1.container_name  , t3.repl_timestamp   
+FROM   %sMDAS_AD_REPL t3 , %sMDAS_TD_CONTAINER t1 , %sMDAS_ADC_REPL t4 , %sMDAS_TD_DATA_GRP t2  
+WHERE   t2.data_grp_name  like '/home/sekar.sdsc/mytest/%' ESCAPE '\'   AND 
+ t3.data_grp_id = t2.data_grp_id  AND 
+ t4.container_td_id = t1.container_id  AND 
+ t3.container_id = t4.data_id AND 
+ ( t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and t3.version_num = t4.version_num)) ;
+*/
+  int i;
+  switch (OpFlag)
+    {
+    case QUERY_CONTAINER_BY_COLL:
+      sprintf(qstr,"SELECT t1.container_name FROM %sMDAS_TD_CONTAINER t1, %sMDAS_ADC_REPL t4, %sMDAS_AD_REPL t3, %sMDAS_TD_DATA_GRP t2 WHERE   t2.data_grp_name  = '%s' AND t3.data_grp_id = t2.data_grp_id  AND t4.container_td_id = t1.container_id  AND t3.container_id = t4.data_id AND ( t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and t3.version_num = t4.version_num)) UNION SELECT  t1.container_name FROM %sMDAS_TD_CONTAINER t1, %sMDAS_ADC_REPL t4, %sMDAS_AD_REPL t3, %sMDAS_TD_DATA_GRP t2 WHERE t2.data_grp_name  like '%s/%%' ESCAPE '\\' AND t3.data_grp_id = t2.data_grp_id AND t4.container_td_id = t1.container_id  AND t3.container_id = t4.data_id AND  ( t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and t3.version_num = t4.version_num))",
+	      MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,
+	      qval[DATA_GRP_NAME],
+	      MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,
+	      qval[DATA_GRP_NAME]);
+      break;
+    case QUERY_INCONTAINER_LIST_BY_COLL:
+      sprintf(qstr,"SELECT t3.data_name, t5.data_typ_name, t2.data_grp_name, t3.data_size, t3.offset, t3.dchecksum FROM  %sMDAS_AD_REPL t3, %sMDAS_TD_DATA_TYP t5, %sMDAS_TD_DATA_GRP t2, %sMDAS_TD_CONTAINER t1, %sMDAS_ADC_REPL t4  WHERE t3.data_id <> t3.container_id AND t2.data_grp_name = '%s' AND t1.container_name = '%s' AND  t3.data_typ_id = t5.data_typ_id AND t3.data_grp_id = t2.data_grp_id AND t4.container_td_id = t1.container_id AND t3.container_id = t4.data_id AND ( t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and t3.version_num = t4.version_num)) UNION SELECT t3.data_name, t5.data_typ_name, t2.data_grp_name, t3.data_size, t3.offset, t3.dchecksum FROM  %sMDAS_AD_REPL t3, %sMDAS_TD_DATA_TYP t5, %sMDAS_TD_DATA_GRP t2, %sMDAS_TD_CONTAINER t1, %sMDAS_ADC_REPL t4  WHERE  t3.data_id  <> t3.container_id AND t2.data_grp_name  like '%s/%%' ESCAPE '\\'  AND t1.container_name  = '%s'  AND  t3.data_typ_id = t5.data_typ_id AND t3.data_grp_id = t2.data_grp_id AND t4.container_td_id = t1.container_id AND t3.container_id = t4.data_id AND ( t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and t3.version_num = t4.version_num))  ORDER BY 5",
+	      MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,
+	      qval[DATA_GRP_NAME],qval[CONTAINER_NAME],
+	      MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,
+	      qval[DATA_GRP_NAME],qval[CONTAINER_NAME]);
+      break;
+    case QUERY_LIST_NON_CONTAINER_IN_COLL:
+      sprintf(qstr,"SELECT t3.data_name, t2.data_grp_name, t3.data_size  FROM %sMDAS_AD_REPL t3, %sMDAS_TD_DATA_GRP t2, %sMDAS_TD_CONTAINER t1, %sMDAS_ADC_REPL t4  WHERE t2.data_grp_name = '%s' AND (t1.container_name is NULL OR t1.container_name  = '') AND t3.data_grp_id = t2.data_grp_id AND t4.container_td_id = t1.container_id AND t3.container_id = t4.data_id AND (t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and t3.version_num = t4.version_num))  UNION SELECT t3.data_name, t2.data_grp_name, t3.data_size FROM %sMDAS_AD_REPL t3, %sMDAS_TD_DATA_GRP t2, %sMDAS_TD_CONTAINER t1, %sMDAS_ADC_REPL t4 WHERE t2.data_grp_name like '%s/%%' ESCAPE '\\' AND (t1.container_name is NULL OR t1.container_name = '') AND t3.data_grp_id = t2.data_grp_id  AND  t4.container_td_id = t1.container_id  AND t3.container_id = t4.data_id AND (t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and t3.version_num = t4.version_num)) ORDER BY 1",
+	      MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,
+	      qval[DATA_GRP_NAME],
+	      MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,
+	      qval[DATA_GRP_NAME]);
+      break;
+    case QUERY_BULK_UNLOAD_FOR_MOVE_1:
+      if (strlen(qval[USER_NAME]) == 0 ) { /* privileged user */
+	sprintf(qstr,"SELECT t4.repl_enum, t3.data_name, t5.data_typ_name, t4.path_name, t6.netprefix, t3.modify_timestamp, t2.data_grp_name, t3.data_size, t7.phy_rsrc_name, t8.rsrc_typ_name, t9.rsrc_class_name, t3.repl_timestamp, t3.version_num, t3.dchecksum FROM %sMDAS_ADC_REPL t4, %sMDAS_AD_REPL t3, %sMDAS_TD_DATA_TYP t5, %sMDAS_TD_LOCN t6, %sMDAS_AR_PHYSICAL t7, %sMDAS_TD_DATA_GRP t2, %sMDAS_TD_RSRC_2TYP t8, %sMDAS_TD_RSRC_CLASS t9, %sMDAS_TD_CONTAINER t1 WHERE t2.data_grp_name = '%s' AND ( t1.container_name is NULL OR t1.container_name  ='') AND  t3.data_typ_id = t5.data_typ_id AND t4.rsrc_id = t7.phy_rsrc_id AND t3.data_grp_id = t2.data_grp_id AND t7.rsrc_class_id = t9.rsrc_class_id AND t7.locn_id = t6.locn_id  AND t7.rsrc_typ_id = t8.rsrc_typ_id  AND t4.container_td_id = t1.container_id AND t3.container_id = t4.data_id AND (t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and t3.version_num = t4.version_num)) UNION SELECT t4.repl_enum, t3.data_name, t5.data_typ_name, t4.path_name, t6.netprefix, t3.modify_timestamp, t2.data_grp_name, t3.data_size, t7.phy_rsrc_name, t8.rsrc_typ_name, t9.rsrc_class_name, t3.repl_timestamp, t3.version_num, t3.dchecksum FROM %sMDAS_ADC_REPL t4, %sMDAS_AD_REPL t3, %sMDAS_TD_DATA_TYP t5, %sMDAS_TD_LOCN t6, %sMDAS_AR_PHYSICAL t7, %sMDAS_TD_DATA_GRP t2, %sMDAS_TD_RSRC_2TYP t8, %sMDAS_TD_RSRC_CLASS t9, %sMDAS_TD_CONTAINER t1 WHERE t2.data_grp_name like '%s/%%' ESCAPE '\\' AND (t1.container_name is NULL OR t1.container_name  ='') AND  t3.data_typ_id = t5.data_typ_id AND t4.rsrc_id = t7.phy_rsrc_id AND t3.data_grp_id = t2.data_grp_id AND t7.rsrc_class_id = t9.rsrc_class_id AND t7.locn_id = t6.locn_id  AND t7.rsrc_typ_id = t8.rsrc_typ_id  AND t4.container_td_id = t1.container_id AND t3.container_id = t4.data_id AND (t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and t3.version_num = t4.version_num))",
+	      MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,
+	      MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,
+	      qval[DATA_GRP_NAME],
+	      MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,
+	      MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,
+	      qval[DATA_GRP_NAME]);
+
+      }
+      else { /* non-priveleged user */
+	sprintf(qstr,"SELECT t4.repl_enum, t3.data_name, t5.data_typ_name, t4.path_name, t6.netprefix, t3.modify_timestamp, t2.data_grp_name, t3.data_size, t7.phy_rsrc_name, t8.rsrc_typ_name, t9.rsrc_class_name, t3.repl_timestamp, t3.version_num, t3.dchecksum FROM %sMDAS_CD_USER t10, %sMDAS_AD_ACCS t11, %sMDAS_AU_GROUP t12, %sMDAS_TD_DOMN t13, %sMDAS_AU_DOMN t14, %sMDAS_TD_DS_ACCS t15, %sMDAS_ADC_REPL t4, %sMDAS_AD_REPL t3, %sMDAS_TD_DATA_TYP t5, %sMDAS_TD_LOCN t6, %sMDAS_AR_PHYSICAL t7, %sMDAS_TD_DATA_GRP t2, %sMDAS_TD_RSRC_2TYP t8, %sMDAS_TD_RSRC_CLASS t9, %sMDAS_TD_CONTAINER t1 WHERE t2.data_grp_name = '%s' AND ( t1.container_name is NULL OR t1.container_name  ='') AND t10.user_name  %s AND t13.domain_desc  %s AND  t15.access_privilege  %s   AND t3.data_typ_id = t5.data_typ_id AND t4.rsrc_id = t7.phy_rsrc_id AND t3.data_grp_id = t2.data_grp_id AND t11.data_id = t4.data_id  AND t11.user_id = t12.group_user_id  AND t11.access_id = t15.access_id  AND  t14.user_id = t10.user_id  AND t14.domain_id = t13.domain_id  AND  t12.user_id = t10.user_id  AND t7.rsrc_class_id = t9.rsrc_class_id AND t7.locn_id = t6.locn_id  AND t7.rsrc_typ_id = t8.rsrc_typ_id  AND t4.container_td_id = t1.container_id AND t3.container_id = t4.data_id AND (t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and t3.version_num = t4.version_num)) UNION SELECT t4.repl_enum, t3.data_name, t5.data_typ_name, t4.path_name, t6.netprefix, t3.modify_timestamp, t2.data_grp_name, t3.data_size, t7.phy_rsrc_name, t8.rsrc_typ_name, t9.rsrc_class_name, t3.repl_timestamp, t3.version_num, t3.dchecksum FROM %sMDAS_CD_USER t10, %sMDAS_AD_ACCS t11, %sMDAS_AU_GROUP t12, %sMDAS_TD_DOMN t13, %sMDAS_AU_DOMN t14, %sMDAS_TD_DS_ACCS t15, %sMDAS_ADC_REPL t4, %sMDAS_AD_REPL t3, %sMDAS_TD_DATA_TYP t5, %sMDAS_TD_LOCN t6, %sMDAS_AR_PHYSICAL t7, %sMDAS_TD_DATA_GRP t2, %sMDAS_TD_RSRC_2TYP t8, %sMDAS_TD_RSRC_CLASS t9, %sMDAS_TD_CONTAINER t1 WHERE t2.data_grp_name like '%s/%%' ESCAPE '\\' AND (t1.container_name is NULL OR t1.container_name  ='') AND t10.user_name  %s AND t13.domain_desc  %s AND  t15.access_privilege  %s   AND  t3.data_typ_id = t5.data_typ_id AND t4.rsrc_id = t7.phy_rsrc_id AND t3.data_grp_id = t2.data_grp_id AND t11.data_id = t4.data_id  AND t11.user_id = t12.group_user_id  AND t11.access_id = t15.access_id  AND  t14.user_id = t10.user_id  AND t14.domain_id = t13.domain_id  AND  t12.user_id = t10.user_id  AND t7.rsrc_class_id = t9.rsrc_class_id AND t7.locn_id = t6.locn_id  AND t7.rsrc_typ_id = t8.rsrc_typ_id  AND t4.container_td_id = t1.container_id AND t3.container_id = t4.data_id AND (t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and t3.version_num = t4.version_num))",
+		MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,
+		MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,
+		MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,
+		qval[DATA_GRP_NAME], qval[USER_NAME],qval[DOMAIN_DESC],qval[DATA_ACCESS_PRIVILEGE],
+		MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,
+		MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,
+                MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,
+		qval[DATA_GRP_NAME], qval[USER_NAME],qval[DOMAIN_DESC],qval[DATA_ACCESS_PRIVILEGE]);
+      }
+      break;
+    case QUERY_BULK_UNLOAD_FOR_MOVE_2:
+      if (strlen(qval[USER_NAME]) == 0 ) { /* privileged user */
+	sprintf(qstr,"SELECT t4.repl_enum, t3.data_name, t4.path_name, t6.netprefix, t2.data_grp_name, t3.data_size, t7.phy_rsrc_name, t8.rsrc_typ_name, t9.rsrc_class_name, t3.version_num,  t3.dchecksum  FROM %sMDAS_ADC_REPL t4, %sMDAS_AD_REPL t3, %sMDAS_TD_LOCN t6, %sMDAS_AR_PHYSICAL t7, %sMDAS_TD_DATA_GRP t2, %sMDAS_TD_RSRC_2TYP t8, %sMDAS_TD_RSRC_CLASS t9, %sMDAS_TD_CONTAINER t1 WHERE t2.data_grp_name = '%s' AND t7.phy_rsrc_name  %s AND (t1.container_name is NULL OR t1.container_name ='') AND t4.rsrc_id = t7.phy_rsrc_id AND t3.data_grp_id = t2.data_grp_id AND t7.rsrc_class_id = t9.rsrc_class_id AND t7.locn_id = t6.locn_id AND t7.rsrc_typ_id = t8.rsrc_typ_id AND t4.container_td_id = t1.container_id AND t3.container_id = t4.data_id AND (t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and t3.version_num = t4.version_num)) UNION SELECT t4.repl_enum, t3.data_name, t4.path_name, t6.netprefix, t2.data_grp_name, t3.data_size, t7.phy_rsrc_name, t8.rsrc_typ_name, t9.rsrc_class_name, t3.version_num,  t3.dchecksum  FROM %sMDAS_ADC_REPL t4, %sMDAS_AD_REPL t3, %sMDAS_TD_LOCN t6, %sMDAS_AR_PHYSICAL t7, %sMDAS_TD_DATA_GRP t2, %sMDAS_TD_RSRC_2TYP t8, %sMDAS_TD_RSRC_CLASS t9, %sMDAS_TD_CONTAINER t1 WHERE t2.data_grp_name like '%s/%%' ESCAPE '\\' AND t7.phy_rsrc_name %s AND (t1.container_name is NULL OR t1.container_name ='') AND t4.rsrc_id = t7.phy_rsrc_id AND t3.data_grp_id = t2.data_grp_id AND t7.rsrc_class_id = t9.rsrc_class_id AND t7.locn_id = t6.locn_id AND t7.rsrc_typ_id = t8.rsrc_typ_id AND t4.container_td_id = t1.container_id AND t3.container_id = t4.data_id AND (t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and t3.version_num = t4.version_num)) ORDER BY 2",
+	      MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,
+	      MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,
+	      qval[DATA_GRP_NAME],qval[PHY_RSRC_NAME],
+	      MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,
+	      MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,
+	      qval[DATA_GRP_NAME],qval[PHY_RSRC_NAME]);
+      }
+      else { /* non-priveleged user */
+	sprintf(qstr,"SELECT t4.repl_enum, t3.data_name, t4.path_name, t6.netprefix, t2.data_grp_name, t3.data_size, t7.phy_rsrc_name, t8.rsrc_typ_name, t9.rsrc_class_name, t3.version_num,  t3.dchecksum  FROM %sMDAS_CD_USER t10, %sMDAS_AD_ACCS t11, %sMDAS_AU_GROUP t12, %sMDAS_TD_DOMN t13, %sMDAS_AU_DOMN t14, %sMDAS_TD_DS_ACCS t15, %sMDAS_ADC_REPL t4, %sMDAS_AD_REPL t3, %sMDAS_TD_LOCN t6, %sMDAS_AR_PHYSICAL t7, %sMDAS_TD_DATA_GRP t2, %sMDAS_TD_RSRC_2TYP t8, %sMDAS_TD_RSRC_CLASS t9, %sMDAS_TD_CONTAINER t1 WHERE t2.data_grp_name = '%s' AND t7.phy_rsrc_name  %s AND (t1.container_name is NULL OR t1.container_name ='') AND t10.user_name  %s AND t13.domain_desc  %s AND  t15.access_privilege  %s   AND t4.rsrc_id = t7.phy_rsrc_id AND t3.data_grp_id = t2.data_grp_id AND t7.rsrc_class_id = t9.rsrc_class_id AND t7.locn_id = t6.locn_id AND t7.rsrc_typ_id = t8.rsrc_typ_id AND t11.data_id = t4.data_id  AND t11.user_id = t12.group_user_id  AND t11.access_id = t15.access_id  AND  t14.user_id = t10.user_id  AND t14.domain_id = t13.domain_id  AND  t12.user_id = t10.user_id  AND t4.container_td_id = t1.container_id AND t3.container_id = t4.data_id AND (t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and t3.version_num = t4.version_num)) UNION SELECT t4.repl_enum, t3.data_name, t4.path_name, t6.netprefix, t2.data_grp_name, t3.data_size, t7.phy_rsrc_name, t8.rsrc_typ_name, t9.rsrc_class_name, t3.version_num,  t3.dchecksum  FROM %sMDAS_CD_USER t10, %sMDAS_AD_ACCS t11, %sMDAS_AU_GROUP t12, %sMDAS_TD_DOMN t13, %sMDAS_AU_DOMN t14, %sMDAS_TD_DS_ACCS t15, %sMDAS_ADC_REPL t4, %sMDAS_AD_REPL t3, %sMDAS_TD_LOCN t6, %sMDAS_AR_PHYSICAL t7, %sMDAS_TD_DATA_GRP t2, %sMDAS_TD_RSRC_2TYP t8, %sMDAS_TD_RSRC_CLASS t9, %sMDAS_TD_CONTAINER t1 WHERE t2.data_grp_name like '%s/%%' ESCAPE '\\' AND t7.phy_rsrc_name %s AND (t1.container_name is NULL OR t1.container_name ='') AND t10.user_name  %s AND t13.domain_desc  %s AND  t15.access_privilege  %s   AND t4.rsrc_id = t7.phy_rsrc_id AND t3.data_grp_id = t2.data_grp_id AND t7.rsrc_class_id = t9.rsrc_class_id AND t7.locn_id = t6.locn_id AND t7.rsrc_typ_id = t8.rsrc_typ_id AND t11.data_id = t4.data_id  AND t11.user_id = t12.group_user_id  AND t11.access_id = t15.access_id  AND  t14.user_id = t10.user_id  AND t14.domain_id = t13.domain_id  AND  t12.user_id = t10.user_id  AND t4.container_td_id = t1.container_id AND t3.container_id = t4.data_id AND (t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and t3.version_num = t4.version_num)) ORDER BY 2",
+		MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,
+		MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,
+		MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,
+		qval[DATA_GRP_NAME],qval[PHY_RSRC_NAME], qval[USER_NAME],qval[DOMAIN_DESC],qval[DATA_ACCESS_PRIVILEGE],
+		MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,
+		MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,
+		MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,
+		qval[DATA_GRP_NAME],qval[PHY_RSRC_NAME], qval[USER_NAME],qval[DOMAIN_DESC],qval[DATA_ACCESS_PRIVILEGE]);
+      }      
+      break;
+    case QUERY_SVR_CONTAINER_BY_COLL:
+/*
+      sprintf(qstr,"SELECT  t3.modify_timestamp, t1.container_name, t3.repl_timestamp  FROM %sMDAS_AD_REPL t3, %sMDAS_TD_CONTAINER t1, %sMDAS_ADC_REPL t4, %sMDAS_TD_DATA_GRP t2  WHERE t2.data_grp_name  = '%s' AND t3.data_grp_id = t2.data_grp_id AND t4.container_td_id = t1.container_id  AND t1.container_name like  '/%%'  AND t3.container_id = t4.data_id AND (t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and t3.version_num = t4.version_num)) UNION SELECT t3.modify_timestamp, t1.container_name, t3.repl_timestamp  FROM %sMDAS_AD_REPL t3, %sMDAS_TD_CONTAINER t1, %sMDAS_ADC_REPL t4, %sMDAS_TD_DATA_GRP t2  WHERE t2.data_grp_name  like '%s/%%' ESCAPE '\\' AND t3.data_grp_id = t2.data_grp_id  AND t4.container_td_id = t1.container_id  AND t1.container_name like  '/%%'   AND t3.container_id = t4.data_id AND (t3.repl_enum = -1 or (t3.repl_enum = t4.repl_enum and t3.version_num = t4.version_num))",
+*/
+            sprintf(qstr,"SELECT  t4.modify_timestamp, t1.container_name, t4.repl_timestamp  FROM %sMDAS_AD_REPL t3, %sMDAS_TD_CONTAINER t1, %sMDAS_ADC_REPL t4, %sMDAS_TD_DATA_GRP t2  WHERE t2.data_grp_name  = '%s' AND t3.data_grp_id = t2.data_grp_id AND t4.container_td_id = t1.container_id  AND t1.container_name like  '/%%'  AND t3.container_id = t4.data_id  UNION SELECT t4.modify_timestamp, t1.container_name, t4.repl_timestamp  FROM %sMDAS_AD_REPL t3, %sMDAS_TD_CONTAINER t1, %sMDAS_ADC_REPL t4, %sMDAS_TD_DATA_GRP t2  WHERE t2.data_grp_name  like '%s/%%' ESCAPE '\\' AND t3.data_grp_id = t2.data_grp_id  AND t4.container_td_id = t1.container_id  AND t1.container_name like  '/%%'   AND t3.container_id = t4.data_id ",
+	      MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,
+	      qval[DATA_GRP_NAME],
+	      MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,MDASSCHEMENAME,
+	      qval[DATA_GRP_NAME]);
+      break;
+    default:
+      return(ERROR_IN_QUERY_UNKNOWN_QUERY);
+      break;
+    }
+
+  return(MDAS_SUCCESS);
+}
Only in SRB-3.3.1-SDSC/src/catalog/mdas-srb: srbC_mdas_library.c
Only in SRB-3.3.1-SDSC/src/catalog: mdas-srb.tgz
Only in SRB-3.3.1-SDSC/src/catalog: srb-http
Only in SRB-3.3.1-SDSC/src: client
Only in SRB-3.3.1-SDSC/src: CVS
Only in SRB-3.3.1-SDSC/src: front
Only in SRB-3.3.1-SDSC/src: include
Only in SRB-3.3.1-SDSC/src: lib
Only in SRB-3.3.1-SDSC/src: nt_util
Only in SRB-3.3.1-SDSC/: tape
Only in SRB-3.3.1-SDSC/: test
Only in SRB-3.3.1-SDSC/: unixIO
Only in SRB-3.3.1-SDSC/utilities: admin-bin
Only in SRB-3.3.1-SDSC/utilities: bin
Only in SRB-3.3.1-SDSC/utilities: CVS
Only in SRB-3.3.1-SDSC/utilities: envFiles
Only in SRB-3.3.1-SDSC/utilities: include
Only in SRB-3.3.1-SDSC/utilities: Makefile.in
Only in SRB-3.3.1-SDSC/utilities: man
Only in SRB-3.3.1-SDSC/utilities: obj
Only in SRB-3.3.1-SDSC/utilities: ping
Only in SRB-3.3.1-SDSC/utilities: README.utilities
Only in SRB-3.3.1-SDSC/utilities/src: bloadLib.c
diff -ru SRB-3.3.1-SDSC/utilities/src/bunloadLib.c srb-patches/SQL canned query update/utilities/src/bunloadLib.c
--- SRB-3.3.1-SDSC/utilities/src/bunloadLib.c	2005-06-29 13:31:28.000000000 +0100
+++ srb-patches/SQL canned query update/utilities/src/bunloadLib.c	2005-07-23 00:14:56.000000000 +0100
@@ -315,6 +315,9 @@
         selval[i] = 0;
     }
 
+    /* This is to trigger special canned query for efficiency */
+    selval[DATA_ID] = QUERY_CONTAINER_BY_COLL;
+
     selval[CONTAINER_NAME] = 1;
 #ifdef foo
     /* genDataLikeSQL ("%", qval[DATA_NAME]); */
@@ -326,10 +329,12 @@
         escapeWildCards(collName);
         genCollLikeSQL (collName, qval[DATA_GRP_NAME], 1);
     }
-#endif
+    /* not needed for QUERY_CONTAINER_BY_COLL */
     sprintf (qval[DATA_GRP_NAME],
      " like '%s' ESCAPE '\\' || like '%s/%%' ESCAPE '\\'",
             collection, collection);
+#endif  /* foo */
+    sprintf (qval[DATA_GRP_NAME], "%s", collection);
 
     status = srbGetDataDirInfo(conn, MDAS_CATALOG, qval, selval,
                                       myresult, MAX_GET_RESULTS );
@@ -1015,6 +1020,9 @@
         selval[i] = 0;
     }
 
+    /* This is to trigger special canned query for efficiency */
+    selval[DATA_ID] = QUERY_LIST_NON_CONTAINER_IN_COLL;
+
     selval[DATA_NAME] = 1;
     selval[DATA_GRP_NAME] = 1;
     selval[SIZE] = 1;
@@ -1135,6 +1143,9 @@
     }
 
     while (continuation_index >= 0) {
+        if (myresult == NULL || myresult->row_count <= 0) { 
+            break;  
+        }
         collection = (char *) getFromResultStruct(
          (mdasC_sql_result_struct *) myresult,
             dcs_tname[DATA_GRP_NAME], dcs_aname[DATA_GRP_NAME]);
@@ -1654,6 +1665,9 @@
     memset (qval, 0, sizeof (qval));
     memset (selval, 0, sizeof (selval));
 
+    /* This is to trigger special canned query for efficiency */
+    selval[DATA_ID] = QUERY_INCONTAINER_LIST_BY_COLL;
+
     selval[DATA_NAME] = 1;
     selval[DATA_GRP_NAME] = 1;
     selval[DATA_TYP_NAME] = 1;
@@ -1662,11 +1676,16 @@
     selval[DATA_CHECKSUM] = 1;
     sprintf(qval[DATA_ID] ," <> %s%s",
      MDASSCHEMENAME,"MDAS_AD_REPL.container_id");
-    sprintf (qval[CONTAINER_NAME], " = '%s'", container);
+    sprintf (qval[CONTAINER_NAME], "%s", container);
 
+#ifdef foo  /* changed because of QUERY_INCONTAINER_LIST_BY_COLL */
+    sprintf (qval[CONTAINER_NAME], " = '%s'", container);
     sprintf (qval[DATA_GRP_NAME],
      " like '%s' ESCAPE '\\' || like '%s/%%' ESCAPE '\\'",
             collection, collection);
+#endif
+
+      sprintf (qval[DATA_GRP_NAME],"%s", collection);
 
     status = srbGetDataDirInfo(conn, MDAS_CATALOG, qval, selval,
                                       myresult, MAX_GET_RESULTS );
Only in SRB-3.3.1-SDSC/utilities/src: CVS
Only in SRB-3.3.1-SDSC/utilities/src: getsrbobj.c
Only in SRB-3.3.1-SDSC/utilities/src: Sannotate.c
Only in SRB-3.3.1-SDSC/utilities/src: Sappend.c
Only in SRB-3.3.1-SDSC/utilities/src: Sattrs.c
Only in SRB-3.3.1-SDSC/utilities/src: Sauth.c
Only in SRB-3.3.1-SDSC/utilities/src: Sbkupsrb.c
Only in SRB-3.3.1-SDSC/utilities/src: Sbload.c
Only in SRB-3.3.1-SDSC/utilities/src: Sbregister.c
Only in SRB-3.3.1-SDSC/utilities/src: SbregisterInfoFile.sample
Only in SRB-3.3.1-SDSC/utilities/src: Sbunload.c
Only in SRB-3.3.1-SDSC/utilities/src: Scat.c
Only in SRB-3.3.1-SDSC/utilities/src: Scd.c
Only in SRB-3.3.1-SDSC/utilities/src: Schdefres.c
Only in SRB-3.3.1-SDSC/utilities/src: Schhost.c
Only in SRB-3.3.1-SDSC/utilities/src: Schksum.c
Only in SRB-3.3.1-SDSC/utilities/src: Schmod.c
Only in SRB-3.3.1-SDSC/utilities/src: Scp.c
Only in SRB-3.3.1-SDSC/utilities/src: SdelValue.c
Only in SRB-3.3.1-SDSC/utilities/src: Sdir.c
Only in SRB-3.3.1-SDSC/utilities/src: Sds2db.c
Only in SRB-3.3.1-SDSC/utilities/src: Senv.c
Only in SRB-3.3.1-SDSC/utilities/src: Serror.c
Only in SRB-3.3.1-SDSC/utilities/src: Sexit.c
Only in SRB-3.3.1-SDSC/utilities/src: Sgetappend.c
Only in SRB-3.3.1-SDSC/utilities/src: Sget.c
diff -ru SRB-3.3.1-SDSC/utilities/src/SgetColl.c srb-patches/SQL canned query update/utilities/src/SgetColl.c
--- SRB-3.3.1-SDSC/utilities/src/SgetColl.c	2005-06-29 13:31:28.000000000 +0100
+++ srb-patches/SQL canned query update/utilities/src/SgetColl.c	2005-07-23 00:14:56.000000000 +0100
@@ -98,9 +98,11 @@
     int  newargc;
     char newargv[MAX_TOKEN/4][MAX_OBJ_NAME_LENGTH];
     int  darg;
+    char collName[MAX_TOKEN+20];
     int L_val = DEFAULT_ROW_COUNT;
     int mval = 1;
     int i;
+    int collLike;
     int X_val =0;
     strcpy(inCondition , "");
     i = initSrbClientEnv();
@@ -136,6 +138,9 @@
 	                sprintf(qval[USER_NAME], " = '%s'", srbUser);
 			aFlag = 1;
 			break;
+             case 'm':
+	                selval[COLL_MODIFY_TIMESTAMP] = 1;
+			break;
 	     case 'c':
 	                selval[CONTAINER_FOR_COLLECTION] = 1;
 			break;
@@ -195,7 +200,210 @@
 	                usage();
 			exit(0);
 			break;
-             default :
+   /*
+	    case '1':
+	      I_case = 1;
+	      myself = 5;
+	      selval[CONTAINER_NAME] = 1;
+	      selval[COLLECTION_NAME] = 0;
+	      sprintf (qval[DATA_GRP_NAME],
+		       " = '%s'  || like '%s/%%' ESCAPE '\\'",
+		       argv[argc-1], argv[argc-1]);
+	      break;
+	  case '2': 
+	      I_case = 1;
+	      myself = 5;
+	      darg++;  mval++;
+	      selval[DATA_NAME] = 1;
+	      selval[DATA_GRP_NAME] = 1;
+	      selval[DATA_TYP_NAME] = 1;
+	      selval[SIZE] = 1;
+	      selval[OFFSET] = 1;
+	      selval[DATA_CHECKSUM] = 1;
+	      sprintf(qval[DATA_ID] ," <> %s%s",
+		      MDASSCHEMENAME,"MDAS_AD_REPL.container_id");
+	      sprintf (qval[CONTAINER_NAME], " = '%s'", argv[argc-2]);
+	      sprintf (qval[DATA_GRP_NAME],
+		       " like '%s' ESCAPE '\\' || like '%s/%%' ESCAPE '\\'",
+		       argv[argc-1], argv[argc-1]);
+	      break;
+	  case '3':
+	      I_case = 1;
+	      myself = 5;
+	      selval[DATA_NAME] = 1;
+	      selval[DATA_GRP_NAME] = 1;
+	      selval[SIZE] = 1;
+	      sprintf(qval[CONTAINER_NAME], " not like  '/%%' ESCAPE '\\'");
+	      strcpy (collName, argv[argc-1]);
+	      collLike = make_like_for_mdas (collName); 
+	      if (collLike > 0)
+		genCollLikeSQL (collName, qval[DATA_GRP_NAME], 1);
+	      else {
+		escapeWildCards(collName);
+		genCollLikeSQL (collName, qval[DATA_GRP_NAME], 1);
+	      }
+	      break;
+	  case '4':
+	      I_case = 1;
+	      myself = 5;
+	      selval[DATA_TYP_NAME] = 1;
+	      selval[REPL_TIMESTAMP] = 1;
+	      selval[DATA_CREATE_TIMESTAMP] = 1;
+	      sprintf(qval[CONTAINER_NAME]," is NULL || ='' ");
+	      sprintf(qval[DATA_GRP_NAME],
+		      " like '%s' ESCAPE '\\' || like '%s/%%' ESCAPE '\\'",
+		      argv[argc-1], argv[argc-1]);
+	      selval[DATA_NAME] = 1;
+	      selval[DATA_GRP_NAME] = 1;
+	      selval[PHY_RSRC_TYP_NAME] = 1;
+	      selval[DATA_VER_NUM] = 1;
+	      selval[DATA_REPL_ENUM] = 1;
+	      selval[PATH_NAME] = 1;
+	      selval[RSRC_ADDR_NETPREFIX] = 1;
+	      selval[PHY_RSRC_NAME] = 1;
+	      selval[RSRC_CLASS] = 1;
+	      selval[SIZE] = 1;
+	      selval[DATA_CHECKSUM] = 1;
+	      
+	      break;
+	  case '5': 
+	      I_case = 1;
+	      myself = 5;
+	      darg++;  mval++;
+	      sprintf (qval[PHY_RSRC_NAME], " not in ('%s')", argv[argc-2]);
+
+	      sprintf(qval[CONTAINER_NAME]," is NULL || ='' ");
+	      sprintf(qval[DATA_GRP_NAME],
+		      " like '%s' ESCAPE '\\' || like '%s/%%' ESCAPE '\\'",
+		      argv[argc-1], argv[argc-1]);
+	      selval[DATA_NAME] = 1;
+	      selval[DATA_GRP_NAME] = 1;
+	      selval[PHY_RSRC_TYP_NAME] = 1;
+	      selval[DATA_VER_NUM] = 1;
+	      selval[DATA_REPL_ENUM] = 1;
+	      selval[PATH_NAME] = 1;
+	      selval[RSRC_ADDR_NETPREFIX] = 1;
+	      selval[PHY_RSRC_NAME] = 1;
+	      selval[RSRC_CLASS] = 1;
+	      selval[SIZE] = 1;
+	      selval[DATA_CHECKSUM] = 1;
+	      break;
+	  case '6':
+	      I_case = 1;
+	      myself = 5;
+	      selval[COLLECTION_NAME] = 0;
+	      selval[CONTAINER_NAME] = 1;
+	      selval[REPL_TIMESTAMP] = 1;
+	      selval[DATA_CREATE_TIMESTAMP] = 1;
+	      
+	      sprintf (qval[DATA_GRP_NAME],
+		       " like '%s' ESCAPE '\\' || like '%s/%%' ESCAPE '\\'",
+		       argv[argc-1], argv[argc-1]);
+	      break;
+   */
+	    case '1':
+	      I_case = 1;
+	      myself = 5;
+	      selval[DATA_ID] = QUERY_CONTAINER_BY_COLL;
+	      selval[CONTAINER_NAME] = 1;
+	      selval[COLLECTION_NAME] = 0;
+	      sprintf (qval[DATA_GRP_NAME],"%s",argv[argc-1]);
+	      break;
+	  case '2': /* argv[argc-2] = container_name */
+	      I_case = 1;
+	      myself = 5;
+	      darg++;  mval++;
+	      selval[DATA_ID] = QUERY_INCONTAINER_LIST_BY_COLL;
+	      selval[DATA_NAME] = 1;
+	      selval[DATA_GRP_NAME] = 1;
+	      selval[DATA_TYP_NAME] = 1;
+	      selval[SIZE] = 1;
+	      selval[OFFSET] = 1;
+	      selval[DATA_CHECKSUM] = 1;
+	      sprintf(qval[DATA_ID] ," <> %s%s",
+		      MDASSCHEMENAME,"MDAS_AD_REPL.container_id");
+	      sprintf (qval[CONTAINER_NAME], "%s", argv[argc-2]);
+	      sprintf (qval[DATA_GRP_NAME],"%s", argv[argc-1]);
+	      break;
+	  case '3':
+	      I_case = 1;
+	      myself = 5;
+	      selval[DATA_ID] = QUERY_LIST_NON_CONTAINER_IN_COLL;
+	      selval[DATA_NAME] = 1;
+	      selval[DATA_GRP_NAME] = 1;
+	      selval[SIZE] = 1;
+	      strcpy (collName, argv[argc-1]);
+	      collLike = make_like_for_mdas (collName); 
+	      if (collLike > 0)
+		sprintf (qval[DATA_GRP_NAME],"%s", collName);
+	      else {
+		escapeWildCards(collName);
+		sprintf (qval[DATA_GRP_NAME],"%s", collName);
+	      }
+	      break;
+	  case '4':
+	      I_case = 1;
+	      myself = 5;
+	      selval[DATA_ID] = QUERY_BULK_UNLOAD_FOR_MOVE_1; 
+	      selval[DATA_TYP_NAME] = 1;
+	      selval[REPL_TIMESTAMP] = 1;
+	      selval[DATA_CREATE_TIMESTAMP] = 1;
+	      sprintf(qval[CONTAINER_NAME]," is NULL || ='' ");
+	      sprintf(qval[DATA_GRP_NAME],"%s", argv[argc-1]); 
+	      /* sprintf(qval[DATA_GRP_NAME],
+                      " like '%s' ESCAPE '\\' || like '%s/%%' ESCAPE '\\'",
+                      argv[argc-1], argv[argc-1]); */
+	      /* use this with proper user name and domain for testing non-privileged access ****
+	      sprintf(qval[DATA_ACCESS_PRIVILEGE]," like '%%''write''%%'");
+	      sprintf (qval[USER_NAME], " = 'sekar'");
+	      sprintf (qval[DOMAIN_DESC], " = 'sdsc'");
+	      */
+	      selval[DATA_NAME] = 1;
+	      selval[DATA_GRP_NAME] = 1;
+	      selval[PHY_RSRC_TYP_NAME] = 1;
+	      selval[DATA_VER_NUM] = 1;
+	      selval[DATA_REPL_ENUM] = 1;
+	      selval[PATH_NAME] = 1;
+	      selval[RSRC_ADDR_NETPREFIX] = 1;
+	      selval[PHY_RSRC_NAME] = 1;
+	      selval[RSRC_CLASS] = 1;
+	      selval[SIZE] = 1;
+	      selval[DATA_CHECKSUM] = 1;
+	      
+	      break;
+	  case '5': /*argv[argc-2] is physical resource name */
+	      I_case = 1;
+	      myself = 5;
+	      darg++;  mval++;
+	      selval[DATA_ID] = QUERY_BULK_UNLOAD_FOR_MOVE_2;
+	      sprintf (qval[PHY_RSRC_NAME],"%s", argv[argc-2]);
+
+	      sprintf(qval[CONTAINER_NAME]," is NULL || ='' ");
+	      sprintf(qval[DATA_GRP_NAME],"%s", argv[argc-1]);
+	      selval[DATA_NAME] = 1;
+	      selval[DATA_GRP_NAME] = 1;
+	      selval[PHY_RSRC_TYP_NAME] = 1;
+	      selval[DATA_VER_NUM] = 1;
+	      selval[DATA_REPL_ENUM] = 1;
+	      selval[PATH_NAME] = 1;
+	      selval[RSRC_ADDR_NETPREFIX] = 1;
+	      selval[PHY_RSRC_NAME] = 1;
+	      selval[RSRC_CLASS] = 1;
+	      selval[SIZE] = 1;
+	      selval[DATA_CHECKSUM] = 1;
+	      break;
+	  case '6':
+	      I_case = 1;
+	      myself = 5;
+	      selval[DATA_ID] = QUERY_SVR_CONTAINER_BY_COLL;
+	      selval[COLLECTION_NAME] = 0;
+	      selval[CONTAINER_NAME] = 1;
+	      selval[REPL_TIMESTAMP] = 1;
+	      selval[DATA_CREATE_TIMESTAMP] = 1;
+	      
+	      sprintf (qval[DATA_GRP_NAME],"%s", argv[argc-1]);
+	      break;
+	    default :
 	                fprintf(stderr,"SgetColl Unknown option \n");
 			usage();
 			exit(1);
@@ -264,7 +472,9 @@
         clFinish(conn); exit(3);
     }
 
-    if (X_val == 1) {
+    if (selval[DATA_ID] < 0) {
+    }
+    else if (X_val == 1) {
       if (argc  == 4)
 	i = srbGetDatasetInfo(conn, MDAS_CATALOG,argv[argc-1],argv[argc-2], 
 			    &myresult, L_val, "read");
Only in SRB-3.3.1-SDSC/utilities/src: SgetD.c
Only in SRB-3.3.1-SDSC/utilities/src: SgetR.c
Only in SRB-3.3.1-SDSC/utilities/src: SgetT.c
Only in SRB-3.3.1-SDSC/utilities/src: SgetU.c
Only in SRB-3.3.1-SDSC/utilities/src: sgetw.c
Only in SRB-3.3.1-SDSC/utilities/src: Shelp.c
Only in SRB-3.3.1-SDSC/utilities/src: Singestgroup.c
Only in SRB-3.3.1-SDSC/utilities/src: Singesttoken.c
Only in SRB-3.3.1-SDSC/utilities/src: Singestuser.c
Only in SRB-3.3.1-SDSC/utilities/src: Sinit.c
Only in SRB-3.3.1-SDSC/utilities/src: Sln.c
Only in SRB-3.3.1-SDSC/utilities/src: Sls.c
Only in SRB-3.3.1-SDSC/utilities/src: Slscont.c
Only in SRB-3.3.1-SDSC/utilities/src: Smeta.c
Only in SRB-3.3.1-SDSC/utilities/src: Smkcont.c
Only in SRB-3.3.1-SDSC/utilities/src: Smkdir.c
Only in SRB-3.3.1-SDSC/utilities/src: SmodColl.c
Only in SRB-3.3.1-SDSC/utilities/src: SmodD.c
Only in SRB-3.3.1-SDSC/utilities/src: SmodE.c
Only in SRB-3.3.1-SDSC/utilities/src: SmodifyUser.c
Only in SRB-3.3.1-SDSC/utilities/src: SmodR.c
Only in SRB-3.3.1-SDSC/utilities/src: Smv.c
Only in SRB-3.3.1-SDSC/utilities/src: Spasswd.c
Only in SRB-3.3.1-SDSC/utilities/src: Spcommand.c
Only in SRB-3.3.1-SDSC/utilities/src: Sphymove.c
Only in SRB-3.3.1-SDSC/utilities/src: Spullmeta.c
Only in SRB-3.3.1-SDSC/utilities/src: Spushmeta.c
Only in SRB-3.3.1-SDSC/utilities/src: Sput.c
Only in SRB-3.3.1-SDSC/utilities/src: sputw.c
Only in SRB-3.3.1-SDSC/utilities/src: Spwd.c
Only in SRB-3.3.1-SDSC/utilities/src: Squery.c
Only in SRB-3.3.1-SDSC/utilities/src: srbClientUtil.c
Only in SRB-3.3.1-SDSC/utilities/src: srbparget.c
Only in SRB-3.3.1-SDSC/utilities/src: srbpget.c
Only in SRB-3.3.1-SDSC/utilities/src: srbpput.c
Only in SRB-3.3.1-SDSC/utilities/src: Sregister.c
Only in SRB-3.3.1-SDSC/utilities/src: Sregisterlocation.c
Only in SRB-3.3.1-SDSC/utilities/src: Sregisterresource.c
Only in SRB-3.3.1-SDSC/utilities/src: Sreplcont.c
Only in SRB-3.3.1-SDSC/utilities/src: Sreplicate.c
Only in SRB-3.3.1-SDSC/utilities/src: Srm.c
Only in SRB-3.3.1-SDSC/utilities/src: Srmcont.c
Only in SRB-3.3.1-SDSC/utilities/src: Srmdir.c
Only in SRB-3.3.1-SDSC/utilities/src: Srmticket.c
Only in SRB-3.3.1-SDSC/utilities/src: Srmtrash.c
Only in SRB-3.3.1-SDSC/utilities/src: Srsync.c
Only in SRB-3.3.1-SDSC/utilities/src: Ssfstage.c
Only in SRB-3.3.1-SDSC/utilities/src: Ssh.c
Only in SRB-3.3.1-SDSC/utilities/src: Sstage.c
Only in SRB-3.3.1-SDSC/utilities/src: Ssyncd.c
Only in SRB-3.3.1-SDSC/utilities/src: Ssyncont.c
Only in SRB-3.3.1-SDSC/utilities/src: Stcat.c
Only in SRB-3.3.1-SDSC/utilities/src: Sticket.c
Only in SRB-3.3.1-SDSC/utilities/src: Stls.c
Only in SRB-3.3.1-SDSC/utilities/src: Stoken.c
Only in SRB-3.3.1-SDSC/utilities/src: Sufmeta.c
Only in SRB-3.3.1-SDSC/utilities/src: Szone.c
Only in SRB-3.3.1-SDSC/utilities: test
