#!/bin/bash 
# mass_ctl - Making ADS a Simple System Control Program
# stored in $MASS_HOME/bin
# Started MDOHERTY 25/11/2003
#
#
#Set up environment variables
#
# Read the config file first
if [ ! -r /etc/masstab ]; then
        echo ""
        echo "+=========================================================="
        echo "| mass_ctl: backup control utility"
        echo "| Version 2.0, MDOHERTY January 2004"
        echo "+=========================================================="
        echo "| "
        echo "| MASS CRITICAL FAILURE: NO CONFIG FILE"
        echo "| "
        echo "+----------------------------------------------------------"
        exit
fi
{ while read massvar massval ; do
        export $massvar=$massval
done } < /etc/masstab
#
LGBCK=$MASS_HOME/log/last_good_backup.log
BCKLOG=$MASS_HOME/log/backups.log
#
#
#declare the arrays for use in program
declare -a tapeName
declare -a tapeDate
declare -a tapeTime
declare -a tapeSize
declare -a tapePool
#
#
function doBackup () {
  if [ -z "$1" ]     
  then              
    echo "mass_ctl: No Tape Append Info"
    return         
  fi  
  readIdx
  if [ $tapp = "N" ]
  then
	$MASS_HOME/bin/mass_bck $diskName $type \
	${tapeName[1]} $tapp $level
  else	
	$MASS_HOME/bin/mass_bck $diskName $type \
	${tapeName[$count]} $tapp $level
  fi
  writeIdx
}
#
#
#Read the tape index file
function readIdx()	{
#set up the arrays
	unset tapeName
	unset tapeDate
	unset tapeTime
	unset tapeSize
	unset tapePool
	count=1
#
	if [ ! -r $MASS_HOME/ctl/"$tapeIndex".idx ]                                        
	then                                                          
    		echo "MD-00001: index file does not exist or is not readable."                                  
	    	exit 1                                                    
	fi                                                            
#                                                             
	{ while read tapeName[$count] tapeDate[$count] tapeTime[$count] \
		tapeSize[$count] tapePool[$count]; do
		count=$(($count+1))
	done } < $MASS_HOME/ctl/"$tapeIndex".idx
	count=$(($count-1))
}
#
#
#Write the tape index file
function writeIdx()	{
#	Backup the index file first
#
	cp $MASS_HOME/ctl/"$tapeIndex".idx $MASS_HOME/ctl/"$tapeIndex".bck
#
#	Write the file in a loop using $count
#	Start writing at the second tape in the array as the first tape will be
# 	appended at the end as this is a circular index file
#	Added new code to evaluate tape append variable $tapp because we do
#	not want to rotate the backup tapes for such cases
	if [ $tapp = "N" ]
	then
		wcount=2
	else
		wcount=1
	fi
	{ while [[ $wcount -le $count ]]; do
		echo	${tapeName[$wcount]}"	"${tapeDate[$wcount]}\
		"	"${tapeTime[$wcount]}"	"${tapeSize[$wcount]}\
		"	"${tapePool[$wcount]}
		wcount=$(($wcount+1))
	done }  > $MASS_HOME/ctl/"$tapeIndex".idx
#
#	Change the last write date to today
	if [ $tapp = "N" ]
	then
		tapeDate[1]=`date +%D`
		tapeTime[1]=`date +%X`
		echo ${tapeName[1]}"	"${tapeDate[1]}\
		"	"${tapeTime[1]}\
		"	"${tapeSize[1]}"	"${tapePool[1]}\
		>> $MASS_HOME/ctl/"$tapeIndex".idx
	fi
}
#
#Converts string(s) passed as argument(s)
#to uppercase.
function toupper()	{
  if [ -z "$1" ]       #  If no argument(s) passed,
  then                 #  send error message
    echo "(null)"      #  (C-style void-pointer error message)
    return             #  and return from function.
  fi  
  echo "$@" | tr a-z A-Z
  # Translate all passed arguments ($@).
  return
}
#
#
#Count the number of arguments:
if [ $# = 0 -o $# = 1 ]; then
#
#
#Confirm the input variables
	echo "+=========================================================="
	echo "| mass_ctl: backup control utility"
	echo "| Version 2.0, MDOHERTY January 2004"
	echo "+=========================================================="
	echo "|"
	echo "| Process Id:     $$"
	echo "| Date:           "`date`
	echo "|"
	echo "+----------------------------------------------------------"
	echo "| Running..."
	echo "|"
else
   echo "SYNTAX ERROR: $# argument[s] have been entered"
   echo "USAGE: mass_ctl"
   echo "or mass_ctl <control file>"
   exit 1
fi
#
#
#Main loop: Read the control file and copy as necessary
#  sequentially reads $MASS_HOME/ctl/control.dat
#
#
#set up the control file
if [ $# = "1" ]; then
	export MASS_CTL="$1"
else 
	export MASS_CTL="$MASS_HOME"/ctl/control.dat
fi
#
#
#Read the MASS_CTL file and process each line.
#
if [ ! -r "$MASS_CTL" ]                                                      
then                                                                        
    echo "mass_disk: $MASS_CTL control file does not exist \
        or is not readable."
    exit 1                                                                  
fi                                                                          
#                                                                           
day=${day:-$(date +%a)}
day=`toupper $day`
enam=""
#
#
{ while read diskName tapeIndex sday type sync tapp level; do
   if [ \( "$sday" = "$day" -o "$sday" = "ALL" -o "$sday" = "CAL" \) \
   -a "$sync" = "Y" ]; then
   	# Code a check for the "CAL" day type for Calendar
	# months. Note this will always be the 15th of the month
	# MDOHERTY 12/01/2004
	if [ "$sday" = "CAL" ]; then
		today=${today:-$(date +%d)}
		if [ "$today" = "15" ]; then
			doBackup $tapp $level
		fi
	else
		doBackup $tapp $level
	fi
   fi
done } < $MASS_CTL
#
#
# Now mail the information to selected users - MDOHERTY 26/1/2004
logtime=`date +%"D %T"`
node=`hostname`
cat $MASS_HOME/log/backups.l* | sort -r -k1,2 | sort -u -k4,4 -k 7,7 \
| sort > $LGBCK
mail -s "$node"" Last Good Backups ""$logtime" $MASS_ADMINS < $LGBCK
#
echo "+----------------------------------------------------------"
exit
