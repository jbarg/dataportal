/*
	* 	SDSC Matrix. A Gridflow Management System for data grids and digtal libraries
	*  Copyright (C) 2004 SDSC Matrix Project
	*
	* This library is free software; you can redistribute it and/or
	* modify it under the terms of the GNU Lesser General Public
	* License as published by the Free Software Foundation; either
	* version 2.1 of the License, or (at your option) any later version.
	*
	* This library is distributed in the hope that it will be useful,
	*	but WITHOUT ANY WARRANTY; without even the implied warranty of
	*	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	*	Lesser General Public License for more details.
	*
	*	You should have received a copy of the GNU Lesser General Public
	*	License along with this library; if not, write to the Free Software
	*	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
	*
	* ====================================================================
	*
	* This software consists of voluntary contributions from the developers of the SDSC
	* Matrix Project. We request that all redistribution and software made using this code
	* acknowledge their use of the “SDSC Matrix project” in their end-user documentation or
	* in their website.
	*
	* SDSC Matrix Project (list of developers as of Dec 2005)
	*	Designer & Architect: Arun swaran Jagatheesan (arun@sdsc.edu)
	* 9500 Gilman Drive, MC0505
	* San Diego Supercomputer Center
	* University of California
	* La Jolla CA 92093
	*
	* Allen Ding (alding@sdsc.edu)
	* Lucas Gilbert (iktome@sdsc.edu)
	* Arun Jagatheesan (arun@sdsc.edu)
	* Reena Mathew	(rmathew@sdsc.edu)
	* Daniel Moore (mixx@umail.ucsb.edu)
	* Erik Vandekieft (evk@sdsc.edu)
	* Jonathan Weinberg (jonw@sdsc.edu)
	*
	*/

/* Generated By:JJTree&JavaCC: Do not edit this line. MatrixQueryParserTokenManager.java */
package edu.sdsc.matrix.srb.query;

public class MatrixQueryParserTokenManager implements
			MatrixQueryParserConstants {
	public static java.io.PrintStream debugStream = System.out;
	public static void setDebugStream(java.io.PrintStream ds) {
		debugStream = ds;
	}

	private static final int jjStopStringLiteralDfa_0(int pos, long active0,
															long active1,
															long active2) {
		switch (pos) {
			case 0:
				if ( (active0 & 0x8084004000008180L) != 0L ||
					(active1 & 0x2000040020000L) != 0L) {
					return 48;
				}
				if ( (active1 & 0x2000000L) != 0L) {
					jjmatchedKind = 161;
					return -1;
				}
				if ( (active1 & 0x400000000000000L) != 0L ||
					(active2 & 0x100000000000L) != 0L) {
					return 49;
				}
				if ( (active0 & 0x10000L) != 0L ||
					(active1 & 0x20000000000L) != 0L) {
					return 50;
				}
				if ( (active1 & 0x200000000000000L) != 0L) {
					return 51;
				}
				if ( (active0 & 0x4000040L) != 0L ||
					(active1 & 0x1000000000000000L) != 0L) {
					return 52;
				}
				if ( (active0 & 0x1c23420301400000L) != 0L ||
					(active1 & 0x88015c0001000862L) != 0L ||
					(active2 & 0x8018L) != 0L) {
					jjmatchedKind = 145;
					return 48;
				}
				if ( (active0 & 0x6358bd04789e4000L) != 0L ||
					(active1 & 0x6004a03f80c1709dL) != 0L ||
					(active2 & 0x17fa7L) != 0L) {
					jjmatchedKind = 145;
					return 52;
				}
				return -1;
			case 1:
				if ( (active1 & 0x2000000L) != 0L) {
					if (jjmatchedPos == 0) {
						jjmatchedKind = 161;
						jjmatchedPos = 0;
					}
					return -1;
				}
				if ( (active0 & 0xc3ec93447ddec000L) != 0L ||
					(active1 & 0xf007a40001c27812L) != 0L ||
					(active2 & 0x15fbfL) != 0L) {
					if (jjmatchedPos != 1) {
						jjmatchedKind = 145;
						jjmatchedPos = 1;
					}
					return 52;
				}
				if ( (active0 & 0xc02000200000000L) != 0L ||
					(active1 & 0x800480000000060L) != 0L ||
					(active2 & 0x8000L) != 0L) {
					if (jjmatchedPos != 1) {
						jjmatchedKind = 145;
						jjmatchedPos = 1;
					}
					return 48;
				}
				if ( (active2 & 0x100000000000L) != 0L) {
					if (jjmatchedPos != 1) {
						jjmatchedKind = 154;
						jjmatchedPos = 1;
					}
					return -1;
				}
				if ( (active0 & 0x30116c0100000000L) != 0L ||
					(active1 & 0x103fc001008dL) != 0L ||
					(active2 & 0x2000L) != 0L) {
					return 52;
				}
				return -1;
			case 2:
				if ( (active0 & 0x400000200000000L) != 0L ||
					(active1 & 0x800000000000000L) != 0L) {
					if (jjmatchedPos != 2) {
						jjmatchedKind = 145;
						jjmatchedPos = 2;
					}
					return 48;
				}
				if ( (active0 & 0xcbffb1445d9cc000L) != 0L ||
					(active1 & 0xf007fc2001c35074L) != 0L ||
					(active2 & 0x1dfbfL) != 0L) {
					if (jjmatchedPos != 2) {
						jjmatchedKind = 145;
						jjmatchedPos = 2;
					}
					return 52;
				}
				if ( (active0 & 0xa0020420000L) != 0L ||
					(active1 & 0x2802L) != 0L) {
					return 52;
				}
				return -1;
			case 3:
				if ( (active0 & 0x1bfb1467c04c000L) != 0L ||
					(active1 & 0xf803dc2001c34014L) != 0L ||
					(active2 & 0x999eL) != 0L) {
					if (jjmatchedPos != 3) {
						jjmatchedKind = 145;
						jjmatchedPos = 3;
					}
					return 52;
				}
				if ( (active2 & 0x14400L) != 0L) {
					if (jjmatchedPos < 2) {
						jjmatchedKind = 145;
						jjmatchedPos = 2;
					}
					return -1;
				}
				if ( (active0 & 0xca40000001980000L) != 0L ||
					(active1 & 0x4200000001060L) != 0L ||
					(active2 & 0x221L) != 0L) {
					return 52;
				}
				if ( (active0 & 0x400000000000000L) != 0L) {
					if (jjmatchedPos != 3) {
						jjmatchedKind = 145;
						jjmatchedPos = 3;
					}
					return 48;
				}
				return -1;
			case 4:
				if ( (active0 & 0x72b81467c04c000L) != 0L ||
					(active1 & 0xb803d80001c30024L) != 0L ||
					(active2 & 0x999eL) != 0L) {
					jjmatchedKind = 145;
					jjmatchedPos = 4;
					return 52;
				}
				if ( (active2 & 0x14400L) != 0L) {
					if (jjmatchedPos < 2) {
						jjmatchedKind = 145;
						jjmatchedPos = 2;
					}
					return -1;
				}
				if ( (active0 & 0x94300000000000L) != 0L ||
					(active1 & 0x4000042000004010L) != 0L) {
					return 52;
				}
				return -1;
			case 5:
				if ( (active2 & 0x14400L) != 0L) {
					if (jjmatchedPos < 2) {
						jjmatchedKind = 145;
						jjmatchedPos = 2;
					}
					return -1;
				}
				if ( (active0 & 0x72b004448008000L) != 0L ||
					(active1 & 0xb803580001410024L) != 0L ||
					(active2 & 0x991eL) != 0L) {
					jjmatchedKind = 145;
					jjmatchedPos = 5;
					return 52;
				}
				if ( (active0 & 0x810234044000L) != 0L ||
					(active1 & 0x800000820000L) != 0L ||
					(active2 & 0x80L) != 0L) {
					return 52;
				}
				return -1;
			case 6:
				if ( (active2 & 0x1800L) != 0L) {
					if (jjmatchedPos < 5) {
						jjmatchedKind = 145;
						jjmatchedPos = 5;
					}
					return -1;
				}
				if ( (active2 & 0x10400L) != 0L) {
					if (jjmatchedPos < 2) {
						jjmatchedKind = 145;
						jjmatchedPos = 2;
					}
					return -1;
				}
				if ( (active0 & 0x32b004440008000L) != 0L ||
					(active1 & 0xb001580000410024L) != 0L ||
					(active2 & 0x10eL) != 0L) {
					jjmatchedKind = 145;
					jjmatchedPos = 6;
					return 52;
				}
				if ( (active0 & 0x400000008000000L) != 0L ||
					(active1 & 0x802000001000000L) != 0L ||
					(active2 & 0x8010L) != 0L) {
					return 52;
				}
				return -1;
			case 7:
				if ( (active2 & 0x1800L) != 0L) {
					if (jjmatchedPos < 5) {
						jjmatchedKind = 145;
						jjmatchedPos = 5;
					}
					return -1;
				}
				if ( (active2 & 0x10400L) != 0L) {
					if (jjmatchedPos < 2) {
						jjmatchedKind = 145;
						jjmatchedPos = 2;
					}
					return -1;
				}
				if ( (active0 & 0x8004400000000L) != 0L ||
					(active1 & 0xb001000000400024L) != 0L ||
					(active2 & 0xaL) != 0L) {
					return 52;
				}
				if ( (active0 & 0x323000040008000L) != 0L ||
					(active1 & 0x580000010000L) != 0L ||
					(active2 & 0x104L) != 0L) {
					if (jjmatchedPos != 7) {
						jjmatchedKind = 145;
						jjmatchedPos = 7;
					}
					return 52;
				}
				return -1;
			case 8:
				if ( (active2 & 0x1800L) != 0L) {
					if (jjmatchedPos < 5) {
						jjmatchedKind = 145;
						jjmatchedPos = 5;
					}
					return -1;
				}
				if ( (active2 & 0x10000L) != 0L) {
					if (jjmatchedPos < 2) {
						jjmatchedKind = 145;
						jjmatchedPos = 2;
					}
					return -1;
				}
				if ( (active2 & 0x8L) != 0L) {
					jjmatchedKind = 145;
					jjmatchedPos = 8;
					return 1;
				}
				if ( (active0 & 0x202000000000000L) != 0L ||
					(active1 & 0x480000000000L) != 0L ||
					(active2 & 0x104L) != 0L) {
					jjmatchedKind = 145;
					jjmatchedPos = 8;
					return 52;
				}
				if ( (active0 & 0x121000040008000L) != 0L ||
					(active1 & 0x100000010000L) != 0L) {
					return 52;
				}
				return -1;
			case 9:
				if ( (active2 & 0x1800L) != 0L) {
					if (jjmatchedPos < 5) {
						jjmatchedKind = 145;
						jjmatchedPos = 5;
					}
					return -1;
				}
				if ( (active2 & 0x10000L) != 0L) {
					if (jjmatchedPos < 2) {
						jjmatchedKind = 145;
						jjmatchedPos = 2;
					}
					return -1;
				}
				if ( (active0 & 0x2000000000000L) != 0L ||
					(active1 & 0x480000000000L) != 0L ||
					(active2 & 0x100L) != 0L) {
					return 52;
				}
				if ( (active2 & 0x8L) != 0L) {
					if (jjmatchedPos != 9) {
						jjmatchedKind = 145;
						jjmatchedPos = 9;
					}
					return 1;
				}
				if ( (active0 & 0x200000000000000L) != 0L ||
					(active2 & 0x4L) != 0L) {
					if (jjmatchedPos != 9) {
						jjmatchedKind = 145;
						jjmatchedPos = 9;
					}
					return 52;
				}
				return -1;
			case 10:
				if ( (active2 & 0x1800L) != 0L) {
					if (jjmatchedPos < 5) {
						jjmatchedKind = 145;
						jjmatchedPos = 5;
					}
					return -1;
				}
				if ( (active2 & 0x10000L) != 0L) {
					if (jjmatchedPos < 2) {
						jjmatchedKind = 145;
						jjmatchedPos = 2;
					}
					return -1;
				}
				if ( (active0 & 0x200000000000000L) != 0L) {
					return 52;
				}
				if ( (active1 & 0x400000000000L) != 0L ||
					(active2 & 0xcL) != 0L) {
					jjmatchedKind = 145;
					jjmatchedPos = 10;
					return 1;
				}
				return -1;
			case 11:
				if ( (active2 & 0x1000L) != 0L) {
					if (jjmatchedPos < 5) {
						jjmatchedKind = 145;
						jjmatchedPos = 5;
					}
					return -1;
				}
				if ( (active1 & 0x400000000000L) != 0L ||
					(active2 & 0xcL) != 0L) {
					jjmatchedKind = 145;
					jjmatchedPos = 11;
					return 1;
				}
				return -1;
			case 12:
				if ( (active2 & 0x1000L) != 0L) {
					if (jjmatchedPos < 5) {
						jjmatchedKind = 145;
						jjmatchedPos = 5;
					}
					return -1;
				}
				if ( (active2 & 0x8L) != 0L) {
					return 1;
				}
				if ( (active1 & 0x400000000000L) != 0L ||
					(active2 & 0x4L) != 0L) {
					jjmatchedKind = 145;
					jjmatchedPos = 12;
					return 1;
				}
				return -1;
			case 13:
				if ( (active2 & 0x1000L) != 0L) {
					if (jjmatchedPos < 5) {
						jjmatchedKind = 145;
						jjmatchedPos = 5;
					}
					return -1;
				}
				if ( (active1 & 0x400000000000L) != 0L ||
					(active2 & 0x4L) != 0L) {
					jjmatchedKind = 145;
					jjmatchedPos = 13;
					return 1;
				}
				return -1;
			case 14:
				if ( (active2 & 0x1000L) != 0L) {
					if (jjmatchedPos < 5) {
						jjmatchedKind = 145;
						jjmatchedPos = 5;
					}
					return -1;
				}
				if ( (active1 & 0x400000000000L) != 0L ||
					(active2 & 0x4L) != 0L) {
					jjmatchedKind = 145;
					jjmatchedPos = 14;
					return 1;
				}
				return -1;
			case 15:
				if ( (active1 & 0x400000000000L) != 0L ||
					(active2 & 0x4L) != 0L) {
					jjmatchedKind = 145;
					jjmatchedPos = 15;
					return 1;
				}
				return -1;
			case 16:
				if ( (active1 & 0x400000000000L) != 0L ||
					(active2 & 0x4L) != 0L) {
					jjmatchedKind = 145;
					jjmatchedPos = 16;
					return 1;
				}
				return -1;
			case 17:
				if ( (active2 & 0x4L) != 0L) {
					jjmatchedKind = 145;
					jjmatchedPos = 17;
					return 1;
				}
				if ( (active1 & 0x400000000000L) != 0L) {
					return 1;
				}
				return -1;
			case 18:
				if ( (active2 & 0x4L) != 0L) {
					jjmatchedKind = 145;
					jjmatchedPos = 18;
					return 1;
				}
				return -1;
			case 19:
				if ( (active2 & 0x4L) != 0L) {
					jjmatchedKind = 145;
					jjmatchedPos = 19;
					return 1;
				}
				return -1;
			case 20:
				if ( (active2 & 0x4L) != 0L) {
					jjmatchedKind = 145;
					jjmatchedPos = 20;
					return 1;
				}
				return -1;
			default:
				return -1;
		}
	}

	private static final int jjStartNfa_0(int pos, long active0, long active1,
												long active2) {
		return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1,
													active2), pos + 1);
	}

	static private final int jjStopAtPos(int pos, int kind) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}

	static private final int jjStartNfaWithStates_0(int pos, int kind,
													int state) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return pos + 1;
		}
		return jjMoveNfa_0(state, pos + 1);
	}

	static private final int jjMoveStringLiteralDfa0_0() {
		switch (curChar) {
			case 9:
				return jjStopAtPos(0, 2);
			case 10:
				return jjStopAtPos(0, 3);
			case 13:
				return jjStopAtPos(0, 4);
			case 32:
				return jjStopAtPos(0, 1);
			case 33:
				return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000L, 0x0L);
			case 34:
				return jjStartNfaWithStates_0(0, 121, 51);
			case 35:
				return jjStopAtPos(0, 25);
			case 36:
				return jjStopAtPos(0, 35);
			case 38:
				jjmatchedKind = 21;
				return jjMoveStringLiteralDfa1_0(0x20L, 0x0L, 0x0L);
			case 39:
				jjmatchedKind = 122;
				return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000000000L);
			case 40:
				return jjStopAtPos(0, 9);
			case 41:
				return jjStopAtPos(0, 10);
			case 42:
				return jjStopAtPos(0, 74);
			case 43:
				return jjStopAtPos(0, 72);
			case 44:
				return jjStopAtPos(0, 39);
			case 45:
				jjmatchedKind = 73;
				return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000000L, 0x0L);
			case 46:
				jjmatchedKind = 16;
				return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000L, 0x0L);
			case 47:
				return jjStopAtPos(0, 82);
			case 58:
				jjmatchedKind = 12;
				return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L, 0x0L);
			case 59:
				return jjStopAtPos(0, 11);
			case 60:
				jjmatchedKind = 90;
				return jjMoveStringLiteralDfa1_0(0x0L, 0xa8004008000000L, 0x0L);
			case 61:
				return jjStopAtPos(0, 31);
			case 62:
				jjmatchedKind = 92;
				return jjMoveStringLiteralDfa1_0(0x0L, 0x8020000000L, 0x0L);
			case 63:
				jjmatchedKind = 134;
				return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000000L, 0x0L);
			case 64:
				return jjStopAtPos(0, 104);
			case 66:
				return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000L);
			case 69:
				return jjStartNfaWithStates_0(0, 8, 48);
			case 73:
				return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000L);
			case 76:
				return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200L);
			case 78:
				return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x14400L);
			case 83:
				return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1800L);
			case 91:
				return jjStopAtPos(0, 84);
			case 92:
				return jjStopAtPos(0, 83);
			case 93:
				jjmatchedKind = 85;
				return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000000L, 0x0L);
			case 97:
				return jjMoveStringLiteralDfa1_0(0x1001000101400000L,
													0x100000000002L, 0x0L);
			case 98:
				return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L, 0x0L);
			case 99:
				return jjMoveStringLiteralDfa1_0(0x820000000000000L,
													0x40001000060L, 0x10L);
			case 100:
				return jjMoveStringLiteralDfa1_0(0x402000200000000L,
													0x801480000000800L, 0x8L);
			case 101:
				jjmatchedKind = 7;
				return jjMoveStringLiteralDfa1_0(0x8084004000008000L,
													0x2000040020000L, 0x0L);
			case 102:
				return jjMoveStringLiteralDfa1_0(0x20000000000L,
													0x8000000000000000L, 0x0L);
			case 103:
				return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0xc00800000L,
													0x0L);
			case 105:
				return jjMoveStringLiteralDfa1_0(0x2000040010000000L,
													0x3000011004L, 0x1L);
			case 108:
				return jjMoveStringLiteralDfa1_0(0x10080000020000L,
													0x300000000L, 0x0L);
			case 109:
				return jjMoveStringLiteralDfa1_0(0x20000000L, 0x2000L, 0x0L);
			case 110:
				return jjMoveStringLiteralDfa1_0(0x40000000L, 0x80000000L,
													0x22L);
			case 111:
				return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x9L, 0x0L);
			case 112:
				return jjMoveStringLiteralDfa1_0(0x4000L, 0x2000800000000000L,
													0x4L);
			case 113:
				return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L, 0x0L);
			case 114:
				return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L, 0x0L);
			case 115:
				return jjMoveStringLiteralDfa1_0(0x1408000000c0000L,
													0x4000200000000000L, 0x80L);
			case 116:
				return jjMoveStringLiteralDfa1_0(0x4200000000100000L,
													0x4000000000090L, 0x0L);
			case 117:
				return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L, 0x0L);
			case 118:
				return jjMoveStringLiteralDfa1_0(0x408000000L, 0x400000L,
													0x100L);
			case 119:
				return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L, 0x0L);
			case 120:
				jjmatchedKind = 6;
				return jjMoveStringLiteralDfa1_0(0x4000000L,
													0x1000000000000000L, 0x0L);
			case 123:
				return jjStopAtPos(0, 36);
			case 124:
				return jjStopAtPos(0, 79);
			case 125:
				return jjStopAtPos(0, 37);
			default:
				return jjMoveNfa_0(0, 0);
		}
	}

	static private final int jjMoveStringLiteralDfa1_0(long active0,
																long active1,
																long active2) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(0, active0, active1, active2);
			return 1;
		}
		switch (curChar) {
			case 33:
				return jjMoveStringLiteralDfa2_0(active0, 0L, active1,
													0x88000000000000L, active2, 0L);
			case 35:
				if ( (active0 & 0x20L) != 0L) {
					return jjStopAtPos(1, 5);
				}
				break;
			case 39:
				if ( (active2 & 0x100000000000L) != 0L) {
					return jjStopAtPos(1, 154);
				}
				break;
			case 45:
				return jjMoveStringLiteralDfa2_0(active0, 0L, active1,
													0x100000000000000L, active2,
													0L);
			case 46:
				if ( (active1 & 0x20000000000L) != 0L) {
					return jjStopAtPos(1, 105);
				}
				break;
			case 58:
				if ( (active0 & 0x2000L) != 0L) {
					return jjStopAtPos(1, 13);
				}
				break;
			case 60:
				if ( (active1 & 0x4000000000L) != 0L) {
					return jjStopAtPos(1, 102);
				}
				break;
			case 61:
				if ( (active1 & 0x2000000L) != 0L) {
					return jjStopAtPos(1, 89);
				} else if ( (active1 & 0x8000000L) != 0L) {
					return jjStopAtPos(1, 91);
				} else if ( (active1 & 0x20000000L) != 0L) {
					return jjStopAtPos(1, 93);
				}
				break;
			case 62:
				if ( (active1 & 0x8000000000L) != 0L) {
					return jjStopAtPos(1, 103);
				} else if ( (active1 & 0x40000000000000L) != 0L) {
					return jjStopAtPos(1, 118);
				}
				break;
			case 63:
				if ( (active1 & 0x20000000000000L) != 0L) {
					return jjStopAtPos(1, 117);
				}
				break;
			case 69:
				return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L,
													active2, 0x8000L);
			case 73:
				return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L,
													active2, 0x200L);
			case 78:
				if ( (active2 & 0x2000L) != 0L) {
					return jjStartNfaWithStates_0(1, 141, 52);
				}
				break;
			case 79:
				return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L,
													active2, 0x15c00L);
			case 93:
				return jjMoveStringLiteralDfa2_0(active0, 0L, active1,
													0x10000000000000L, active2, 0L);
			case 97:
				return jjMoveStringLiteralDfa2_0(active0, 0x900000440020000L,
													active1, 0x800000400060L,
													active2, 0x100L);
			case 99:
				return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L,
													active2, 0x80L);
			case 100:
				return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000L,
													active2, 0L);
			case 101:
				if ( (active1 & 0x80000000L) != 0L) {
					return jjStartNfaWithStates_0(1, 95, 52);
				} else if ( (active1 & 0x200000000L) != 0L) {
					jjmatchedKind = 97;
					jjmatchedPos = 1;
				} else if ( (active1 & 0x800000000L) != 0L) {
					return jjStartNfaWithStates_0(1, 99, 52);
				}
				return jjMoveStringLiteralDfa2_0(active0, 0x412090208000000L,
													active1, 0x804680000000000L,
													active2, 0L);
			case 102:
				if ( (active0 & 0x2000000000000000L) != 0L) {
					return jjStartNfaWithStates_0(1, 61, 52);
				} else if ( (active1 & 0x8L) != 0L) {
					return jjStartNfaWithStates_0(1, 67, 52);
				}
				break;
			case 104:
				return jjMoveStringLiteralDfa2_0(active0, 0x4000100000000000L,
													active1, 0x40000000000L,
													active2, 0L);
			case 105:
				return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800L,
													active2, 0x2L);
			case 107:
				return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L,
													active2, 0L);
			case 108:
				return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L,
													active1, 0x2000000800000L,
													active2, 0L);
			case 109:
				return jjMoveStringLiteralDfa2_0(active0, 0x4000010400000L,
													active1, 0x1000000000000000L,
													active2, 0L);
			case 110:
				if ( (active0 & 0x40000000000L) != 0L) {
					jjmatchedKind = 42;
					jjmatchedPos = 1;
				}
				return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x14006L,
													active2, 0L);
			case 111:
				if ( (active1 & 0x80L) != 0L) {
					return jjStartNfaWithStates_0(1, 71, 52);
				}
				return jjMoveStringLiteralDfa2_0(active0, 0x60020020000000L,
													active1, 0x1000001002000L,
													active2, 0x38L);
			case 112:
				return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1,
													0L, active2, 0L);
			case 113:
				if ( (active1 & 0x40000000L) != 0L) {
					return jjStartNfaWithStates_0(1, 94, 52);
				}
				return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1,
													0L, active2, 0L);
			case 114:
				if ( (active1 & 0x1L) != 0L) {
					jjmatchedKind = 64;
					jjmatchedPos = 1;
				}
				return jjMoveStringLiteralDfa2_0(active0, 0x8200000004000L,
													active1, 0x2000000000000010L,
													active2, 0x4L);
			case 115:
				if ( (active0 & 0x1000000000000000L) != 0L) {
					jjmatchedKind = 60;
					jjmatchedPos = 1;
				} else if ( (active1 & 0x1000000000L) != 0L) {
					jjmatchedKind = 100;
					jjmatchedPos = 1;
				}
				return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L,
													active1, 0x2000000000L,
													active2, 0L);
			case 116:
				if ( (active0 & 0x100000000L) != 0L) {
					jjmatchedKind = 32;
					jjmatchedPos = 1;
				} else if ( (active1 & 0x100000000L) != 0L) {
					return jjStartNfaWithStates_0(1, 96, 52);
				} else if ( (active1 & 0x400000000L) != 0L) {
					return jjStartNfaWithStates_0(1, 98, 52);
				}
				return jjMoveStringLiteralDfa2_0(active0, 0x800000040000L,
													active1, 0x4000100000000000L,
													active2, 0x1L);
			case 117:
				return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1,
													0x8000000000000000L, active2,
													0L);
			case 118:
				return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L,
													active1, 0L, active2, 0L);
			case 120:
				return jjMoveStringLiteralDfa2_0(active0, 0x4000008000L,
													active1, 0x20000L, active2, 0L);
			case 121:
				if ( (active0 & 0x400000000000L) != 0L) {
					return jjStartNfaWithStates_0(1, 46, 52);
				}
				return jjMoveStringLiteralDfa2_0(active0, 0x200000000100000L,
													active1, 0L, active2, 0L);
			default:
				break;
		}
		return jjStartNfa_0(0, active0, active1, active2);
	}

	static private final int jjMoveStringLiteralDfa2_0(long old0, long active0,
																long old1, long active1,
																long old2, long active2) {
		if ( ( (active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L) {
			return jjStartNfa_0(0, old0, old1, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(1, active0, active1, active2);
			return 2;
		}
		switch (curChar) {
			case 45:
				return jjMoveStringLiteralDfa3_0(active0, 0L, active1,
													0x80000000000000L, active2, 0L);
			case 62:
				if ( (active1 & 0x10000000000000L) != 0L) {
					return jjStopAtPos(2, 116);
				} else if ( (active1 & 0x100000000000000L) != 0L) {
					return jjStopAtPos(2, 120);
				}
				break;
			case 75:
				return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L,
													active2, 0x200L);
			case 84:
				return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L,
													active2, 0x1c400L);
			case 85:
				return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L,
													active2, 0x1800L);
			case 91:
				return jjMoveStringLiteralDfa3_0(active0, 0L, active1,
													0x8000000000000L, active2, 0L);
			case 97:
				return jjMoveStringLiteralDfa3_0(active0, 0x10800000004000L,
													active1, 0L, active2, 0L);
			case 99:
				return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L,
													active1, 0x801000000020000L,
													active2, 0x8L);
			case 100:
				if ( (active1 & 0x2L) != 0L) {
					return jjStartNfaWithStates_0(2, 65, 52);
				} else if ( (active1 & 0x2000L) != 0L) {
					jjmatchedKind = 77;
					jjmatchedPos = 2;
				}
				return jjMoveStringLiteralDfa3_0(active0, 0x200020000000L,
													active1, 0L, active2, 0x20L);
			case 101:
				return jjMoveStringLiteralDfa3_0(active0, 0x4088100000000000L,
													active1, 0x2002000000000010L,
													active2, 0x1L);
			case 102:
				return jjMoveStringLiteralDfa3_0(active0, 0x400000200000000L,
													active1, 0L, active2, 0L);
			case 104:
				return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L,
													active2, 0x80L);
			case 105:
				return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1,
													0x40000005000L, active2, 0L);
			case 108:
				return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L,
													active1, 0x1000200000400000L,
													active2, 0x102L);
			case 109:
				return jjMoveStringLiteralDfa3_0(active0, 0x40000040000000L,
													active1, 0L, active2, 0x10L);
			case 110:
				return jjMoveStringLiteralDfa3_0(active0, 0L, active1,
													0x8000002001000000L, active2,
													0L);
			case 111:
				return jjMoveStringLiteralDfa3_0(active0, 0x1800000L, active1,
													0x800000L, active2, 0x4L);
			case 112:
				if ( (active0 & 0x400000L) != 0L) {
					return jjStartNfaWithStates_0(2, 22, 52);
				}
				return jjMoveStringLiteralDfa3_0(active0, 0x204000010100000L,
													active1, 0L, active2, 0L);
			case 114:
				if ( (active0 & 0x20000000000L) != 0L) {
					return jjStartNfaWithStates_0(2, 41, 52);
				}
				return jjMoveStringLiteralDfa3_0(active0, 0x408040000L, active1,
													0x4000800000000000L, active2,
													0L);
			case 115:
				return jjMoveStringLiteralDfa3_0(active0, 0x8802000000000000L,
													active1, 0x480000000064L,
													active2, 0L);
			case 116:
				if ( (active0 & 0x80000000000L) != 0L) {
					return jjStartNfaWithStates_0(2, 43, 52);
				}
				return jjMoveStringLiteralDfa3_0(active0, 0x100014000008000L,
													active1, 0x100000010000L,
													active2, 0L);
			case 117:
				return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1,
													0L, active2, 0L);
			case 118:
				if ( (active1 & 0x800L) != 0L) {
					return jjStartNfaWithStates_0(2, 75, 52);
				}
				break;
			case 120:
				if ( (active0 & 0x20000L) != 0L) {
					return jjStartNfaWithStates_0(2, 17, 52);
				}
				return jjMoveStringLiteralDfa3_0(active0, 0L, active1,
													0x4000000000000L, active2, 0L);
			default:
				break;
		}
		return jjStartNfa_0(1, active0, active1, active2);
	}

	static private final int jjMoveStringLiteralDfa3_0(long old0, long active0,
																long old1, long active1,
																long old2, long active2) {
		if ( ( (active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L) {
			return jjStartNfa_0(1, old0, old1, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(2, active0, active1, active2);
			return 3;
		}
		switch (curChar) {
			case 32:
				return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L,
													active2, 0x14400L);
			case 45:
				if ( (active1 & 0x80000000000000L) != 0L) {
					return jjStopAtPos(3, 119);
				}
				break;
			case 67:
				return jjMoveStringLiteralDfa4_0(active0, 0L, active1,
													0x8000000000000L, active2, 0L);
			case 69:
				if ( (active2 & 0x200L) != 0L) {
					return jjStartNfaWithStates_0(3, 137, 52);
				}
				break;
			case 78:
				return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L,
													active2, 0x1800L);
			case 87:
				return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L,
													active2, 0x8000L);
			case 97:
				return jjMoveStringLiteralDfa4_0(active0, 0x408000000000000L,
													active1, 0x10L, active2, 0L);
			case 98:
				return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L,
													active1, 0x800000L, active2,
													0L);
			case 99:
				return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L,
													active1, 0x8000480000000000L,
													active2, 0x4L);
			case 101:
				if ( (active0 & 0x100000L) != 0L) {
					jjmatchedKind = 20;
					jjmatchedPos = 3;
				} else if ( (active0 & 0x40000000000000L) != 0L) {
					return jjStartNfaWithStates_0(3, 54, 52);
				} else if ( (active0 & 0x800000000000000L) != 0L) {
					return jjStartNfaWithStates_0(3, 59, 52);
				} else if ( (active0 & 0x8000000000000000L) != 0L) {
					return jjStartNfaWithStates_0(3, 63, 52);
				} else if ( (active2 & 0x20L) != 0L) {
					return jjStartNfaWithStates_0(3, 133, 52);
				}
				return jjMoveStringLiteralDfa4_0(active0, 0x201204044008000L,
													active1, 0x800000030000L,
													active2, 0x80L);
			case 102:
				if ( (active1 & 0x200000000000L) != 0L) {
					return jjStartNfaWithStates_0(3, 109, 52);
				}
				break;
			case 103:
				return jjMoveStringLiteralDfa4_0(active0, 0x4000L, active1, 0L,
													active2, 0L);
			case 105:
				return jjMoveStringLiteralDfa4_0(active0, 0x100000600040000L,
													active1, 0x4000000000400000L,
													active2, 0x100L);
			case 108:
				return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L,
													active1, 0x800040000000000L,
													active2, 0x2L);
			case 109:
				if ( (active2 & 0x1L) != 0L) {
					return jjStartNfaWithStates_0(3, 128, 52);
				}
				return jjMoveStringLiteralDfa4_0(active0, 0L, active1,
													0x2000000000000L, active2,
													0x10L);
			case 110:
				if ( (active0 & 0x4000000000000000L) != 0L) {
					return jjStartNfaWithStates_0(3, 62, 52);
				}
				break;
			case 111:
				return jjMoveStringLiteralDfa4_0(active0, 0x10000000L, active1,
													0x2000004000L, active2, 0L);
			case 112:
				if ( (active0 & 0x80000L) != 0L) {
					return jjStartNfaWithStates_0(3, 19, 52);
				}
				break;
			case 114:
				return jjMoveStringLiteralDfa4_0(active0, 0x80100000000000L,
													active1, 0x100000000000L,
													active2, 0L);
			case 115:
				if ( (active0 & 0x1000000L) != 0L) {
					return jjStartNfaWithStates_0(3, 24, 52);
				}
				return jjMoveStringLiteralDfa4_0(active0, 0x10000008000000L,
													active1, 0x3000000000000000L,
													active2, 0L);
			case 116:
				if ( (active0 & 0x800000L) != 0L) {
					return jjStartNfaWithStates_0(3, 23, 52);
				} else if ( (active1 & 0x40L) != 0L) {
					jjmatchedKind = 70;
					jjmatchedPos = 3;
				} else if ( (active1 & 0x4000000000000L) != 0L) {
					return jjStartNfaWithStates_0(3, 114, 52);
				}
				return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L,
													active1, 0x1000024L, active2,
													0L);
			case 117:
				return jjMoveStringLiteralDfa4_0(active0, 0x10020000000L,
													active1, 0x1000000000000L,
													active2, 0x8L);
			case 118:
				if ( (active1 & 0x1000L) != 0L) {
					return jjStartNfaWithStates_0(3, 76, 52);
				}
				break;
			default:
				break;
		}
		return jjStartNfa_0(2, active0, active1, active2);
	}

	static private final int jjMoveStringLiteralDfa4_0(long old0, long active0,
																long old1, long active1,
																long old2, long active2) {
		if ( ( (active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L) {
			return jjStartNfa_0(2, old0, old1, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(3, active0, active1, active2);
			return 4;
		}
		switch (curChar) {
			case 66:
				return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L,
													active2, 0x10000L);
			case 68:
				return jjMoveStringLiteralDfa5_0(active0, 0L, active1,
													0x8000000000000L, active2,
													0x1800L);
			case 69:
				return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L,
													active2, 0x8000L);
			case 73:
				return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L,
													active2, 0x4000L);
			case 76:
				return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L,
													active2, 0x400L);
			case 97:
				return jjMoveStringLiteralDfa5_0(active0, 0x20000400000000L,
													active1, 0x800000000800024L,
													active2, 0x2L);
			case 99:
				return jjMoveStringLiteralDfa5_0(active0, 0x40000L, active1, 0L,
													active2, 0L);
			case 100:
				if ( (active1 & 0x40000000000L) != 0L) {
					return jjStartNfaWithStates_0(4, 106, 52);
				}
				return jjMoveStringLiteralDfa5_0(active0, 0L, active1,
													0x400000L, active2, 0x100L);
			case 101:
				if ( (active0 & 0x100000000000L) != 0L) {
					return jjStartNfaWithStates_0(4, 44, 52);
				}
				return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L,
													active1, 0x2002480001000000L,
													active2, 0x14L);
			case 105:
				return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1,
													0x100000000000L, active2, 0L);
			case 108:
				return jjMoveStringLiteralDfa5_0(active0, 0x800020000000L,
													active1, 0L, active2, 0L);
			case 109:
				return jjMoveStringLiteralDfa5_0(active0, 0x4000L, active1,
													0x1000000000000L, active2,
													0x88L);
			case 110:
				if ( (active1 & 0x4000L) != 0L) {
					return jjStartNfaWithStates_0(4, 78, 52);
				}
				return jjMoveStringLiteralDfa5_0(active0, 0x1000200008000L,
													active1, 0x800000000000L,
													active2, 0L);
			case 112:
				if ( (active1 & 0x4000000000000000L) != 0L) {
					return jjStartNfaWithStates_0(4, 126, 52);
				}
				return jjMoveStringLiteralDfa5_0(active0, 0L, active1,
													0x1000000000020000L, active2,
													0L);
			case 114:
				if ( (active0 & 0x200000000000L) != 0L) {
					return jjStartNfaWithStates_0(4, 45, 52);
				}
				return jjMoveStringLiteralDfa5_0(active0, 0x14014000000L,
													active1, 0x10000L, active2, 0L);
			case 115:
				return jjMoveStringLiteralDfa5_0(active0, 0x300000040000000L,
													active1, 0L, active2, 0L);
			case 116:
				if ( (active0 & 0x10000000000000L) != 0L) {
					return jjStartNfaWithStates_0(4, 52, 52);
				} else if ( (active1 & 0x10L) != 0L) {
					return jjStartNfaWithStates_0(4, 68, 52);
				} else if ( (active1 & 0x2000000000L) != 0L) {
					return jjStartNfaWithStates_0(4, 101, 52);
				}
				return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L,
													active1, 0x8000000000000000L,
													active2, 0L);
			case 117:
				return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L,
													active1, 0L, active2, 0L);
			case 121:
				if ( (active0 & 0x4000000000000L) != 0L) {
					return jjStartNfaWithStates_0(4, 50, 52);
				} else if ( (active0 & 0x80000000000000L) != 0L) {
					return jjStartNfaWithStates_0(4, 55, 52);
				}
				break;
			default:
				break;
		}
		return jjStartNfa_0(3, active0, active1, active2);
	}

	static private final int jjMoveStringLiteralDfa5_0(long old0, long active0,
																long old1, long active1,
																long old2, long active2) {
		if ( ( (active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L) {
			return jjStartNfa_0(3, old0, old1, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(4, active0, active1, active2);
			return 5;
		}
		switch (curChar) {
			case 65:
				return jjMoveStringLiteralDfa6_0(active0, 0L, active1,
													0x8000000000000L, active2, 0L);
			case 69:
				return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L,
													active2, 0x18000L);
			case 73:
				return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L,
													active2, 0x400L);
			case 78:
				if ( (active2 & 0x4000L) != 0L) {
					return jjStopAtPos(5, 142);
				}
				break;
			case 83:
				return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L,
													active2, 0x1800L);
			case 97:
				if ( (active0 & 0x4000L) != 0L) {
					return jjStartNfaWithStates_0(5, 14, 52);
				} else if ( (active2 & 0x80L) != 0L) {
					return jjStartNfaWithStates_0(5, 135, 52);
				}
				return jjMoveStringLiteralDfa6_0(active0, 0L, active1,
													0x1000000000400000L, active2,
													0x100L);
			case 98:
				return jjMoveStringLiteralDfa6_0(active0, 0x400000000L, active1,
													0x100000000020L, active2, 0x2L);
			case 100:
				return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L,
													active1, 0L, active2, 0L);
			case 101:
				if ( (active0 & 0x20000000L) != 0L) {
					return jjStartNfaWithStates_0(5, 29, 52);
				} else if ( (active0 & 0x200000000L) != 0L) {
					return jjStartNfaWithStates_0(5, 33, 52);
				} else if ( (active0 & 0x800000000000L) != 0L) {
					return jjStartNfaWithStates_0(5, 47, 52);
				}
				return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L,
													active1, 0x1000000000000L,
													active2, 0x8L);
			case 102:
				return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L,
													active1, 0L, active2, 0L);
			case 105:
				return jjMoveStringLiteralDfa6_0(active0, 0L, active1,
													0x8000000000000000L, active2,
													0L);
			case 108:
				if ( (active1 & 0x800000L) != 0L) {
					return jjStartNfaWithStates_0(5, 87, 52);
				}
				return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L,
													active1, 0L, active2, 0L);
			case 110:
				if ( (active0 & 0x10000000000L) != 0L) {
					return jjStartNfaWithStates_0(5, 40, 52);
				}
				return jjMoveStringLiteralDfa6_0(active0, 0x2004000000000L,
													active1, 0x2480000000004L,
													active2, 0x10L);
			case 111:
				return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1,
													0L, active2, 0L);
			case 112:
				return jjMoveStringLiteralDfa6_0(active0, 0x40000000L, active1,
													0L, active2, 0L);
			case 114:
				return jjMoveStringLiteralDfa6_0(active0, 0L, active1,
													0x2800000000000000L, active2,
													0L);
			case 115:
				return jjMoveStringLiteralDfa6_0(active0, 0x8000L, active1,
													0x10000L, active2, 0x4L);
			case 116:
				if ( (active0 & 0x40000L) != 0L) {
					return jjStartNfaWithStates_0(5, 18, 52);
				} else if ( (active0 & 0x10000000L) != 0L) {
					return jjStartNfaWithStates_0(5, 28, 52);
				} else if ( (active1 & 0x20000L) != 0L) {
					return jjStartNfaWithStates_0(5, 81, 52);
				} else if ( (active1 & 0x800000000000L) != 0L) {
					return jjStartNfaWithStates_0(5, 111, 52);
				}
				return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L,
													active1, 0L, active2, 0L);
			case 119:
				return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L,
													active1, 0L, active2, 0L);
			case 120:
				return jjMoveStringLiteralDfa6_0(active0, 0L, active1,
													0x1000000L, active2, 0L);
			case 121:
				if ( (active0 & 0x4000000L) != 0L) {
					return jjStartNfaWithStates_0(5, 26, 52);
				}
				break;
			default:
				break;
		}
		return jjStartNfa_0(4, active0, active1, active2);
	}

	static private final int jjMoveStringLiteralDfa6_0(long old0, long active0,
																long old1, long active1,
																long old2, long active2) {
		if ( ( (active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L) {
			return jjStartNfa_0(4, old0, old1, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(5, active0, active1, active2);
			return 6;
		}
		switch (curChar) {
			case 32:
				return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L,
													active2, 0x1800L);
			case 75:
				return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L,
													active2, 0x400L);
			case 78:
				if ( (active2 & 0x8000L) != 0L) {
					return jjStartNfaWithStates_0(6, 143, 52);
				}
				break;
			case 84:
				return jjMoveStringLiteralDfa7_0(active0, 0L, active1,
													0x8000000000000L, active2,
													0x10000L);
			case 97:
				return jjMoveStringLiteralDfa7_0(active0, 0x4040000000L,
													active1, 0L, active2, 0L);
			case 99:
				return jjMoveStringLiteralDfa7_0(active0, 0L, active1,
													0x1000000000000004L, active2,
													0L);
			case 100:
				return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L,
													active1, 0x480000000000L,
													active2, 0L);
			case 101:
				if ( (active1 & 0x800000000000000L) != 0L) {
					return jjStartNfaWithStates_0(6, 123, 52);
				}
				return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000L,
													active2, 0L);
			case 105:
				return jjMoveStringLiteralDfa7_0(active0, 0x321000000008000L,
													active1, 0L, active2, 0L);
			case 108:
				return jjMoveStringLiteralDfa7_0(active0, 0x400000000L, active1,
													0x20L, active2, 0x2L);
			case 110:
				if ( (active0 & 0x8000000L) != 0L) {
					return jjStartNfaWithStates_0(6, 27, 52);
				}
				return jjMoveStringLiteralDfa7_0(active0, 0L, active1,
													0x1000000000000L, active2,
													0x8L);
			case 111:
				return jjMoveStringLiteralDfa7_0(active0, 0L, active1,
													0x8000000000000000L, active2,
													0L);
			case 115:
				return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L,
													active1, 0L, active2, 0x4L);
			case 116:
				if ( (active0 & 0x400000000000000L) != 0L) {
					return jjStartNfaWithStates_0(6, 58, 52);
				} else if ( (active1 & 0x1000000L) != 0L) {
					return jjStartNfaWithStates_0(6, 88, 52);
				} else if ( (active1 & 0x2000000000000L) != 0L) {
					return jjStartNfaWithStates_0(6, 113, 52);
				} else if ( (active2 & 0x10L) != 0L) {
					return jjStartNfaWithStates_0(6, 132, 52);
				}
				return jjMoveStringLiteralDfa7_0(active0, 0L, active1,
													0x400000L, active2, 0x100L);
			case 117:
				return jjMoveStringLiteralDfa7_0(active0, 0L, active1,
													0x100000000000L, active2, 0L);
			case 118:
				return jjMoveStringLiteralDfa7_0(active0, 0L, active1,
													0x2000000000000000L, active2,
													0L);
			default:
				break;
		}
		return jjStartNfa_0(5, active0, active1, active2);
	}

	static private final int jjMoveStringLiteralDfa7_0(long old0, long active0,
																long old1, long active1,
																long old2, long active2) {
		if ( ( (active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L) {
			return jjStartNfa_0(5, old0, old1, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(6, active0, active1, active2);
			return 7;
		}
		switch (curChar) {
			case 65:
				return jjMoveStringLiteralDfa8_0(active0, 0L, active1,
													0x8000000000000L, active2, 0L);
			case 69:
				if ( (active2 & 0x400L) != 0L) {
					return jjStopAtPos(7, 138);
				}
				break;
			case 76:
				return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L,
													active2, 0x800L);
			case 78:
				return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L,
													active2, 0x1000L);
			case 87:
				return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L,
													active2, 0x10000L);
			case 97:
				return jjMoveStringLiteralDfa8_0(active0, 0L, active1,
													0x480000000000L, active2, 0L);
			case 99:
				return jjMoveStringLiteralDfa8_0(active0, 0x40000000L, active1,
													0x10000L, active2, 0L);
			case 101:
				if ( (active0 & 0x400000000L) != 0L) {
					return jjStartNfaWithStates_0(7, 34, 52);
				} else if ( (active1 & 0x4L) != 0L) {
					return jjStartNfaWithStates_0(7, 66, 52);
				} else if ( (active1 & 0x20L) != 0L) {
					return jjStartNfaWithStates_0(7, 69, 52);
				} else if ( (active1 & 0x400000L) != 0L) {
					return jjStartNfaWithStates_0(7, 86, 52);
				} else if ( (active1 & 0x1000000000000000L) != 0L) {
					return jjStartNfaWithStates_0(7, 124, 52);
				} else if ( (active1 & 0x2000000000000000L) != 0L) {
					return jjStartNfaWithStates_0(7, 125, 52);
				} else if ( (active2 & 0x2L) != 0L) {
					return jjStartNfaWithStates_0(7, 129, 52);
				}
				return jjMoveStringLiteralDfa8_0(active0, 0x100000000000000L,
													active1, 0L, active2, 0L);
			case 105:
				return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000L,
													active1, 0L, active2, 0x104L);
			case 108:
				if ( (active0 & 0x4000000000L) != 0L) {
					return jjStartNfaWithStates_0(7, 38, 52);
				}
				break;
			case 110:
				if ( (active1 & 0x8000000000000000L) != 0L) {
					return jjStartNfaWithStates_0(7, 127, 52);
				}
				return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000L,
													active1, 0L, active2, 0L);
			case 111:
				return jjMoveStringLiteralDfa8_0(active0, 0x20000000008000L,
													active1, 0L, active2, 0L);
			case 116:
				if ( (active0 & 0x8000000000000L) != 0L) {
					return jjStartNfaWithStates_0(7, 51, 52);
				} else if ( (active1 & 0x1000000000000L) != 0L) {
					jjmatchedKind = 112;
					jjmatchedPos = 7;
				}
				return jjMoveStringLiteralDfa8_0(active0, 0x200000000000000L,
													active1, 0x100000000000L,
													active2, 0x8L);
			default:
				break;
		}
		return jjStartNfa_0(6, active0, active1, active2);
	}

	static private final int jjMoveStringLiteralDfa8_0(long old0, long active0,
																long old1, long active1,
																long old2, long active2) {
		if ( ( (active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L) {
			return jjStartNfa_0(6, old0, old1, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(7, active0, active1, active2);
			return 8;
		}
		switch (curChar) {
			case 45:
				return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L,
													active2, 0x8L);
			case 69:
				return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L,
													active2, 0x10000L);
			case 73:
				return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L,
													active2, 0x800L);
			case 79:
				return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L,
													active2, 0x1000L);
			case 91:
				if ( (active1 & 0x8000000000000L) != 0L) {
					return jjStopAtPos(8, 115);
				}
				break;
			case 101:
				if ( (active0 & 0x40000000L) != 0L) {
					return jjStartNfaWithStates_0(8, 30, 52);
				} else if ( (active1 & 0x100000000000L) != 0L) {
					return jjStartNfaWithStates_0(8, 108, 52);
				}
				break;
			case 103:
				if ( (active0 & 0x1000000000000L) != 0L) {
					return jjStartNfaWithStates_0(8, 48, 52);
				}
				break;
			case 105:
				return jjMoveStringLiteralDfa9_0(active0, 0x200000000000000L,
													active1, 0L, active2, 0L);
			case 110:
				if ( (active0 & 0x8000L) != 0L) {
					return jjStartNfaWithStates_0(8, 15, 52);
				} else if ( (active0 & 0x20000000000000L) != 0L) {
					return jjStartNfaWithStates_0(8, 53, 52);
				}
				return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000L,
													active1, 0x480000000000L,
													active2, 0x4L);
			case 111:
				return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L,
													active2, 0x100L);
			case 115:
				if ( (active0 & 0x100000000000000L) != 0L) {
					return jjStartNfaWithStates_0(8, 56, 52);
				}
				break;
			case 116:
				if ( (active1 & 0x10000L) != 0L) {
					return jjStartNfaWithStates_0(8, 80, 52);
				}
				break;
			default:
				break;
		}
		return jjStartNfa_0(7, active0, active1, active2);
	}

	static private final int jjMoveStringLiteralDfa9_0(long old0, long active0,
																long old1, long active1,
																long old2, long active2) {
		if ( ( (active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L) {
			return jjStartNfa_0(7, old0, old1, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(8, active0, active1, active2);
			return 9;
		}
		switch (curChar) {
			case 69:
				return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L,
														active2, 0x10000L);
			case 75:
				return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L,
														active2, 0x800L);
			case 84:
				return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L,
														active2, 0x1000L);
			case 99:
				return jjMoveStringLiteralDfa10_0(active0, 0x200000000000000L,
														active1, 0L, active2, 0L);
			case 103:
				if ( (active0 & 0x2000000000000L) != 0L) {
					return jjStartNfaWithStates_0(9, 49, 52);
				}
				return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L,
														active2, 0x4L);
			case 110:
				if ( (active2 & 0x100L) != 0L) {
					return jjStartNfaWithStates_0(9, 136, 52);
				}
				return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L,
														active2, 0x8L);
			case 116:
				if ( (active1 & 0x80000000000L) != 0L) {
					jjmatchedKind = 107;
					jjmatchedPos = 9;
				}
				return jjMoveStringLiteralDfa10_0(active0, 0L, active1,
														0x400000000000L, active2, 0L);
			default:
				break;
		}
		return jjStartNfa_0(8, active0, active1, active2);
	}

	static private final int jjMoveStringLiteralDfa10_0(long old0, long active0,
														long old1, long active1,
														long old2, long active2) {
		if ( ( (active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L) {
			return jjStartNfa_0(8, old0, old1, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(9, active0, active1, active2);
			return 10;
		}
		switch (curChar) {
			case 32:
				return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L,
														active2, 0x1000L);
			case 45:
				return jjMoveStringLiteralDfa11_0(active0, 0L, active1,
														0x400000000000L, active2,
														0x4L);
			case 69:
				if ( (active2 & 0x800L) != 0L) {
					return jjStopAtPos(10, 139);
				}
				break;
			case 78:
				if ( (active2 & 0x10000L) != 0L) {
					return jjStopAtPos(10, 144);
				}
				break;
			case 104:
				if ( (active0 & 0x200000000000000L) != 0L) {
					return jjStartNfaWithStates_0(10, 57, 52);
				}
				break;
			case 111:
				return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L,
														active2, 0x8L);
			default:
				break;
		}
		return jjStartNfa_0(9, active0, active1, active2);
	}

	static private final int jjMoveStringLiteralDfa11_0(long old0, long active0,
														long old1, long active1,
														long old2, long active2) {
		if ( ( (active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L) {
			return jjStartNfa_0(9, old0, old1, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(10, 0L, active1, active2);
			return 11;
		}
		switch (curChar) {
			case 76:
				return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0x1000L);
			case 100:
				return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0x8L);
			case 105:
				return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0x4L);
			case 111:
				return jjMoveStringLiteralDfa12_0(active1, 0x400000000000L,
														active2, 0L);
			default:
				break;
		}
		return jjStartNfa_0(10, 0L, active1, active2);
	}

	static private final int jjMoveStringLiteralDfa12_0(long old1, long active1,
														long old2, long active2) {
		if ( ( (active1 &= old1) | (active2 &= old2)) == 0L) {
			return jjStartNfa_0(10, 0L, old1, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(11, 0L, active1, active2);
			return 12;
		}
		switch (curChar) {
			case 73:
				return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x1000L);
			case 101:
				if ( (active2 & 0x8L) != 0L) {
					return jjStartNfaWithStates_0(12, 131, 1);
				}
				break;
			case 110:
				return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x4L);
			case 114:
				return jjMoveStringLiteralDfa13_0(active1, 0x400000000000L,
														active2, 0L);
			default:
				break;
		}
		return jjStartNfa_0(11, 0L, active1, active2);
	}

	static private final int jjMoveStringLiteralDfa13_0(long old1, long active1,
														long old2, long active2) {
		if ( ( (active1 &= old1) | (active2 &= old2)) == 0L) {
			return jjStartNfa_0(11, 0L, old1, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(12, 0L, active1, active2);
			return 13;
		}
		switch (curChar) {
			case 45:
				return jjMoveStringLiteralDfa14_0(active1, 0x400000000000L,
														active2, 0L);
			case 75:
				return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x1000L);
			case 115:
				return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x4L);
			default:
				break;
		}
		return jjStartNfa_0(12, 0L, active1, active2);
	}

	static private final int jjMoveStringLiteralDfa14_0(long old1, long active1,
														long old2, long active2) {
		if ( ( (active1 &= old1) | (active2 &= old2)) == 0L) {
			return jjStartNfa_0(12, 0L, old1, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(13, 0L, active1, active2);
			return 14;
		}
		switch (curChar) {
			case 69:
				if ( (active2 & 0x1000L) != 0L) {
					return jjStopAtPos(14, 140);
				}
				break;
			case 115:
				return jjMoveStringLiteralDfa15_0(active1, 0x400000000000L,
														active2, 0L);
			case 116:
				return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x4L);
			default:
				break;
		}
		return jjStartNfa_0(13, 0L, active1, active2);
	}

	static private final int jjMoveStringLiteralDfa15_0(long old1, long active1,
														long old2, long active2) {
		if ( ( (active1 &= old1) | (active2 &= old2)) == 0L) {
			return jjStartNfa_0(13, 0L, old1, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(14, 0L, active1, active2);
			return 15;
		}
		switch (curChar) {
			case 101:
				return jjMoveStringLiteralDfa16_0(active1, 0x400000000000L,
														active2, 0L);
			case 114:
				return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x4L);
			default:
				break;
		}
		return jjStartNfa_0(14, 0L, active1, active2);
	}

	static private final int jjMoveStringLiteralDfa16_0(long old1, long active1,
														long old2, long active2) {
		if ( ( (active1 &= old1) | (active2 &= old2)) == 0L) {
			return jjStartNfa_0(14, 0L, old1, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(15, 0L, active1, active2);
			return 16;
		}
		switch (curChar) {
			case 108:
				return jjMoveStringLiteralDfa17_0(active1, 0x400000000000L,
														active2, 0L);
			case 117:
				return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x4L);
			default:
				break;
		}
		return jjStartNfa_0(15, 0L, active1, active2);
	}

	static private final int jjMoveStringLiteralDfa17_0(long old1, long active1,
														long old2, long active2) {
		if ( ( (active1 &= old1) | (active2 &= old2)) == 0L) {
			return jjStartNfa_0(15, 0L, old1, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(16, 0L, active1, active2);
			return 17;
		}
		switch (curChar) {
			case 99:
				return jjMoveStringLiteralDfa18_0(active1, 0L, active2, 0x4L);
			case 102:
				if ( (active1 & 0x400000000000L) != 0L) {
					return jjStartNfaWithStates_0(17, 110, 1);
				}
				break;
			default:
				break;
		}
		return jjStartNfa_0(16, 0L, active1, active2);
	}

	static private final int jjMoveStringLiteralDfa18_0(long old1, long active1,
														long old2, long active2) {
		if ( ( (active1 &= old1) | (active2 &= old2)) == 0L) {
			return jjStartNfa_0(16, 0L, old1, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(17, 0L, 0L, active2);
			return 18;
		}
		switch (curChar) {
			case 116:
				return jjMoveStringLiteralDfa19_0(active2, 0x4L);
			default:
				break;
		}
		return jjStartNfa_0(17, 0L, 0L, active2);
	}

	static private final int jjMoveStringLiteralDfa19_0(long old2, long active2) {
		if ( ( (active2 &= old2)) == 0L) {
			return jjStartNfa_0(17, 0L, 0L, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(18, 0L, 0L, active2);
			return 19;
		}
		switch (curChar) {
			case 105:
				return jjMoveStringLiteralDfa20_0(active2, 0x4L);
			default:
				break;
		}
		return jjStartNfa_0(18, 0L, 0L, active2);
	}

	static private final int jjMoveStringLiteralDfa20_0(long old2, long active2) {
		if ( ( (active2 &= old2)) == 0L) {
			return jjStartNfa_0(18, 0L, 0L, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(19, 0L, 0L, active2);
			return 20;
		}
		switch (curChar) {
			case 111:
				return jjMoveStringLiteralDfa21_0(active2, 0x4L);
			default:
				break;
		}
		return jjStartNfa_0(19, 0L, 0L, active2);
	}

	static private final int jjMoveStringLiteralDfa21_0(long old2, long active2) {
		if ( ( (active2 &= old2)) == 0L) {
			return jjStartNfa_0(19, 0L, 0L, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(20, 0L, 0L, active2);
			return 21;
		}
		switch (curChar) {
			case 110:
				if ( (active2 & 0x4L) != 0L) {
					return jjStartNfaWithStates_0(21, 130, 1);
				}
				break;
			default:
				break;
		}
		return jjStartNfa_0(20, 0L, 0L, active2);
	}

	static private final void jjCheckNAdd(int state) {
		if (jjrounds[state] != jjround) {
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}

	static private final void jjAddStates(int start, int end) {
		do {
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		} while (start++ != end);
	}

	static private final void jjCheckNAddTwoStates(int state1, int state2) {
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}

	static private final void jjCheckNAddStates(int start, int end) {
		do {
			jjCheckNAdd(jjnextStates[start]);
		} while (start++ != end);
	}

	static private final void jjCheckNAddStates(int start) {
		jjCheckNAdd(jjnextStates[start]);
		jjCheckNAdd(jjnextStates[start + 1]);
	}

	static final long[] jjbitVec0 = {
				0x0L, 0xffffffffffffc000L, 0xfffff0007fffffffL, 0x7fffffL
	};
	static final long[] jjbitVec2 = {
				0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
	};
	static final long[] jjbitVec3 = {
				0x7ff3ffffffffffffL, 0x7ffffffffffffdfeL, 0xffffffffffffffffL,
				0xfc31ffffffffe00fL
	};
	static final long[] jjbitVec4 = {
				0xffffffL, 0xffffffffffff0000L, 0xf80001ffffffffffL, 0x3L
	};
	static final long[] jjbitVec5 = {
				0x0L, 0x0L, 0xfffffffbffffd740L, 0xffffd547f7fffL
	};
	static final long[] jjbitVec6 = {
				0xffffffffffffdffeL, 0xffffffffdffeffffL, 0xffffffffffff0003L,
				0x33fcfffffff199fL
	};
	static final long[] jjbitVec7 = {
				0xfffe000000000000L, 0xfffffffe027fffffL, 0x7fL, 0x707ffffff0000L
	};
	static final long[] jjbitVec8 = {
				0x7fffffe00000000L, 0xfffe0000000007feL, 0x7cffffffffffffffL,
				0x60002f7fffL
	};
	static final long[] jjbitVec9 = {
				0x23ffffffffffffe0L, 0x3ff000000L, 0x3c5fdfffff99fe0L, 0x30003b0000000L
	};
	static final long[] jjbitVec10 = {
				0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L,
				0x100000000L
	};
	static final long[] jjbitVec11 = {
				0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
	};
	static final long[] jjbitVec12 = {
				0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
	};
	static final long[] jjbitVec13 = {
				0x3fffdfffffddfe0L, 0x300000000L, 0x0L, 0x0L
	};
	static final long[] jjbitVec14 = {
				0xd7ffffffffffeL, 0x3fL, 0x200d6caefef02596L, 0x1fL
	};
	static final long[] jjbitVec15 = {
				0x0L, 0x3fffffffeffL, 0x0L, 0x0L
	};
	static final long[] jjbitVec16 = {
				0x0L, 0x0L, 0xffffffff00000000L, 0x7fffffffff003fL
	};
	static final long[] jjbitVec17 = {
				0x500000000007daedL, 0x2c62ab82315001L, 0xf580c90040000000L,
				0x201080000000007L
	};
	static final long[] jjbitVec18 = {
				0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL,
				0x3ffffffffffffffL
	};
	static final long[] jjbitVec19 = {
				0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL,
				0x1fdc1fff0fcf1fdcL
	};
	static final long[] jjbitVec20 = {
				0x4c4000000000L, 0x0L, 0x7L, 0x0L
	};
	static final long[] jjbitVec21 = {
				0x3fe00000080L, 0xfffffffffffffffeL, 0xfffffffe001fffffL,
				0x7ffffffffffffffL
	};
	static final long[] jjbitVec22 = {
				0x1fffffffffe0L, 0x0L, 0x0L, 0x0L
	};
	static final long[] jjbitVec23 = {
				0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
	};
	static final long[] jjbitVec24 = {
				0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
	};
	static final long[] jjbitVec25 = {
				0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
	};
	static final long[] jjbitVec26 = {
				0xffffffL, 0xffffffffffff0000L, 0xf80001ffffffffffL, 0x30003L
	};
	static final long[] jjbitVec27 = {
				0xffffffffffffffffL, 0x30000003fL, 0xfffffffbffffd7c0L,
				0xffffd547f7fffL
	};
	static final long[] jjbitVec28 = {
				0xffffffffffffdffeL, 0xffffffffdffeffffL, 0xffffffffffff007bL,
				0x33fcfffffff199fL
	};
	static final long[] jjbitVec29 = {
				0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe007fL,
				0x707ffffff0016L
	};
	static final long[] jjbitVec30 = {
				0x7fffffe00000000L, 0xffff03ff0007ffffL, 0x7cffffffffffffffL,
				0x3ff3dffffef7fffL
	};
	static final long[] jjbitVec31 = {
				0xf3ffffffffffffeeL, 0xffcfff1e3fffL, 0xd3c5fdfffff99feeL,
				0x3ffcfb080399fL
	};
	static final long[] jjbitVec32 = {
				0xd36dfdfffff987e4L, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL,
				0xffc100003bbfL
	};
	static final long[] jjbitVec33 = {
				0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL,
				0xff8000803dc7L
	};
	static final long[] jjbitVec34 = {
				0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL,
				0xffc340603ddfL
	};
	static final long[] jjbitVec35 = {
				0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x0L, 0x0L
	};
	static final long[] jjbitVec36 = {
				0x7ff7ffffffffffeL, 0x3ff7fffL, 0x3bff6caefef02596L, 0x3ff3f5fL
	};
	static final long[] jjbitVec37 = {
				0xc2a003ff03000000L, 0xfffe03fffffffeffL, 0x2fe3ffffebf0fdfL, 0x0L
	};
	static final long[] jjbitVec38 = {
				0x0L, 0x0L, 0x0L, 0x21fff0000L
	};
	static final long[] jjbitVec39 = {
				0x3efffe000000a0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL,
				0x77ffffffffffffffL
	};
	static final long[] jjbitVec40 = {
				0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL,
				0x7fffffff00ffffffL
	};
	static final long[] jjbitVec41 = {
				0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
	};
	static final long[] jjbitVec42 = {
				0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL,
				0x3fffffffffffffffL
	};
	static final long[] jjbitVec43 = {
				0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL,
				0xffffffffffffffffL
	};
	static private final int jjMoveNfa_0(int startState, int curPos) {
		int[] nextStates;
		int startsAt = 0;
		jjnewStateCnt = 48;
		int i = 1;
		jjstateSet[0] = startState;
		int j, kind = 0x7fffffff;
		for (; ; ) {
			if (++jjround == 0x7fffffff) {
				ReInitRounds();
			}
			if (curChar < 64) {
				long l = 1L << curChar;
				MatchLoop:do {
					switch (jjstateSet[--i]) {
						case 50:
							if ( (0x3ff000000000000L & l) != 0L) {
								if (kind > 154) {
									kind = 154;
								}
								jjCheckNAdd(17);
							}
							if ( (0x3ff000000000000L & l) != 0L) {
								jjCheckNAddTwoStates(13, 14);
							}
							break;
						case 49:
							if ( (0xffffff7fffffffffL & l) != 0L) {
								jjCheckNAddTwoStates(21, 22);
							} else if (curChar == 39) {
								if (kind > 171) {
									kind = 171;
								}
							}
							if ( (0xffffff7fffffffffL & l) != 0L) {
								jjCheckNAddTwoStates(19, 20);
							} else if (curChar == 39) {
								if (kind > 154) {
									kind = 154;
								}
							}
							break;
						case 48:
							if ( (0x3ff600000000000L & l) != 0L) {
								if (kind > 145) {
									kind = 145;
								}
								jjCheckNAdd(1);
							}
							if ( (0x3ff000000000000L & l) != 0L) {
								if (kind > 169) {
									kind = 169;
								}
								jjCheckNAdd(7);
							}
							if ( (0x3ff000000000000L & l) != 0L) {
								if (kind > 168) {
									kind = 168;
								}
								jjCheckNAddTwoStates(46, 47);
							}
							break;
						case 51:
							if ( (0xfffffffbffffffffL & l) != 0L) {
								jjCheckNAddTwoStates(34, 35);
							} else if (curChar == 34) {
								if (kind > 171) {
									kind = 171;
								}
							}
							if ( (0xfffffffbffffffffL & l) != 0L) {
								jjCheckNAddTwoStates(24, 25);
							} else if (curChar == 34) {
								if (kind > 170) {
									kind = 170;
								}
							}
							if ( (0xfffffffbffffdbffL & l) != 0L) {
								jjCheckNAddStates(0, 2);
							} else if (curChar == 34) {
								if (kind > 154) {
									kind = 154;
								}
							}
							break;
						case 52:
							if ( (0x3ff600000000000L & l) != 0L) {
								if (kind > 145) {
									kind = 145;
								}
								jjCheckNAdd(1);
							}
							if ( (0x3ff000000000000L & l) != 0L) {
								if (kind > 168) {
									kind = 168;
								}
								jjCheckNAddTwoStates(46, 47);
							}
							break;
						case 0:
							if ( (0xffffffff00002600L & l) != 0L) {
								if (kind > 161) {
									kind = 161;
								}
							}
							if ( (0x3ff000000000000L & l) != 0L) {
								if (kind > 154) {
									kind = 154;
								}
								jjCheckNAddStates(3, 9);
							} else if ( (0x100002600L & l) != 0L) {
								if (kind > 153) {
									kind = 153;
								}
							} else if (curChar == 34) {
								jjCheckNAddStates(10, 16);
							} else if (curChar == 39) {
								jjCheckNAddStates(17, 20);
							} else if (curChar == 46) {
								jjCheckNAddTwoStates(13, 17);
							}
							if ( (0x3ff000000000000L & l) != 0L) {
								if (kind > 169) {
									kind = 169;
								}
								jjCheckNAdd(7);
							}
							if ( (0x3fe000000000000L & l) != 0L) {
								if (kind > 162) {
									kind = 162;
								}
								jjCheckNAddTwoStates(5, 6);
							} else if (curChar == 48) {
								if (kind > 162) {
									kind = 162;
								}
								jjCheckNAddStates(21, 23);
							}
							break;
						case 1:
							if ( (0x3ff600000000000L & l) == 0L) {
								break;
							}
							if (kind > 145) {
								kind = 145;
							}
							jjCheckNAdd(1);
							break;
						case 2:
							if ( (0x100002600L & l) != 0L && kind > 153) {
								kind = 153;
							}
							break;
						case 3:
							if ( (0xffffffff00002600L & l) != 0L && kind > 161) {
								kind = 161;
							}
							break;
						case 4:
							if ( (0x3fe000000000000L & l) == 0L) {
								break;
							}
							if (kind > 162) {
								kind = 162;
							}
							jjCheckNAddTwoStates(5, 6);
							break;
						case 5:
							if ( (0x3ff000000000000L & l) == 0L) {
								break;
							}
							if (kind > 162) {
								kind = 162;
							}
							jjCheckNAddTwoStates(5, 6);
							break;
						case 7:
							if ( (0x3ff000000000000L & l) == 0L) {
								break;
							}
							if (kind > 169) {
								kind = 169;
							}
							jjCheckNAdd(7);
							break;
						case 8:
							if (curChar != 48) {
								break;
							}
							if (kind > 162) {
								kind = 162;
							}
							jjCheckNAddStates(21, 23);
							break;
						case 10:
							if ( (0x3ff000000000000L & l) == 0L) {
								break;
							}
							if (kind > 162) {
								kind = 162;
							}
							jjCheckNAddTwoStates(10, 6);
							break;
						case 11:
							if ( (0xff000000000000L & l) == 0L) {
								break;
							}
							if (kind > 162) {
								kind = 162;
							}
							jjCheckNAddTwoStates(11, 6);
							break;
						case 12:
							if (curChar == 46) {
								jjCheckNAddTwoStates(13, 17);
							}
							break;
						case 13:
							if ( (0x3ff000000000000L & l) != 0L) {
								jjCheckNAddTwoStates(13, 14);
							}
							break;
						case 15:
							if ( (0x280000000000L & l) != 0L) {
								jjCheckNAdd(16);
							}
							break;
						case 16:
							if ( (0x3ff000000000000L & l) == 0L) {
								break;
							}
							if (kind > 154) {
								kind = 154;
							}
							jjCheckNAdd(16);
							break;
						case 17:
							if ( (0x3ff000000000000L & l) == 0L) {
								break;
							}
							if (kind > 154) {
								kind = 154;
							}
							jjCheckNAdd(17);
							break;
						case 18:
							if (curChar == 39) {
								jjCheckNAddStates(17, 20);
							}
							break;
						case 19:
							if ( (0xffffff7fffffffffL & l) != 0L) {
								jjCheckNAddTwoStates(19, 20);
							}
							break;
						case 20:
							if (curChar == 39 && kind > 154) {
								kind = 154;
							}
							break;
						case 21:
							if ( (0xffffff7fffffffffL & l) != 0L) {
								jjCheckNAddTwoStates(21, 22);
							}
							break;
						case 22:
							if (curChar == 39 && kind > 171) {
								kind = 171;
							}
							break;
						case 23:
							if (curChar == 34) {
								jjCheckNAddStates(10, 16);
							}
							break;
						case 24:
							if ( (0xfffffffbffffffffL & l) != 0L) {
								jjCheckNAddTwoStates(24, 25);
							}
							break;
						case 25:
							if (curChar == 34 && kind > 154) {
								kind = 154;
							}
							break;
						case 26:
							if ( (0xfffffffbffffdbffL & l) != 0L) {
								jjCheckNAddStates(0, 2);
							}
							break;
						case 28:
							if ( (0x8400000000L & l) != 0L) {
								jjCheckNAddStates(0, 2);
							}
							break;
						case 29:
							if (curChar == 34 && kind > 170) {
								kind = 170;
							}
							break;
						case 30:
							if ( (0xff000000000000L & l) != 0L) {
								jjCheckNAddStates(24, 27);
							}
							break;
						case 31:
							if ( (0xff000000000000L & l) != 0L) {
								jjCheckNAddStates(0, 2);
							}
							break;
						case 32:
							if ( (0xf000000000000L & l) != 0L) {
								jjstateSet[jjnewStateCnt++] = 33;
							}
							break;
						case 33:
							if ( (0xff000000000000L & l) != 0L) {
								jjCheckNAdd(31);
							}
							break;
						case 34:
							if ( (0xfffffffbffffffffL & l) != 0L) {
								jjCheckNAddTwoStates(34, 35);
							}
							break;
						case 35:
							if (curChar == 34 && kind > 171) {
								kind = 171;
							}
							break;
						case 36:
							if ( (0x3ff000000000000L & l) == 0L) {
								break;
							}
							if (kind > 154) {
								kind = 154;
							}
							jjCheckNAddStates(3, 9);
							break;
						case 37:
							if ( (0x3ff000000000000L & l) != 0L) {
								jjCheckNAddStates(28, 30);
							}
							break;
						case 38:
							if (curChar == 46) {
								jjCheckNAddTwoStates(39, 14);
							}
							break;
						case 39:
							if ( (0x3ff000000000000L & l) != 0L) {
								jjCheckNAddTwoStates(39, 14);
							}
							break;
						case 40:
							if ( (0x3ff000000000000L & l) == 0L) {
								break;
							}
							if (kind > 154) {
								kind = 154;
							}
							jjCheckNAdd(40);
							break;
						case 41:
							if ( (0x3ff000000000000L & l) != 0L) {
								jjCheckNAddTwoStates(41, 42);
							}
							break;
						case 42:
							if (curChar != 46) {
								break;
							}
							if (kind > 154) {
								kind = 154;
							}
							jjCheckNAdd(43);
							break;
						case 43:
							if ( (0x3ff000000000000L & l) == 0L) {
								break;
							}
							if (kind > 154) {
								kind = 154;
							}
							jjCheckNAdd(43);
							break;
						case 44:
							if ( (0x3ff000000000000L & l) == 0L) {
								break;
							}
							if (kind > 166) {
								kind = 166;
							}
							jjCheckNAdd(44);
							break;
						case 47:
							if ( (0x3ff000000000000L & l) == 0L) {
								break;
							}
							if (kind > 168) {
								kind = 168;
							}
							jjCheckNAddTwoStates(46, 47);
							break;
						default:
							break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				MatchLoop:do {
					switch (jjstateSet[--i]) {
						case 49:
							jjCheckNAddTwoStates(21, 22);
							jjCheckNAddTwoStates(19, 20);
							break;
						case 48:
							if ( (0x7fffffe87fffffeL & l) != 0L) {
								if (kind > 168) {
									kind = 168;
								}
								jjCheckNAddTwoStates(46, 47);
							}
							if ( (0x7fffffe87fffffeL & l) != 0L) {
								if (kind > 145) {
									kind = 145;
								}
								jjCheckNAdd(1);
							}
							if ( (0x7e0000007eL & l) != 0L) {
								if (kind > 169) {
									kind = 169;
								}
								jjCheckNAdd(7);
							}
							break;
						case 51:
							jjCheckNAddTwoStates(34, 35);
							jjCheckNAddTwoStates(24, 25);
							if ( (0xffffffffefffffffL & l) != 0L) {
								jjCheckNAddStates(0, 2);
							} else if (curChar == 92) {
								jjAddStates(31, 33);
							}
							break;
						case 52:
							if ( (0x7fffffe87fffffeL & l) != 0L) {
								if (kind > 168) {
									kind = 168;
								}
								jjCheckNAddTwoStates(46, 47);
							}
							if ( (0x7fffffe87fffffeL & l) != 0L) {
								if (kind > 145) {
									kind = 145;
								}
								jjCheckNAdd(1);
							}
							break;
						case 0:
							if (kind > 161) {
								kind = 161;
							}
							if ( (0x7fffffe87fffffeL & l) != 0L) {
								if (kind > 167) {
									kind = 167;
								}
								jjCheckNAddTwoStates(46, 47);
							}
							if ( (0x7fffffe87fffffeL & l) != 0L) {
								if (kind > 145) {
									kind = 145;
								}
								jjCheckNAdd(1);
							}
							if ( (0x7e0000007eL & l) != 0L) {
								if (kind > 169) {
									kind = 169;
								}
								jjCheckNAdd(7);
							}
							break;
						case 1:
							if ( (0x7fffffe87fffffeL & l) == 0L) {
								break;
							}
							if (kind > 145) {
								kind = 145;
							}
							jjCheckNAdd(1);
							break;
						case 3:
							if (kind > 161) {
								kind = 161;
							}
							break;
						case 6:
							if ( (0x100000001000L & l) != 0L && kind > 162) {
								kind = 162;
							}
							break;
						case 7:
							if ( (0x7e0000007eL & l) == 0L) {
								break;
							}
							if (kind > 169) {
								kind = 169;
							}
							jjCheckNAdd(7);
							break;
						case 9:
							if ( (0x100000001000000L & l) != 0L) {
								jjCheckNAdd(10);
							}
							break;
						case 10:
							if ( (0x7e0000007eL & l) == 0L) {
								break;
							}
							if (kind > 162) {
								kind = 162;
							}
							jjCheckNAddTwoStates(10, 6);
							break;
						case 14:
							if ( (0x2000000020L & l) != 0L) {
								jjAddStates(34, 35);
							}
							break;
						case 19:
							jjCheckNAddTwoStates(19, 20);
							break;
						case 21:
							jjCheckNAddTwoStates(21, 22);
							break;
						case 24:
							jjCheckNAddTwoStates(24, 25);
							break;
						case 26:
							if ( (0xffffffffefffffffL & l) != 0L) {
								jjCheckNAddStates(0, 2);
							}
							break;
						case 27:
							if (curChar == 92) {
								jjAddStates(31, 33);
							}
							break;
						case 28:
							if ( (0x14404410000000L & l) != 0L) {
								jjCheckNAddStates(0, 2);
							}
							break;
						case 34:
							jjCheckNAddTwoStates(34, 35);
							break;
						case 45:
							if ( (0x7fffffe87fffffeL & l) == 0L) {
								break;
							}
							if (kind > 167) {
								kind = 167;
							}
							jjCheckNAddTwoStates(46, 47);
							break;
						case 46:
							if ( (0x7fffffe87fffffeL & l) == 0L) {
								break;
							}
							if (kind > 168) {
								kind = 168;
							}
							jjCheckNAddTwoStates(46, 47);
							break;
						default:
							break;
					}
				} while (i != startsAt);
			} else {
				int hiByte = (int) (curChar >> 8);
				int i1 = hiByte >> 6;
				long l1 = 1L << (hiByte & 077);
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				MatchLoop:do {
					switch (jjstateSet[--i]) {
						case 49:
							if (jjCanMove_3(hiByte, i1, i2, l1, l2)) {
								jjCheckNAddTwoStates(19, 20);
							}
							if (jjCanMove_3(hiByte, i1, i2, l1, l2)) {
								jjCheckNAddTwoStates(21, 22);
							}
							break;
						case 48:
						case 1:
							if (!jjCanMove_1(hiByte, i1, i2, l1, l2)) {
								break;
							}
							if (kind > 145) {
								kind = 145;
							}
							jjCheckNAdd(1);
							break;
						case 51:
							if (jjCanMove_3(hiByte, i1, i2, l1, l2)) {
								jjCheckNAddTwoStates(24, 25);
							}
							if (jjCanMove_3(hiByte, i1, i2, l1, l2)) {
								jjCheckNAddStates(0, 2);
							}
							if (jjCanMove_3(hiByte, i1, i2, l1, l2)) {
								jjCheckNAddTwoStates(34, 35);
							}
							break;
						case 52:
							if (!jjCanMove_1(hiByte, i1, i2, l1, l2)) {
								break;
							}
							if (kind > 145) {
								kind = 145;
							}
							jjCheckNAdd(1);
							break;
						case 0:
							if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
								if (kind > 145) {
									kind = 145;
								}
								jjCheckNAdd(1);
							}
							if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
								if (kind > 161) {
									kind = 161;
								}
							}
							break;
						case 3:
							if (jjCanMove_2(hiByte, i1, i2, l1, l2) &&
								kind > 161) {
								kind = 161;
							}
							break;
						case 19:
							if (jjCanMove_3(hiByte, i1, i2, l1, l2)) {
								jjCheckNAddTwoStates(19, 20);
							}
							break;
						case 21:
							if (jjCanMove_3(hiByte, i1, i2, l1, l2)) {
								jjCheckNAddTwoStates(21, 22);
							}
							break;
						case 24:
							if (jjCanMove_3(hiByte, i1, i2, l1, l2)) {
								jjCheckNAddTwoStates(24, 25);
							}
							break;
						case 26:
							if (jjCanMove_3(hiByte, i1, i2, l1, l2)) {
								jjCheckNAddStates(0, 2);
							}
							break;
						case 34:
							if (jjCanMove_3(hiByte, i1, i2, l1, l2)) {
								jjCheckNAddTwoStates(34, 35);
							}
							break;
						default:
							break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ( (i = jjnewStateCnt) ==
				(startsAt = 48 - (jjnewStateCnt = startsAt))) {
				return curPos;
			}
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	static final int[] jjnextStates = {
				26, 27, 29, 37, 38, 14, 40, 41, 42, 44, 24, 25, 26, 27, 29, 34,
				35, 19, 20, 21, 22, 9, 11, 6, 26, 27, 31, 29, 37, 38, 14, 28,
				30, 32, 15, 16,
	};
	private static final boolean jjCanMove_0(int hiByte, int i1, int i2,
												long l1, long l2) {
		switch (hiByte) {
			case 0:
				return ( (jjbitVec2[i2] & l2) != 0L);
			case 1:
				return ( (jjbitVec3[i2] & l2) != 0L);
			case 2:
				return ( (jjbitVec4[i2] & l2) != 0L);
			case 3:
				return ( (jjbitVec5[i2] & l2) != 0L);
			case 4:
				return ( (jjbitVec6[i2] & l2) != 0L);
			case 5:
				return ( (jjbitVec7[i2] & l2) != 0L);
			case 6:
				return ( (jjbitVec8[i2] & l2) != 0L);
			case 9:
				return ( (jjbitVec9[i2] & l2) != 0L);
			case 10:
				return ( (jjbitVec10[i2] & l2) != 0L);
			case 11:
				return ( (jjbitVec11[i2] & l2) != 0L);
			case 12:
				return ( (jjbitVec12[i2] & l2) != 0L);
			case 13:
				return ( (jjbitVec13[i2] & l2) != 0L);
			case 14:
				return ( (jjbitVec14[i2] & l2) != 0L);
			case 15:
				return ( (jjbitVec15[i2] & l2) != 0L);
			case 16:
				return ( (jjbitVec16[i2] & l2) != 0L);
			case 17:
				return ( (jjbitVec17[i2] & l2) != 0L);
			case 30:
				return ( (jjbitVec18[i2] & l2) != 0L);
			case 31:
				return ( (jjbitVec19[i2] & l2) != 0L);
			case 33:
				return ( (jjbitVec20[i2] & l2) != 0L);
			case 48:
				return ( (jjbitVec21[i2] & l2) != 0L);
			case 49:
				return ( (jjbitVec22[i2] & l2) != 0L);
			case 159:
				return ( (jjbitVec23[i2] & l2) != 0L);
			case 215:
				return ( (jjbitVec24[i2] & l2) != 0L);
			default:
				if ( (jjbitVec0[i1] & l1) != 0L) {
					return true;
				}
				return false;
		}
	}

	private static final boolean jjCanMove_1(int hiByte, int i1, int i2,
												long l1, long l2) {
		switch (hiByte) {
			case 0:
				return ( (jjbitVec25[i2] & l2) != 0L);
			case 1:
				return ( (jjbitVec3[i2] & l2) != 0L);
			case 2:
				return ( (jjbitVec26[i2] & l2) != 0L);
			case 3:
				return ( (jjbitVec27[i2] & l2) != 0L);
			case 4:
				return ( (jjbitVec28[i2] & l2) != 0L);
			case 5:
				return ( (jjbitVec29[i2] & l2) != 0L);
			case 6:
				return ( (jjbitVec30[i2] & l2) != 0L);
			case 9:
				return ( (jjbitVec31[i2] & l2) != 0L);
			case 10:
				return ( (jjbitVec32[i2] & l2) != 0L);
			case 11:
				return ( (jjbitVec33[i2] & l2) != 0L);
			case 12:
				return ( (jjbitVec34[i2] & l2) != 0L);
			case 13:
				return ( (jjbitVec35[i2] & l2) != 0L);
			case 14:
				return ( (jjbitVec36[i2] & l2) != 0L);
			case 15:
				return ( (jjbitVec37[i2] & l2) != 0L);
			case 16:
				return ( (jjbitVec16[i2] & l2) != 0L);
			case 17:
				return ( (jjbitVec17[i2] & l2) != 0L);
			case 30:
				return ( (jjbitVec18[i2] & l2) != 0L);
			case 31:
				return ( (jjbitVec19[i2] & l2) != 0L);
			case 32:
				return ( (jjbitVec38[i2] & l2) != 0L);
			case 33:
				return ( (jjbitVec20[i2] & l2) != 0L);
			case 48:
				return ( (jjbitVec39[i2] & l2) != 0L);
			case 49:
				return ( (jjbitVec22[i2] & l2) != 0L);
			case 159:
				return ( (jjbitVec23[i2] & l2) != 0L);
			case 215:
				return ( (jjbitVec24[i2] & l2) != 0L);
			default:
				if ( (jjbitVec0[i1] & l1) != 0L) {
					return true;
				}
				return false;
		}
	}

	private static final boolean jjCanMove_2(int hiByte, int i1, int i2,
												long l1, long l2) {
		switch (hiByte) {
			case 0:
				return ( (jjbitVec41[i2] & l2) != 0L);
			case 255:
				return ( (jjbitVec42[i2] & l2) != 0L);
			default:
				if ( (jjbitVec40[i1] & l1) != 0L) {
					return true;
				}
				return false;
		}
	}

	private static final boolean jjCanMove_3(int hiByte, int i1, int i2,
												long l1, long l2) {
		switch (hiByte) {
			case 0:
				return ( (jjbitVec41[i2] & l2) != 0L);
			default:
				if ( (jjbitVec43[i1] & l1) != 0L) {
					return true;
				}
				return false;
		}
	}

	public static final String[] jjstrLiteralImages = {
				"", null, null, null, null, "\46\43", "\170", "\145", "\105", "\50",
				"\51",
				"\73", "\72", "\72\72", "\160\162\141\147\155\141",
				"\145\170\164\145\156\163\151\157\156", "\56", "\154\141\170",
				"\163\164\162\151\143\164", "\163\153\151\160",
				"\164\171\160\145", "\46", "\141\155\160", "\161\165\157\164",
				"\141\160\157\163", "\43",
				"\170\161\165\145\162\171", "\166\145\162\163\151\157\156",
				"\151\155\160\157\162\164",
				"\155\157\144\165\154\145", "\156\141\155\145\163\160\141\143\145",
				"\75", "\141\164",
				"\144\145\146\151\156\145", "\166\141\162\151\141\142\154\145", "\44",
				"\173", "\175",
				"\145\170\164\145\162\156\141\154", "\54", "\162\145\164\165\162\156",
				"\146\157\162", "\151\156", "\154\145\164",
				"\167\150\145\162\145", "\157\162\144\145\162", "\142\171",
				"\163\164\141\142\154\145",
				"\141\163\143\145\156\144\151\156\147",
				"\144\145\163\143\145\156\144\151\156\147", "\145\155\160\164\171",
				"\147\162\145\141\164\145\163\164", "\154\145\141\163\164",
				"\143\157\154\154\141\164\151\157\156",
				"\163\157\155\145", "\145\166\145\162\171",
				"\163\141\164\151\163\146\151\145\163",
				"\164\171\160\145\163\167\151\164\151\143\150",
				"\144\145\146\141\165\154\164", "\143\141\163\145", "\141\163",
				"\151\146",
				"\164\150\145\156", "\145\154\163\145", "\157\162", "\141\156\144",
				"\151\156\163\164\141\156\143\145", "\157\146", "\164\162\145\141\164",
				"\143\141\163\164\141\142\154\145",
				"\143\141\163\164", "\164\157", "\53", "\55", "\52", "\144\151\166",
				"\151\144\151\166",
				"\155\157\144", "\165\156\151\157\156", "\174",
				"\151\156\164\145\162\163\145\143\164",
				"\145\170\143\145\160\164", "\57", "\134", "\133", "\135",
				"\166\141\154\151\144\141\164\145",
				"\147\154\157\142\141\154", "\143\157\156\164\145\170\164", "\41\75",
				"\74", "\74\75", "\76", "\76\75",
				"\145\161", "\156\145", "\154\164", "\154\145", "\147\164", "\147\145",
				"\151\163",
				"\151\163\156\157\164", "\74\74", "\76\76", "\100", "\56\56",
				"\143\150\151\154\144",
				"\144\145\163\143\145\156\144\141\156\164",
				"\141\164\164\162\151\142\165\164\145", "\163\145\154\146",
				"\144\145\163\143\145\156\144\141\156\164\55\157\162\55\163\145\154\146",
				"\160\141\162\145\156\164", "\144\157\143\165\155\145\156\164",
				"\145\154\145\155\145\156\164", "\164\145\170\164",
				"\74\41\133\103\104\101\124\101\133", "\135\135\76",
				"\74\77", "\77\76", "\74\41\55\55", "\55\55\76", "\42", "\47",
				"\144\145\143\154\141\162\145", "\170\155\154\163\160\141\143\145",
				"\160\162\145\163\145\162\166\145",
				"\163\164\162\151\160", "\146\165\156\143\164\151\157\156",
				"\151\164\145\155",
				"\156\151\154\154\141\142\154\145",
				"\160\162\157\143\145\163\163\151\156\147\55\151\156\163\164\162\165\143\164\151\157\156",
				"\144\157\143\165\155\145\156\164\55\156\157\144\145",
				"\143\157\155\155\145\156\164", "\156\157\144\145", "\77",
				"\163\143\150\145\155\141",
				"\166\141\154\151\144\141\164\151\157\156", "\114\111\113\105",
				"\116\117\124\40\114\111\113\105",
				"\123\117\125\116\104\123\40\114\111\113\105",
				"\123\117\125\116\104\123\40\116\117\124\40\114\111\113\105",
				"\111\116",
				"\116\117\124\40\111\116", "\102\105\124\127\105\105\116",
				"\116\117\124\40\102\105\124\127\105\105\116",
				null, null, null, null, null, null, null, null, null, null, null, null, null, null,
				null, null, null, null, null, null, null, null, null, null, null, null, null,
				"\47\47", };
	public static final String[] lexStateNames = {
				"DEFAULT",
	};
	static final long[] jjtoToken = {
				0xffffffffffffffe1L, 0xffffffffffffffffL, 0x1fc60603ffffL,
	};
	static final long[] jjtoSkip = {
				0x1eL, 0x0L, 0x0L,
	};
	static protected SimpleCharStream input_stream;
	static private final int[] jjrounds = new int[48];
	static private final int[] jjstateSet = new int[96];
	static protected char curChar;
	public MatrixQueryParserTokenManager(SimpleCharStream stream) {
		if (input_stream != null) {
			throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.",
									TokenMgrError.STATIC_LEXER_ERROR);
		}
		input_stream = stream;
	}

	public MatrixQueryParserTokenManager(SimpleCharStream stream, int lexState) {
		this(stream);
		SwitchTo(lexState);
	}

	static public void ReInit(SimpleCharStream stream) {
		jjmatchedPos = jjnewStateCnt = 0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}

	static private final void ReInitRounds() {
		int i;
		jjround = 0x80000001;
		for (i = 48; i-- > 0; ) {
			jjrounds[i] = 0x80000000;
		}
	}

	static public void ReInit(SimpleCharStream stream, int lexState) {
		ReInit(stream);
		SwitchTo(lexState);
	}

	static public void SwitchTo(int lexState) {
		if (lexState >= 1 || lexState < 0) {
			throw new TokenMgrError("Error: Ignoring invalid lexical state : " +
									lexState + ". State unchanged.",
									TokenMgrError.INVALID_LEXICAL_STATE);
		} else {
			curLexState = lexState;
		}
	}

	static protected Token jjFillToken() {
		Token t = Token.newToken(jjmatchedKind);
		t.kind = jjmatchedKind;
		String im = jjstrLiteralImages[jjmatchedKind];
		t.image = (im == null) ? input_stream.GetImage() : im;
		t.beginLine = input_stream.getBeginLine();
		t.beginColumn = input_stream.getBeginColumn();
		t.endLine = input_stream.getEndLine();
		t.endColumn = input_stream.getEndColumn();
		return t;
	}

	static int curLexState = 0;
	static int defaultLexState = 0;
	static int jjnewStateCnt;
	static int jjround;
	static int jjmatchedPos;
	static int jjmatchedKind;
	public static Token getNextToken() {
		int kind;
		Token specialToken = null;
		Token matchedToken;
		int curPos = 0;
		EOFLoop:
					for (; ; ) {
			try {
				curChar = input_stream.BeginToken();
			} catch (java.io.IOException e) {
				jjmatchedKind = 0;
				matchedToken = jjFillToken();
				return matchedToken;
			}
			jjmatchedKind = 0x7fffffff;
			jjmatchedPos = 0;
			curPos = jjMoveStringLiteralDfa0_0();
			if (jjmatchedKind != 0x7fffffff) {
				if (jjmatchedPos + 1 < curPos) {
					input_stream.backup(curPos - jjmatchedPos - 1);
				}
				if ( (jjtoToken[jjmatchedKind >> 6] &
							(1L << (jjmatchedKind & 077))) != 0L) {
					matchedToken = jjFillToken();
					return matchedToken;
				} else {
					continue EOFLoop;
				}
			}
			int error_line = input_stream.getEndLine();
			int error_column = input_stream.getEndColumn();
			String error_after = null;
			boolean EOFSeen = false;
			try {
				input_stream.readChar();
				input_stream.backup(1);
			} catch (java.io.IOException e1) {
				EOFSeen = true;
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
				if (curChar == '\n' || curChar == '\r') {
					error_line++;
					error_column = 0;
				} else {
					error_column++;
				}
			}
			if (!EOFSeen) {
				input_stream.backup(1);
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
			}
			throw new TokenMgrError(EOFSeen, curLexState, error_line,
									error_column, error_after, curChar,
									TokenMgrError.LEXICAL_ERROR);
		}
	}
}
