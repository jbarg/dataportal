<?xml version="1.0"?>

<!--
  ANT BUILD FILE FOR SDSC MATRIX PROJECT
  Created by Erik Vandekieft evk@ucsd.edu
  Modified by:
  Reena Mathew rmathew@sdsc.edu
  Allen,
  Arun
-->
<project default="server">

    <property file="build.properties"/>
    <property name="build.dir" value="./"/>
    <property name="parser.dir" value="${build.dir}/parser" />
    <property name="docs.dir" value="${build.dir}/docs" />
    <property name="libs.dir" value="${build.dir}/lib" />
    <property name="webapps.dir" value="${build.dir}/webapps"/>
    <property name="appname" value="matrix"/>
    <property name="webinf.dir" value="${webapps.dir}/${appname}/WEB-INF"/>
    
    <!-- Change this if you want to change where your warfile is written to -->
    <property name="warfile" value="${webapps.dir}/${appname}.war"/>

    <path id="main.classpath">
	<pathelement location="${build.dir}/classes"/>
	<pathelement location="${build.dir}/examples"/>

	<fileset dir="${libs.dir}" includes="*.jar"/> 
	<fileset dir="${libs.dir}/clientLib" includes="*.jar"/>
	<!-- the above could be **.jar too -->
	<fileset dir="${tomcat.dir}/common/lib" includes="*.jar"/>
	<fileset dir="${tomcat.dir}/server/lib" includes="*.jar"/>

    </path>

    <path id="jaxb.classpath">
        <fileset dir="${libs.dir}" includes="*.jar"/>
    </path>

    <path id="clientdocs.classpath">
        <fileset dir="${libs.dir}" includes="*.jar"/>
        <fileset dir="${build.dir}/parser/src" includes="*"/>
        <fileset dir="${build.dir}/src" includes="*" />
    </path>    
    
    <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
        <classpath refid="jaxb.classpath" />
    </taskdef>

    <!-- Removing/creating class directories -->
    
    <target name="clean">
        <delete dir="${build.dir}/classes" />
	<delete dir="${parser.dir}/classes" />
	<delete dir="${webapps.dir}/${appname}"/>
        <delete dir="${docs.dir}/client" />
        <delete file="${docs.dir}/clientdocs.zip" />
        <delete file="${build.dir}/matrixclient.jar" />
	<delete>
	   <fileset dir="${build.dir}/examples" includes="*.class"/>
        </delete>
        <delete dir="${parser.dir}/src" /> 
        <delete file="${webapps.dir}/matrix.war"/>
    </target>
    
    <target name="cleanMatrix">
        <delete dir="${build.dir}/classes" />
		<delete>
		   <fileset dir="${build.dir}/examples" includes="*.class"/>
        </delete>
    </target>

    <target name="prepare">
      <mkdir dir="${build.dir}/classes"/>
    </target>

    <!-- =============== JAXB class generation ============== -->
    <target name="jaxbprepare">
        <mkdir dir="${parser.dir}/src"/>
    </target>

    <target name="jaxb" depends="prepare,jaxbprepare">
        <xjc schema="${parser.dir}/srb.xsd" 
	     target="${parser.dir}/src" 
	     package="edu.sdsc.matrix.srb.parser" />
	
    </target>

    <target name="jaxbcompile" depends="jaxb">
        <!-- compile all of autogenerated jaxb classes. 
	     you must first run the schema task before doing this! (but didn't
	     make that a dependency since the schema task is quite slow)-->
        <javac srcdir="${parser.dir}/src" 
	       destdir="${build.dir}/classes" 
	       debug="on">
	      <classpath refid="jaxb.classpath" />
        </javac>

	<copy todir="${build.dir}/classes/edu/sdsc/matrix/srb/parser" 
              file="${parser.dir}/jaxb.properties" />
    </target>   
    

    <target name="docs" depends="jaxb">
        <mkdir dir="${docs.dir}/parser/api"/>
        <mkdir dir="${parser.dir}/classes"/>
	
        <!-- generate the javadocs from the content classes -->
	<javadoc packagenames="edu.sdsc.matrix.srb.parser"
                 sourcepath="${parser.dir}/src"
                 destdir="${docs.dir}/parser/api"
                 windowtitle="Generated Interfaces for JAXB SRB Parser">
        <classpath refid="jaxb.classpath" />
    	</javadoc>
    
   

        <echo message="Zipping up parser docs..."/>
	<zip destfile="${docs.dir}/parserdocs.zip" basedir="${docs.dir}/parser"
	     update="true"/>

        <javac srcdir="${parser.dir}/src" 
	       destdir="${parser.dir}/classes" 
	       debug="on">
        <classpath refid="jaxb.classpath" />
        </javac>

	<echo message="building parser.jar..." />
	<jar destfile="${parser.dir}/srbparser.jar" 
	     basedir="${parser.dir}/classes" />
    </target>

    <target name="client-docs" depends="jaxb">
        <mkdir dir="${docs.dir}/client/api"/>
        <mkdir dir="${parser.dir}/classes"/>
	
        <!-- generate the javadocs from the content classes -->
	<javadoc packagenames="edu.sdsc.matrix.srb.*"
                 destdir="${docs.dir}/client/api"
                 windowtitle="Matrix Client API"
                 use="true">
        <packageset dir="src" defaultexcludes="yes">
            <include name="**" />
            <exclude name="edu/sdsc/matrix/srb/core/**" />
            <exclude name="edu/sdsc/matrix/srb/operations/**" />
            <exclude name="edu/sdsc/matrix/srb/query/**" />
            <exclude name="edu/sdsc/matrix/srb/util/**" />
            <exclude name="edu/sdsc/matrix/srb/wrappers/**" />
        </packageset>
        <packageset dir="parser/src" defaultexcludes="yes">
            <include name="**" />
        </packageset>        
        <classpath refid="clientdocs.classpath" />
    	</javadoc>

        <echo message="Zipping up client docs..."/>
	<zip destfile="${docs.dir}/clientdocs.zip" basedir="${docs.dir}/client"
	     update="true"/>
    </target>

  <!-- ==================== Compilation ======================== -->

  <!-- the classes in the util directory are supposed to be 
       shared by clients and servers. that's why both the server 
       and client task depend upon it. -->

    <target name="utilcompile" depends="jaxbcompile">
        <javac srcdir="${build.dir}/src"
	       destdir="${build.dir}/classes"
	       debug="on">
	  <classpath refid="main.classpath" />
    	  <include name="edu/sdsc/matrix/srb/util/*.java"/>     	  	 
	</javac>
	
	<!--
		<copy todir="${build.dir}/classes/edu/sdsc/matrix/srb/util" 
              file="${build.dir}/src/edu/sdsc/matrix/srb/util/matrix.properties" />
	-->
    </target>

    <target name="server" depends="utilcompile">
        <javac srcdir="${build.dir}/src" 
	       destdir="${build.dir}/classes" 
	       debug="on">
            <classpath refid="main.classpath" />
        </javac>

    </target>
    
     <target name="matrixserveronly">
        <javac srcdir="${build.dir}/src" 
	       destdir="${build.dir}/classes" 
	       debug="on">
            <classpath refid="main.classpath" />
        </javac>

    </target>
    

    <target name="client" depends="utilcompile">
        <javac srcdir="${build.dir}/src"
	       destdir="${build.dir}/classes"
	       debug="on">
		  <classpath refid="main.classpath" />    	  
    	  <include name="edu/sdsc/matrix/srb/client/*.java"/> 
        </javac>  
	<javac srcdir="${build.dir}/examples" 
	       destdir="${build.dir}/examples" 
	       debug="on">
            <classpath refid="main.classpath" />           
        </javac>
        <echo message="building matrixclient.jar..." />
	<jar destfile="${build.dir}/matrixclient.jar" 
	     basedir="${build.dir}/classes" />
    </target>
    
    <target name="matrixclientonly">
        <javac srcdir="${build.dir}/examples" 
	       destdir="${build.dir}/examples" 
	       debug="on">
            <classpath refid="main.classpath" />            
        </javac>
    </target>

  <!-- ==================== Create Warfile ======================== -->
  
  <!-- Copy our classes into WEB-INF/classes -->
  <target name="warprepare">
      <mkdir dir="${webinf.dir}"/>
      <mkdir dir="${webinf.dir}/META-INF"/>
      <mkdir dir="${webinf.dir}/classes"/>
      <mkdir dir="${webinf.dir}/lib"/>
  </target>

  <target name="warcopy" depends="warprepare,server">
    <copy todir="${webinf.dir}"
          file="${webapps.dir}/web.xml"/>

	
	<!-- Removed ad Manifest.mf file generated when creating WAR file
    <copy todir="${webinf.dir}/META-INF"
          file="${webapps.dir}/MANIFEST.MF"/>
     -->     

    <copy todir="${webinf.dir}/classes" >
          <fileset dir="${build.dir}/classes"/>          
    </copy>
    
    <copy todir="${webinf.dir}/lib">
          <fileset dir="${libs.dir}" includes="**/*.jar"/>
    </copy>
  </target>

  <!-- Create actual warfile -->
  <target name="war" 
	  depends="warcopy" 
	  description="Creating the WAR file" >
    <jar jarfile="${warfile}"
	 basedir="${webapps.dir}/${appname}" >
      <include name="**"/>
    </jar>
  </target>
   
  <!-- JAVACC Processor -->
  <target name="queryparser">
  <jjtree 
    target="${build.dir}/src/edu/sdsc/matrix/srb/query/MatrixQueryParser.jjt" 
    outputdirectory="${build.dir}/classes"
    javacchome="c:/Applications/Java/javaCC/javacc-3.1" 
    nodeusesparser="true"
	/>
  <javacc 
    target="${build.dir}/src/edu/sdsc/matrix/srb/query/MatrixQueryParser.jj" 
    outputdirectory="${build.dir}/classes"
    javacchome="c:/Applications/Java/javaCC/javacc-3.1" 
    static="true"
	/>
  </target>
  
  <!-- Generate Javadocs for Matrix Server Classes -->
   <target name="server-docs" depends="docs">
   		
   		<path id="server-docs.classpath">
        <fileset dir="${libs.dir}" includes="*.jar"/>
        <fileset dir="${build.dir}/parser/src" includes="*"/>
        <fileset dir="${build.dir}/src" includes="*" />
	    </path>    
   
   
        <mkdir dir="${docs.dir}/server/api"/>       
	
        <!-- generate the javadocs from the content classes -->
        
   
      
	<javadoc packagenames="edu.sdsc.matrix.srb.*"
                 destdir="${docs.dir}/server/api"
                 windowtitle="Matrix Server API"
                 use="true"
                 private="true"
                 author="true"
                 version="true">
        <packageset dir="src" defaultexcludes="yes">
            <include name="**" />
            <exclude name="edu/sdsc/matrix/srb/client/**" />        
        </packageset>
        <packageset dir="parser/src" defaultexcludes="yes">
            <include name="**" />
        </packageset>        
                      
        <classpath refid="server-docs.classpath" />
    </javadoc>      

    </target>
  
  
  
  
  
  
</project>
