<?xml version="1.0" encoding="UTF-8"?>

<xsd:schema targetNamespace="http://www.escience.clrc.ac.uk/schemas/scientific"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:cmd="http://www.escience.clrc.ac.uk/schemas/scientific"
            elementFormDefault="qualified"
            attributeFormDefault="unqualified">

   <xsd:annotation>
      <xsd:documentation xml:lang="en">
         General Scientific Meta-Data Format Schema 
         for eScience Data Portal.
      </xsd:documentation>
   </xsd:annotation>

<!-- maybe the class type definitions should go here -->



<!-- defining the actual elements in the document -->

   <xsd:element name="CLRCMetadata" type="cmd:CLRCMetadataType"/>
  
   <xsd:complexType name="CLRCMetadataType">
      <xsd:sequence>
         <xsd:element ref="cmd:MetadataRecord" minOccurs="0" maxOccurs="unbounded"/>
      </xsd:sequence>
   </xsd:complexType>

   <xsd:element name="MetadataRecord" type="cmd:MetadataRecordType"/>


   <xsd:complexType name="MetadataRecordType">
      <xsd:sequence>
         <xsd:element name="Topic" type="cmd:TopicType" />
         <xsd:element name="Study" type="cmd:StudyType"/>
         <xsd:element name="AccessConditions" type="xsd:string"/>
	 <xsd:element name="RelatedMaterial" type="cmd:RelatedMaterialTypes" minOccurs="0" maxOccurs="unbounded"/>
      </xsd:sequence>
      <xsd:attribute name="metadataID" type="cmd:metadataIDKeyType" use="required"/>
      <xsd:attribute name="facility" type="xsd:string" use="required"/>
   </xsd:complexType>

   <!-- metadataID uniquely identified one record - logicaly it consists of the -->
   <!-- name of the data archive (which has to be unique in the dataportal )    -->
   <!-- and something which identies unique records in the data archive         -->

   <xsd:simpleType name="metadataIDKeyType">
      <xsd:restriction base="xsd:ID">
	 <!-- read: any number of letter and numbers followed by a '-' followed -->
	 <!-- by any sequence of numbers and letters -->
	 <xsd:pattern value="[0-9A-Za-z]*-[0-9A-Za-z]*"/>
     </xsd:restriction>
  </xsd:simpleType>

   
   <xsd:complexType name="TopicType">
      <xsd:sequence>
         <xsd:element name="Keywords" type="cmd:KeywordsType" minOccurs="0" maxOccurs="unbounded" />
	 <xsd:element name="Subjects"    type="cmd:SubjectsType" minOccurs="1" maxOccurs="unbounded" />
      </xsd:sequence>
   </xsd:complexType> 

   <xsd:complexType name="KeywordsType">
      <xsd:sequence>
	 <xsd:element name="Discipline" type="xsd:string"/>
	 <xsd:element name="KeywordSource" type="xsd:string" minOccurs="0"/>
	 <xsd:element name="Keyword" type="xsd:string" />
      </xsd:sequence>
   </xsd:complexType>

   <xsd:complexType name="SubjectsType">
      <xsd:sequence>
	 <xsd:element name="Discipline" type="xsd:string" />
	 <xsd:element name="SubjectSource" type="xsd:string" minOccurs="0"/>
	 <xsd:element name="Subject" type="cmd:SubjectType" />
      </xsd:sequence>
   </xsd:complexType>
   

   <xsd:complexType name="SubjectType">
      <xsd:sequence>
	 <xsd:element name="SubjectName" type="xsd:string"/>
	 <xsd:element name="Subject" type="cmd:SubjectType" minOccurs="0"/>
      </xsd:sequence>
   </xsd:complexType>

         
   
   <xsd:complexType name="StudyType">
      <xsd:sequence>
         <xsd:element name="StudyName"        type="xsd:string"/>
	 <xsd:element name="StudyInstitution"     type="cmd:InstitutionType" minOccurs="0" maxOccurs="unbounded"/>
         <xsd:element name="Investigator"     type="cmd:InvestigatorType" minOccurs="1" maxOccurs="unbounded"/>
         <xsd:element name="StudyInformation" type="cmd:StudyInformationType"/>
         <xsd:element name="Notes"            type="xsd:string" minOccurs="0" maxOccurs="1"/>
	 <!-- sc -->
	 <xsd:element name="Investigation"    type="cmd:InvestigationType" minOccurs="1" maxOccurs="unbounded"/>
      </xsd:sequence>
   </xsd:complexType>

   <xsd:complexType name="InvestigationType">
      <xsd:sequence>
         <xsd:element name="Name" type="xsd:string"/>
	 <!-- removed the cmd: infront of InvestigationTypes and in the definition of the simple type -->
	 <!-- I wonder why one has to done that - the latter is what it xmlspy5 was complaining about -->
	 <xsd:element name="InvestigationType" type="cmd:InvestigationTypes"/>
	 <xsd:element name="Abstract" type="xsd:string"/>
	 <!-- perhaps this should be at dataset and dataobject level also -->
	 <xsd:element name="Resources" type="xsd:string"/>
	 <xsd:element name="DataHolding" type="cmd:DataHoldingType" minOccurs="0"/>
      </xsd:sequence>
      <xsd:attribute name="InvestigationID" type="xsd:ID" use="required"/>
   </xsd:complexType>

   <xsd:simpleType name="InvestigationTypes">
     <xsd:restriction base="xsd:string">
	<xsd:enumeration value="experiment"/>
        <xsd:enumeration value="measurement"/>
	<xsd:enumeration value="simulation"/>
        <xsd:enumeration value="other"/>
     </xsd:restriction>
  </xsd:simpleType>

<!-- detail all the things in StudyType before we start inheriting from it -->
<!-- wonder if it matters -->

   <xsd:complexType name="InstitutionType">
      <xsd:sequence>
<!--     <xsd:element name="Institution" type="xsd:string" minOccurs="0" maxOccurs="1"> -->
<!-- above line is incorrect file would not validate - we have to extend the type   -->
<!-- to add some attributes -->
         <xsd:element name="Name" minOccurs="0" maxOccurs="1">
         <!-- adding attributes to an element -->
            <xsd:complexType>
               <xsd:simpleContent>
                  <xsd:extension base="xsd:string">
                  <!-- the following type should be CDATA but can't seem to -->
                  <!-- find the equivelent in XMLSchema to this DTD construct -->
                     <xsd:attribute name="institutionID" type="xsd:string" use="optional"/>
                     <xsd:attribute name="institutiontype" type="cmd:institutionTypes" use="required"/>
                  </xsd:extension>
               </xsd:simpleContent>
            </xsd:complexType>
         </xsd:element>
	 <xsd:element name="Role" type="xsd:string" minOccurs="0"/>
      </xsd:sequence>
   </xsd:complexType>

<!-- turn the attribute choices into a type -->

  <xsd:simpleType name="institutionTypes">
     <xsd:restriction base="xsd:string">
        <xsd:enumeration value="academic"/>
        <xsd:enumeration value="government"/>
        <xsd:enumeration value="military"/>
        <xsd:enumeration value="commercial"/>
        <xsd:enumeration value="nonprofit"/>
        <xsd:enumeration value="other"/>
     </xsd:restriction>
  </xsd:simpleType>

<!-- example of a list type - not used yet -->
 
   <xsd:simpleType name="institutionsType">
      <xsd:list itemType="cmd:institutionTypes"/>
   </xsd:simpleType>

 
  <!-- started to get into some 'inheritace' now - i.e cmd:PersonType and cmd:InvestigatorType -->

  <xsd:complexType name="PersonType">
     <xsd:sequence>
        <xsd:element name="Name"           type="cmd:NameType"/>
        <xsd:element name="Institution"    type="cmd:InstitutionType"/>
        <xsd:element name="ContactDetails" type="cmd:ContactDetailsType"/>
     </xsd:sequence>
  </xsd:complexType>

  <xsd:simpleType name="TitleTypes">
     <xsd:restriction base="xsd:string">
        <xsd:enumeration value="professor"/>
        <xsd:enumeration value="Professor"/>
        <xsd:enumeration value="Prof"/>
	<xsd:enumeration value="doctor"/>
	<xsd:enumeration value="Doctor"/>
	<xsd:enumeration value="Dr"/>
	<xsd:enumeration value="Mr"/>
	<xsd:enumeration value="Mrs"/>
	<xsd:enumeration value="Ms"/>
        <xsd:enumeration value="other"/>
     </xsd:restriction>
  </xsd:simpleType>


<xsd:simpleType name="RoleTypes">
     <xsd:restriction base="xsd:string">
	<xsd:enumeration value="Post Doctoral Research Assistant"/>
	<xsd:enumeration value="pdra"/>
	<xsd:enumeration value="PDRA"/>
	<xsd:enumeration value="PI"/>
	<xsd:enumeration value="Principal Investigator"/>
        <xsd:enumeration value="other"/>
     </xsd:restriction>
  </xsd:simpleType>


<!-- some of the contact details in the DTD hinted at being overkill -->

  <xsd:complexType name="InvestigatorType">
     <xsd:complexContent>
        <xsd:extension base="cmd:PersonType">
           <xsd:sequence>
              <xsd:element name="Role" type="cmd:RoleTypes"/>
           </xsd:sequence>
        </xsd:extension>
     </xsd:complexContent>
  </xsd:complexType>


  <xsd:complexType name="NameType">
     <xsd:sequence>
        <xsd:element name="Surname" type="xsd:string"/>
        <xsd:element name="Initials" type="xsd:string"/>
        <xsd:element name="Forename" type="xsd:string" minOccurs="0"/>
        <xsd:element name="Title" type="cmd:TitleTypes" minOccurs="0" maxOccurs="1"/>
     </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="ContactDetailsType">
     <xsd:sequence>
        <xsd:element name="Address"   type="cmd:AddressType"/>
        <xsd:element name="Telephone" type="xsd:string"/>
        <xsd:element name="Email"     type="xsd:string" minOccurs="0" maxOccurs="1"/>
        <xsd:element name="Fax"       type="xsd:string" minOccurs="0" maxOccurs="1"/>
     </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="AddressType">
     <xsd:sequence>
        <xsd:element name="Addressline1" type="xsd:string"/>
        <xsd:element name="Addressline2" type="xsd:string" minOccurs="0" maxOccurs="1"/>
        <xsd:element name="Town"         type="xsd:string"/>
        <xsd:element name="Region"       type="xsd:string" minOccurs="0" maxOccurs="1"/>
        <xsd:element name="Postcode"     type="xsd:string" minOccurs="0" maxOccurs="1"/>
        <xsd:element name="Country">
<!-- again we don't mention the type above as we have to extend it -->
           <xsd:complexType>
              <xsd:simpleContent>
                 <xsd:extension base="xsd:string">
                 <!-- again in the following can't find an XMLSchema equiv for #CDATA  -->
                 <!-- also perhaps we should make a type with all country codes in it  -->
                 <!-- this could even be placed in a different file and included --> 
                    <xsd:attribute name="countryabbrev" type="xsd:string"/>
                 </xsd:extension>
              </xsd:simpleContent>
           </xsd:complexType>
        </xsd:element>
     </xsd:sequence>
  </xsd:complexType>


<!-- expanding on the study information type -->

   <xsd:complexType name="StudyInformationType">
      <xsd:sequence>
         <xsd:element name="Funding" type="xsd:string" minOccurs="0" maxOccurs="1"/>
         <xsd:element name="TimePeriod" type="cmd:TimePeriodType"/>
         <xsd:element name="Purpose" type="cmd:PurposeType"/>
<!-- perhaps the following should be an enumerated list - even held in a different file -->
<!-- and included here - note taken from the DTD -->
         <xsd:element name="StudyStatus" type="xsd:string"/>
         <xsd:element name="Resources" type="xsd:string" minOccurs="0" maxOccurs="1"/>
      </xsd:sequence>
   </xsd:complexType>


   <xsd:complexType name="TimePeriodType">
      <xsd:sequence>
         <xsd:element name="StartDate" type="cmd:DateTimeType"/>
         <xsd:element name="EndDate"   type="cmd:DateTimeType"/>
      </xsd:sequence>
   </xsd:complexType>


<!-- no equivelent to this following type in DTD - as you can't constrain the contents -->
<!-- of the element in this way in a DTD -->

   <xsd:complexType name="DateTimeType">
      <xsd:sequence>
<!-- note however rather than the dd/mm/ccyy reresentation mentioned in the DTD -->
<!-- this format will be CCYY-MM-DD as this is the lexical format for the 'date' -->
<!-- datatype in XMLSchema - not sure if this is going to be a problem otherwise -->
<!-- we could just use a string and validate it ourselves - perhaps ? -->
<!-- the 'date' type also supports an optional timezone component - not sure -->
<!-- how useful this would be - apparently the 'date' type adheres to the ISO8601 -->
<!-- standard on representing dates- however the right-truncated format of the date -->
<!-- appears to be only a subset of what is allowable in ISO8601 --> 
         <xsd:element name="Date" type="xsd:date"/>
<!-- the format of the time attribute is hh:mm:ss.sss with an optional timezone information -->
<!-- section - the DTD states a preference for hh:mm:ss -->
<!-- might be worth just using our own standard and holding them in string - depends if -->
<!-- the XML Schema forms get in the way - then again date validation if more thoroughly -->
<!-- enforced using the schema -->
         <xsd:element name="Time" type="xsd:time" minOccurs="0"/>
      </xsd:sequence>
   </xsd:complexType>

   <xsd:complexType name="PurposeType">
      <xsd:sequence>
<!-- note in the DTD that maybe we should accept HTML -->
         <xsd:element name="Abstract" type="xsd:string" minOccurs="0" maxOccurs="1"/>
<!-- again perhaps the following should be an enumerated type -->
      </xsd:sequence>
   </xsd:complexType>


<!-- e.g. of the enumeration - perhaps the DTD has more flexibility - as you can have -->
<!-- a PCDATA as well as any of the choices ? -->
<!--

   <xsd:simpleType name="StudyTypes">
      <xsd:restriction base="xsd:string">
         <xsd:enumeration value="COMPLETE"/>
         <xsd:enumeration value="INPROGRESS"/>
         <xsd:enumeration value="PENDING"/>
      </xsd:restriction>
   </xsd:simpleType>

                                                 -->

   <xsd:complexType name="DataHoldingType">
      <xsd:sequence>
         <xsd:element name="DataDescription"    type="cmd:DataDescriptionType"/>
         <xsd:element name="DataSet"            type="cmd:DataSetType" minOccurs="0" maxOccurs="unbounded"/>
	 <xsd:element name="RelatedStudy"       type="cmd:RelatedStudyType" minOccurs="0"/>
         <xsd:element name="DataHoldingLocator" type="cmd:DataHoldingLocatorType"/>
      </xsd:sequence>
<!-- again following attribute type should really be a CDATA equivelent -->
<!-- but can't seem to find it -->
      <xsd:attribute name="InvestigationID" type="xsd:ID" use="required"/>
   </xsd:complexType>


   <xsd:complexType name="ParameterType">
      <xsd:sequence>
         <xsd:element name="ParamName" type="xsd:string"/>
	 <xsd:element name="Derivation" type="cmd:DerivationTypes"/>
         <xsd:element name="Units" type="cmd:UnitsType" minOccurs="0" maxOccurs="1"/>
         <xsd:element name="ParamValue" type="xsd:string" minOccurs="0" maxOccurs="1"/>
         <xsd:element name="Range" type="cmd:RangeType" minOccurs="0" maxOccurs="1"/>
      </xsd:sequence>
   </xsd:complexType>

   <xsd:complexType name="UnitsType">
      <xsd:sequence>
	 <xsd:element name="UnitName" type="xsd:string"/>
	 <xsd:element name="UnitAcronym" type="xsd:string"/>
	 <xsd:element name="UnitSystem" type ="xsd:string"/>
      </xsd:sequence>
   </xsd:complexType>
	

   <xsd:simpleType name="DerivationTypes">
      <xsd:restriction base="xsd:string">
	 <!-- i.e. experimental conditions e.g. date : -->
	 <xsd:enumeration value="fixed"/>
	 <!-- i.e. what was actually measured e.g. temperature : -->
	 <xsd:enumeration value="measured"/>
	 <!-- i.e. a derived parameter from measured/fixed ones e.g. average temperature : -->
	 <xsd:enumeration value="calculated"/>
	 <!-- i.e. a characteristic of the environment e.g. compiler version  -->
	 <xsd:enumeration value="environment"/>
         <xsd:enumeration value="other"/>
      </xsd:restriction>
   </xsd:simpleType>
   
   <xsd:complexType name="RangeType">
      <xsd:sequence>
         <xsd:element name="Limit" minOccurs="1" maxOccurs="unbounded">
            <xsd:complexType>
               <xsd:simpleContent>
                  <xsd:extension base="xsd:string">
                     <xsd:attribute name="bound" type="cmd:boundTypes" use="optional"/>
                  </xsd:extension>
               </xsd:simpleContent>
            </xsd:complexType>
	 </xsd:element>
	 <xsd:element name="MarginOfError" type="xsd:string"/>
      </xsd:sequence>
   </xsd:complexType>
            
         
   <xsd:simpleType name="boundTypes">
      <xsd:restriction base="xsd:string">
         <xsd:enumeration value="upper"/>
	 <xsd:enumeration value="lower"/>
         <xsd:enumeration value="other"/>
      </xsd:restriction>
   </xsd:simpleType>


   <xsd:complexType name="LogicalDescriptionTypes">
      <xsd:sequence>
	 <!-- even coverage information stored in Parameters now -->
         <xsd:element name="Parameter" type="cmd:ParameterType" minOccurs="0" maxOccurs="unbounded"/>
	 <xsd:element name="TimePeriod" type="cmd:TimePeriodType" minOccurs="0"/>
	 <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
	 <xsd:element name="FacilityUsed" type="xsd:string" minOccurs="0"/>
      </xsd:sequence>
   </xsd:complexType>


   <xsd:complexType name="DataDescriptionType">
      <xsd:sequence>
         <xsd:element name="DataName"   type="xsd:string"/>
	 <xsd:element name="TypeOfData" type="cmd:TypesOfData" minOccurs="0" maxOccurs="1"/>
         <xsd:element name="Status"     type="xsd:string" minOccurs="0" maxOccurs="1"/>
<!-- need to use a union type as LogicalDescription can be of one or more type -->
         <xsd:element name="LogicalDescription" type="cmd:LogicalDescriptionTypes" minOccurs="0" maxOccurs="1"/>
      </xsd:sequence>
   </xsd:complexType>

   <xsd:simpleType name="TypesOfData">
      <xsd:restriction base="xsd:string">
	 <xsd:enumeration value="File"/>
	 <xsd:enumeration value="BLOB"/>
         <xsd:enumeration value="other"/>
      </xsd:restriction>
   </xsd:simpleType>

 
   <xsd:complexType name="DataSetType">
      <xsd:sequence>
         <xsd:element name="DataDescription" type="cmd:DataDescriptionType"/>
	 <xsd:element name="AtomicDataObject"            type="cmd:ADOType" minOccurs="0" maxOccurs="unbounded"/>
         <xsd:element name="DataSet"           type="cmd:DataSetType" minOccurs="0" maxOccurs="unbounded"/>
         <xsd:element name="RelatedDataSetRef" type="cmd:RelatedDataSetRefType" minOccurs="0"/>
	 <!--         <xsd:element name="ParentDataSetRef"  type="xsd:string" minOccurs="0" maxOccurs="1"/> -->
	 <!-- <xsd:element name="ChildDataSetRef"   type="xsd:string" minOccurs="0"/> -->
         <xsd:element name="DerivedFromDataSetRef" type="cmd:DerivedFromDataSetRefType" minOccurs="0"/>
         <xsd:element name="DataSetLocator"    type="cmd:DataSetLocatorType" minOccurs="0" maxOccurs="unbounded"/>
      </xsd:sequence>
<!-- again the following is stated as a CDATA type in the original DTD -->
      <xsd:attribute name="dataid" type="xsd:ID" use="required"/>
   </xsd:complexType>


   <xsd:complexType name="DerivedFromDataSetRefType">
      <xsd:sequence>
         <xsd:element name="DataHoldingRef" type="xsd:string" minOccurs="0" maxOccurs="1"/>
         <xsd:element name="DataSetRef"     type="xsd:string"/>
      </xsd:sequence>
   </xsd:complexType>


   <xsd:complexType name="RelatedDataSetRefType">
      <xsd:sequence>
         <xsd:element name="DataSetRef"   type="xsd:string"/>
         <xsd:element name="RelationType" type="xsd:string"/>
      </xsd:sequence>
   </xsd:complexType>

   

   <xsd:complexType name="ADOType">
      <xsd:sequence>
	 <xsd:element name="Name" type="xsd:string"/>
         <xsd:element name="DataDescription" type="cmd:DataDescriptionType"/>
         <xsd:element name="RelatedADORef" type="cmd:RelatedADORefType" minOccurs="0"/>
         <xsd:element name="DerivedFromADORef" type="cmd:DerivedFromADORefType" minOccurs="0"/>
         <xsd:element name="ADOLocator"        type="cmd:ADOLocatorType" minOccurs="0" maxOccurs="unbounded"/>
      </xsd:sequence>
      <xsd:attribute name="dataid" type="xsd:ID" use="required"/>
   </xsd:complexType>

      <!-- how to use the specialisation parent/child class/subclass 'feature' : -->
      <!--
      <root_element 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	 ...
      >

      ...
      
      ...<ADOLocator xsi:type="cmd:FileLocator">

      ...

      -->

   <xsd:complexType name="FileLocator">
      <xsd:complexContent>
         <xsd:extension base="cmd:ADOLocatorType">
            <xsd:sequence>
	       <xsd:element name="Media" type="xsd:string"/>
	       <xsd:element name="Filetype" type="xsd:string"/>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <xsd:complexType name="BLOBLocator">
      <xsd:complexContent>
         <xsd:extension base="cmd:ADOLocatorType">
            <xsd:sequence>
	       <xsd:element name="DatabaseType" type="xsd:string"/>
	       <xsd:element name="DatabaseVersion" type="xsd:string"/>
	       <xsd:element name="Host" type="xsd:string"/>
	       <xsd:element name="Instance" type="xsd:string" minOccurs="0"/>
	       <xsd:element name="Database" type="xsd:string"/>
	       <xsd:element name="Port" type="xsd:string" minOccurs="0"/>
	       <xsd:element name="Table" type="xsd:string"/>
	       <xsd:element name="Column" type="xsd:string"/>
	       <xsd:element name="DataFormat" type="xsd:string"/>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>


   <xsd:complexType name="RelatedADORefType">
      <xsd:sequence>
         <xsd:element name="ADORef" type="xsd:string"/>
         <xsd:element name="RelationType" type="xsd:string"/>
      </xsd:sequence>
   </xsd:complexType>

   
   <xsd:complexType name="DerivedFromADORefType">
      <xsd:sequence>
         <xsd:element name="DataHoldingRef" type="xsd:string" minOccurs="0" maxOccurs="1"/>
         <xsd:element name="DataSetRef"     type="xsd:string" minOccurs="0" maxOccurs="1"/>
         <xsd:element name="ADORef"        type="xsd:string" />
      </xsd:sequence>
   </xsd:complexType>


<!--  in the following the compact syntax works because a complex type defined without -->
<!--  any simpleContent or complexContent is interpreted as shorthand for complex      -->
<!--  content that restricts anyType -->


   <xsd:complexType name="RelatedStudyType">
      <xsd:sequence>
         <xsd:element name="StudyRef">
            <xsd:complexType>
               <xsd:attribute name="studyref" type="xsd:IDREF" use="required"/>
            </xsd:complexType>
         </xsd:element>
         <xsd:element name="RelationType" type="xsd:string"/>
      </xsd:sequence>
   </xsd:complexType>


   <!-- The DataLocationTypes  -->


   <xsd:complexType name="DataHoldingLocatorType">
      <xsd:sequence>
         <xsd:element name="DataName" type="xsd:string"/>
         <xsd:element name="Locator"  type="cmd:LocatorTypes" minOccurs="0" maxOccurs="unbounded"/>
      </xsd:sequence>
<!-- type of this attribute should really be a CDATA - no equivelent in XMLSchema -->
      <xsd:attribute name="dataidref" type="xsd:string" use="required"/>
   </xsd:complexType>


   <xsd:simpleType name="LocatorTypes">
      <xsd:restriction base="xsd:string">
         <xsd:enumeration value="absolute"/>
         <xsd:enumeration value="relative"/>
      </xsd:restriction>
   </xsd:simpleType>


   <xsd:complexType name="DataSetLocatorType">
      <xsd:sequence>
         <xsd:element name="DataName" type="xsd:string"/>
         <xsd:element name="Locator"  type="cmd:LocatorTypes" minOccurs="0" maxOccurs="unbounded"/>
      </xsd:sequence>
<!-- type of this attribute should really be a CDATA - no equivelent in XMLSchema -->
      <xsd:attribute name="dataidref" type="xsd:string" use="required"/>
   </xsd:complexType>


   <xsd:complexType name="ADOLocatorType">
      <xsd:sequence>
         <xsd:element name="URI" type="xsd:string"/>
	 <xsd:element name="AccessMethod" type="xsd:string" minOccurs="0"/>
	 <xsd:element name="Size" type="xsd:string" minOccurs="0"/>
	 <xsd:element name="offset"  type="xsd:string" minOccurs="0"/>
	 <xsd:element name="length"  type="xsd:string" minOccurs="0"/>
      </xsd:sequence>
<!-- type of this attribute should really be a CDATA - no equivelent in XMLSchema -->
      <xsd:attribute name="dataidref" type="xsd:string" use="required"/>
      <xsd:attribute name="type" type="cmd:LocatorTypes" default="absolute" use="optional"/>
   </xsd:complexType>


  <!-- Related Materials as a type  -->

   <xsd:simpleType name="Publications">
      <xsd:restriction base="xsd:string"/>
   </xsd:simpleType>

   
   <xsd:simpleType name="References">
      <xsd:restriction base="xsd:string"/>
   </xsd:simpleType>

 
   <xsd:simpleType name="RelatedInvestigations">
      <xsd:restriction base="xsd:string"/>
   </xsd:simpleType>         


   <xsd:simpleType name="CommunityInformation">
      <xsd:restriction base="xsd:string"/>
   </xsd:simpleType>


   <xsd:simpleType name="RelatedMaterialTypes">
      <xsd:union memberTypes="xsd:string cmd:Publications cmd:References cmd:RelatedInvestigations cmd:CommunityInformation"/> 
   </xsd:simpleType>


</xsd:schema>



